[
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nElasticsearch check fails when used with Opensearch\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\n    elastic (1.24.0)\r\n    ----------------\r\n      Instance ID: elastic:e6126c6cf9b8eebe [ERROR]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/elastic.yaml\r\n      Total Runs: 121\r\n      Metric Samples: Last Run: 0, Total: 0\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 1, Total: 121\r\n      Average Execution Time : 13ms\r\n      Last Execution Date : 2021-09-10 06:00:16 UTC (1631253616000)\r\n      Last Successful Execution Date : Never\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 0\r\n        version.patch: 0\r\n        version.raw: 1.0.0\r\n        version.scheme: semver\r\n      Error: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n      Traceback (most recent call last):\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\", line 897, in run\r\n          self.check(instance)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 79, in check\r\n          stats_data = self._get_data(stats_url)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 232, in _get_data\r\n          resp.raise_for_status()\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\", line 940, in raise_for_status\r\n          raise HTTPError(http_error_msg, response=self)\r\n      requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nFedora 33 running agent inside systemd-nspawn container. Container is running Opensearch 1.0.0 and datadog agent has been configured to monitor it.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install and run Opensearch\r\n2. Configure datadog agent Elasticsearch integration to monitor it\r\n3. Observe that the Elasticsearch check is failing\r\n\r\n**Describe the results you received:**\r\n\r\nThe Elasticsearch check fails in the following way:\r\n```text\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:261 in work) | check:elastic | Running check\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/check.go:81 in runCheck) | Running python check elastic elastic:878a21a7a9cbcd49\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET / HTTP/1.1\" 200 349\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:247) | request to url http://localhost:9200 returned: <Response [200]>\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:147) | Elasticsearch version is [1, 0, 0]\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET /_nodes/_local/stats?all=true HTTP/1.1\" 400 155\r\n2021-09-09 12:48:49 UTC | CORE | ERROR | (pkg/collector/runner/runner.go:292 in work) | Error running check elastic: [{\"message\": \"400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\\\", line 897, in run\\n    self.check(instance)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 79, in check\\n    stats_data = self._get_data(stats_url)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 232, in _get_data\\n    resp.raise_for_status()\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\\\", line 940, in raise_for_status\\n    raise HTTPError(http_error_msg, response=self)\\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\\n\"}]\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:327 in work) | check:elastic | Done running check\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nOpensearch 1.0.0 is fully compatible with Elasticsearch 7.10.2 and datadog agent should be able to monitor it in the same way as the Elasticsearch.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe issue seems to be that since Opensearch is reporting its version as `1.0.0` the Elasticsearch check interprets it as Elasticsearch `1.0.0` and for this reason adds `?all=true` to the URL when calling `/_nodes/_local/stats` API to collect the node stats. https://github.com/DataDog/integrations-core/blob/40d9ceb14c57c109e8f6371b1a4c677fa33e1669/elastic/datadog_checks/elastic/elastic.py#L215\r\n\r\nThe `?all=true` parameter has been depricated since Elasticsearch version `5.0.0` and results in HTTP 400 error when used with newer versions of Elasticsearch. All is working well when Elasticsearch check is monitoring Opensearch if `?all=true` has been left out when making requests to `/_nodes/_local/stats`.\r\n\r\nThe version information returned from Opensearch contains field called `distribution` which has value `opensearch` that could be used to detect that the check is actually running against an Opensearch server. Example here:\r\n```text\r\n{'name': 'os-355e47a7-1', 'cluster_name': 'fc7a706a-9c51-40a1-9e1b-953d1546caa0', 'cluster_uuid': 'HrCNW5uhSZKtHxlJQz444g', 'version': {'distribution': 'opensearch', 'number': '1.0.0', 'build_type': 'unknown', 'build_hash': 'unknown', 'build_date': '2021-08-13T12:38:05.881264Z', 'build_snapshot': False, 'lucene_version': '8.8.2', 'minimum_wire_compatibility_version': '6.8.0', 'minimum_index_compatibility_version': '6.0.0-beta1'}, 'tagline': 'The OpenSearch Project: https://opensearch.org/'}\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nproxysql/datadog_checks/proxysql/__init__.py\n## context:\n# (C) Datadog, Inc. 2020-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nfrom .__about__ import __version__\nfrom .proxysql import ProxysqlCheck\n\n__all__ = ['__version__', 'ProxysqlCheck']\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nyarn/datadog_checks/yarn/config_models/validators.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nElasticsearch check fails when used with Opensearch\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\n    elastic (1.24.0)\r\n    ----------------\r\n      Instance ID: elastic:e6126c6cf9b8eebe [ERROR]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/elastic.yaml\r\n      Total Runs: 121\r\n      Metric Samples: Last Run: 0, Total: 0\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 1, Total: 121\r\n      Average Execution Time : 13ms\r\n      Last Execution Date : 2021-09-10 06:00:16 UTC (1631253616000)\r\n      Last Successful Execution Date : Never\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 0\r\n        version.patch: 0\r\n        version.raw: 1.0.0\r\n        version.scheme: semver\r\n      Error: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n      Traceback (most recent call last):\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\", line 897, in run\r\n          self.check(instance)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 79, in check\r\n          stats_data = self._get_data(stats_url)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 232, in _get_data\r\n          resp.raise_for_status()\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\", line 940, in raise_for_status\r\n          raise HTTPError(http_error_msg, response=self)\r\n      requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nFedora 33 running agent inside systemd-nspawn container. Container is running Opensearch 1.0.0 and datadog agent has been configured to monitor it.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install and run Opensearch\r\n2. Configure datadog agent Elasticsearch integration to monitor it\r\n3. Observe that the Elasticsearch check is failing\r\n\r\n**Describe the results you received:**\r\n\r\nThe Elasticsearch check fails in the following way:\r\n```text\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:261 in work) | check:elastic | Running check\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/check.go:81 in runCheck) | Running python check elastic elastic:878a21a7a9cbcd49\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET / HTTP/1.1\" 200 349\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:247) | request to url http://localhost:9200 returned: <Response [200]>\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:147) | Elasticsearch version is [1, 0, 0]\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET /_nodes/_local/stats?all=true HTTP/1.1\" 400 155\r\n2021-09-09 12:48:49 UTC | CORE | ERROR | (pkg/collector/runner/runner.go:292 in work) | Error running check elastic: [{\"message\": \"400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\\\", line 897, in run\\n    self.check(instance)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 79, in check\\n    stats_data = self._get_data(stats_url)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 232, in _get_data\\n    resp.raise_for_status()\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\\\", line 940, in raise_for_status\\n    raise HTTPError(http_error_msg, response=self)\\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\\n\"}]\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:327 in work) | check:elastic | Done running check\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nOpensearch 1.0.0 is fully compatible with Elasticsearch 7.10.2 and datadog agent should be able to monitor it in the same way as the Elasticsearch.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe issue seems to be that since Opensearch is reporting its version as `1.0.0` the Elasticsearch check interprets it as Elasticsearch `1.0.0` and for this reason adds `?all=true` to the URL when calling `/_nodes/_local/stats` API to collect the node stats. https://github.com/DataDog/integrations-core/blob/40d9ceb14c57c109e8f6371b1a4c677fa33e1669/elastic/datadog_checks/elastic/elastic.py#L215\r\n\r\nThe `?all=true` parameter has been depricated since Elasticsearch version `5.0.0` and results in HTTP 400 error when used with newer versions of Elasticsearch. All is working well when Elasticsearch check is monitoring Opensearch if `?all=true` has been left out when making requests to `/_nodes/_local/stats`.\r\n\r\nThe version information returned from Opensearch contains field called `distribution` which has value `opensearch` that could be used to detect that the check is actually running against an Opensearch server. Example here:\r\n```text\r\n{'name': 'os-355e47a7-1', 'cluster_name': 'fc7a706a-9c51-40a1-9e1b-953d1546caa0', 'cluster_uuid': 'HrCNW5uhSZKtHxlJQz444g', 'version': {'distribution': 'opensearch', 'number': '1.0.0', 'build_type': 'unknown', 'build_hash': 'unknown', 'build_date': '2021-08-13T12:38:05.881264Z', 'build_snapshot': False, 'lucene_version': '8.8.2', 'minimum_wire_compatibility_version': '6.8.0', 'minimum_index_compatibility_version': '6.0.0-beta1'}, 'tagline': 'The OpenSearch Project: https://opensearch.org/'}\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nnginx/tests/utils.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nimport json\nimport os\nimport re\n\nimport mock\n\nfrom datadog_checks.dev.utils import read_file\n\nfrom .common import FIXTURES_PATH\n\n\ndef mocked_perform_request(*args, **kwargs):\n    \"\"\"\n    A mocked version of _perform_request\n    \"\"\"\n    response = mock.MagicMock()\n    url = args[0]\n\n    if re.search('/[23]/nginx', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_nginx.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/processes', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_processes.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/connections', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_connections.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/ssl', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_ssl.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/slabs', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_slabs.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/requests', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_requests.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/server_zones', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_server_zones.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/caches', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_caches.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/upstreams', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_upstreams.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/stream/upstreams', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_upstreams.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/stream/server_zones', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_server_zones.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif '/3/stream/zone_sync' in url:\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_zone_sync.json'))\n        response.json.return_value = json.loads(file_contents)\n    else:\n        response.json.return_value = ''\n\n    return response\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nexternal_dns/datadog_checks/__init__.py\n## context:\n# (C) Datadog, Inc. 2019-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n__path__ = __import__('pkgutil').extend_path(__path__, __name__)  # type: ignore\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nElasticsearch check fails when used with Opensearch\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\n    elastic (1.24.0)\r\n    ----------------\r\n      Instance ID: elastic:e6126c6cf9b8eebe [ERROR]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/elastic.yaml\r\n      Total Runs: 121\r\n      Metric Samples: Last Run: 0, Total: 0\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 1, Total: 121\r\n      Average Execution Time : 13ms\r\n      Last Execution Date : 2021-09-10 06:00:16 UTC (1631253616000)\r\n      Last Successful Execution Date : Never\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 0\r\n        version.patch: 0\r\n        version.raw: 1.0.0\r\n        version.scheme: semver\r\n      Error: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n      Traceback (most recent call last):\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\", line 897, in run\r\n          self.check(instance)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 79, in check\r\n          stats_data = self._get_data(stats_url)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 232, in _get_data\r\n          resp.raise_for_status()\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\", line 940, in raise_for_status\r\n          raise HTTPError(http_error_msg, response=self)\r\n      requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nFedora 33 running agent inside systemd-nspawn container. Container is running Opensearch 1.0.0 and datadog agent has been configured to monitor it.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install and run Opensearch\r\n2. Configure datadog agent Elasticsearch integration to monitor it\r\n3. Observe that the Elasticsearch check is failing\r\n\r\n**Describe the results you received:**\r\n\r\nThe Elasticsearch check fails in the following way:\r\n```text\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:261 in work) | check:elastic | Running check\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/check.go:81 in runCheck) | Running python check elastic elastic:878a21a7a9cbcd49\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET / HTTP/1.1\" 200 349\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:247) | request to url http://localhost:9200 returned: <Response [200]>\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:147) | Elasticsearch version is [1, 0, 0]\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET /_nodes/_local/stats?all=true HTTP/1.1\" 400 155\r\n2021-09-09 12:48:49 UTC | CORE | ERROR | (pkg/collector/runner/runner.go:292 in work) | Error running check elastic: [{\"message\": \"400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\\\", line 897, in run\\n    self.check(instance)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 79, in check\\n    stats_data = self._get_data(stats_url)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 232, in _get_data\\n    resp.raise_for_status()\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\\\", line 940, in raise_for_status\\n    raise HTTPError(http_error_msg, response=self)\\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\\n\"}]\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:327 in work) | check:elastic | Done running check\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nOpensearch 1.0.0 is fully compatible with Elasticsearch 7.10.2 and datadog agent should be able to monitor it in the same way as the Elasticsearch.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe issue seems to be that since Opensearch is reporting its version as `1.0.0` the Elasticsearch check interprets it as Elasticsearch `1.0.0` and for this reason adds `?all=true` to the URL when calling `/_nodes/_local/stats` API to collect the node stats. https://github.com/DataDog/integrations-core/blob/40d9ceb14c57c109e8f6371b1a4c677fa33e1669/elastic/datadog_checks/elastic/elastic.py#L215\r\n\r\nThe `?all=true` parameter has been depricated since Elasticsearch version `5.0.0` and results in HTTP 400 error when used with newer versions of Elasticsearch. All is working well when Elasticsearch check is monitoring Opensearch if `?all=true` has been left out when making requests to `/_nodes/_local/stats`.\r\n\r\nThe version information returned from Opensearch contains field called `distribution` which has value `opensearch` that could be used to detect that the check is actually running against an Opensearch server. Example here:\r\n```text\r\n{'name': 'os-355e47a7-1', 'cluster_name': 'fc7a706a-9c51-40a1-9e1b-953d1546caa0', 'cluster_uuid': 'HrCNW5uhSZKtHxlJQz444g', 'version': {'distribution': 'opensearch', 'number': '1.0.0', 'build_type': 'unknown', 'build_hash': 'unknown', 'build_date': '2021-08-13T12:38:05.881264Z', 'build_snapshot': False, 'lucene_version': '8.8.2', 'minimum_wire_compatibility_version': '6.8.0', 'minimum_index_compatibility_version': '6.0.0-beta1'}, 'tagline': 'The OpenSearch Project: https://opensearch.org/'}\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nharbor/tests/compose/harbor-1.8.0/config/chartserver/env\n## context:\n## Settings should be set\nPORT=9999\n\n# Only support redis now. If redis is setup, then enable cache\nCACHE=redis\nCACHE_REDIS_ADDR=redis:6379\nCACHE_REDIS_PASSWORD=\nCACHE_REDIS_DB=3\n\n# Credential for internal communication\nBASIC_AUTH_USER=chart_controller\nBASIC_AUTH_PASS=BT0VuY9rVQP5GZTr\n\n# Multiple tenants\n# Must be set with 1 to support project namespace\nDEPTH=1\n\n# Backend storage driver: e.g. \"local\", \"amazon\", \"google\" etc.\nSTORAGE=local\n\n# Storage driver settings\nSTORAGE_LOCAL_ROOTDIR=/chart_storage\n\n## Settings with default values. Just put here for future changes\nDEBUG=false\nLOG_JSON=true\nDISABLE_METRICS=false\nDISABLE_API=false\nDISABLE_STATEFILES=false\nALLOW_OVERWRITE=true\nCHART_URL=https://127.0.0.1/chartrepo\nAUTH_ANONYMOUS_GET=false\nTLS_CERT=\nTLS_KEY=\nCONTEXT_PATH=\nINDEX_LIMIT=0\nMAX_STORAGE_OBJECTS=0\nMAX_UPLOAD_SIZE=20971520\nCHART_POST_FORM_FIELD_NAME=chart\nPROV_POST_FORM_FIELD_NAME=prov\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncisco_aci/tests/fixtures/fabric/b4e10262ba44c169d8ccf61afa3d383f.txt\n## context:\n{\"totalCount\":\"294\",\"imdata\":[{\"fvFltCounter5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"27\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter5min\",\"lastCollOffset\":\"270\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:38.592-07:00\",\"repIntvStart\":\"2018-05-30T12:45:08.509-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-1\",\"index\":\"1\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:40:08.414-07:00\",\"repIntvStart\":\"2018-05-30T12:35:08.330-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-0\",\"index\":\"0\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:45:08.509-07:00\",\"repIntvStart\":\"2018-05-30T12:40:08.414-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"29\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-11\",\"index\":\"11\",\"lastCollOffset\":\"290\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:49:57.633-07:00\",\"repIntvStart\":\"2018-05-30T11:45:07.542-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"31\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-10\",\"index\":\"10\",\"lastCollOffset\":\"310\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:55:07.696-07:00\",\"repIntvStart\":\"2018-05-30T11:49:57.633-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"29\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-9\",\"index\":\"9\",\"lastCollOffset\":\"290\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:59:57.770-07:00\",\"repIntvStart\":\"2018-05-30T11:55:07.696-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"31\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-8\",\"index\":\"8\",\"lastCollOffset\":\"310\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:05:07.839-07:00\",\"repIntvStart\":\"2018-05-30T11:59:57.770-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-7\",\"index\":\"7\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:10:07.910-07:00\",\"repIntvStart\":\"2018-05-30T12:05:07.839-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-6\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:15:07.984-07:00\",\"repIntvStart\":\"2018-05-30T12:10:07.910-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-5\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:20:08.087-07:00\",\"repIntvStart\":\"2018-05-30T12:15:07.984-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"29\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-4\",\"index\":\"4\",\"lastCollOffset\":\"290\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:24:58.160-07:00\",\"repIntvStart\":\"2018-05-30T12:20:08.087-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"31\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-3\",\"index\":\"3\",\"lastCollOffset\":\"310\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:30:08.246-07:00\",\"repIntvStart\":\"2018-05-30T12:24:58.160-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-2\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:35:08.330-07:00\",\"repIntvStart\":\"2018-05-30T12:30:08.246-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounter15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter15min\",\"lastCollOffset\":\"600\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T12:45:08.509-07:00\",\"repIntvStart\":\"2018-05-30T12:35:08.330-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1d\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"19\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1d\",\"lastCollOffset\":\"68408\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T12:05:07.839-07:00\",\"repIntvStart\":\"2018-05-29T17:04:59.503-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1h\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1h\",\"lastCollOffset\":\"1800\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T12:35:08.330-07:00\",\"repIntvStart\":\"2018-05-30T12:05:07.839-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1mo\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"29\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1mo\",\"lastCollOffset\":\"2504095\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T17:04:59.503-07:00\",\"repIntvStart\":\"2018-04-30T17:30:03.601-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1qtr\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"53\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1qtr\",\"lastCollOffset\":\"4555209\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T17:04:59.503-07:00\",\"repIntvStart\":\"2018-04-06T23:44:50.249-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1w\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1w\",\"lastCollOffset\":\"259202\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T17:04:59.503-07:00\",\"repIntvStart\":\"2018-05-26T17:04:57.078-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1year\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"53\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1year\",\"lastCollOffset\":\"4555209\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T17:04:59.503-07:00\",\"repIntvStart\":\"2018-04-06T23:44:50.249-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-44\",\"index\":\"44\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T01:35:01.308-07:00\",\"repIntvStart\":\"2018-05-30T01:20:01.035-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-43\",\"index\":\"43\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T01:50:01.553-07:00\",\"repIntvStart\":\"2018-05-30T01:35:01.308-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-42\",\"index\":\"42\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T02:05:01.836-07:00\",\"repIntvStart\":\"2018-05-30T01:50:01.553-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-41\",\"index\":\"41\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T02:20:02.076-07:00\",\"repIntvStart\":\"2018-05-30T02:05:01.836-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-40\",\"index\":\"40\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T02:35:02.335-07:00\",\"repIntvStart\":\"2018-05-30T02:20:02.076-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-39\",\"index\":\"39\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T02:49:52.784-07:00\",\"repIntvStart\":\"2018-05-30T02:35:02.335-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-38\",\"index\":\"38\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:05:03.256-07:00\",\"repIntvStart\":\"2018-05-30T02:49:52.784-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-37\",\"index\":\"37\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:20:03.528-07:00\",\"repIntvStart\":\"2018-05-30T03:05:03.256-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-36\",\"index\":\"36\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:34:53.720-07:00\",\"repIntvStart\":\"2018-05-30T03:20:03.528-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-35\",\"index\":\"35\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:49:53.965-07:00\",\"repIntvStart\":\"2018-05-30T03:34:53.720-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-34\",\"index\":\"34\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:04:54.592-07:00\",\"repIntvStart\":\"2018-05-30T03:49:53.965-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-33\",\"index\":\"33\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:20:04.865-07:00\",\"repIntvStart\":\"2018-05-30T04:04:54.592-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-32\",\"index\":\"32\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:35:05.129-07:00\",\"repIntvStart\":\"2018-05-30T04:20:04.865-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-31\",\"index\":\"31\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:50:05.609-07:00\",\"repIntvStart\":\"2018-05-30T04:35:05.129-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-30\",\"index\":\"30\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:05:05.854-07:00\",\"repIntvStart\":\"2018-05-30T04:50:05.609-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-29\",\"index\":\"29\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:20:06.136-07:00\",\"repIntvStart\":\"2018-05-30T05:05:05.854-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-28\",\"index\":\"28\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:35:06.613-07:00\",\"repIntvStart\":\"2018-05-30T05:20:06.136-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-27\",\"index\":\"27\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:50:06.819-07:00\",\"repIntvStart\":\"2018-05-30T05:35:06.613-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-26\",\"index\":\"26\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:05:07.058-07:00\",\"repIntvStart\":\"2018-05-30T05:50:06.819-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-25\",\"index\":\"25\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:19:57.278-07:00\",\"repIntvStart\":\"2018-05-30T06:05:07.058-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-24\",\"index\":\"24\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:35:07.534-07:00\",\"repIntvStart\":\"2018-05-30T06:19:57.278-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-23\",\"index\":\"23\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:50:07.773-07:00\",\"repIntvStart\":\"2018-05-30T06:35:07.534-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-22\",\"index\":\"22\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:04:57.978-07:00\",\"repIntvStart\":\"2018-05-30T06:50:07.773-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-21\",\"index\":\"21\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:19:58.588-07:00\",\"repIntvStart\":\"2018-05-30T07:04:57.978-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-20\",\"index\":\"20\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:34:58.825-07:00\",\"repIntvStart\":\"2018-05-30T07:19:58.588-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-19\",\"index\":\"19\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:49:59.160-07:00\",\"repIntvStart\":\"2018-05-30T07:34:58.825-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-18\",\"index\":\"18\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:04:59.847-07:00\",\"repIntvStart\":\"2018-05-30T07:49:59.160-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-17\",\"index\":\"17\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:20:00.610-07:00\",\"repIntvStart\":\"2018-05-30T08:04:59.847-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-16\",\"index\":\"16\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:35:01.287-07:00\",\"repIntvStart\":\"2018-05-30T08:20:00.610-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-15\",\"index\":\"15\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:50:01.662-07:00\",\"repIntvStart\":\"2018-05-30T08:35:01.287-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}}]}"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nElasticsearch check fails when used with Opensearch\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\n    elastic (1.24.0)\r\n    ----------------\r\n      Instance ID: elastic:e6126c6cf9b8eebe [ERROR]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/elastic.yaml\r\n      Total Runs: 121\r\n      Metric Samples: Last Run: 0, Total: 0\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 1, Total: 121\r\n      Average Execution Time : 13ms\r\n      Last Execution Date : 2021-09-10 06:00:16 UTC (1631253616000)\r\n      Last Successful Execution Date : Never\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 0\r\n        version.patch: 0\r\n        version.raw: 1.0.0\r\n        version.scheme: semver\r\n      Error: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n      Traceback (most recent call last):\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\", line 897, in run\r\n          self.check(instance)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 79, in check\r\n          stats_data = self._get_data(stats_url)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 232, in _get_data\r\n          resp.raise_for_status()\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\", line 940, in raise_for_status\r\n          raise HTTPError(http_error_msg, response=self)\r\n      requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nFedora 33 running agent inside systemd-nspawn container. Container is running Opensearch 1.0.0 and datadog agent has been configured to monitor it.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install and run Opensearch\r\n2. Configure datadog agent Elasticsearch integration to monitor it\r\n3. Observe that the Elasticsearch check is failing\r\n\r\n**Describe the results you received:**\r\n\r\nThe Elasticsearch check fails in the following way:\r\n```text\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:261 in work) | check:elastic | Running check\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/check.go:81 in runCheck) | Running python check elastic elastic:878a21a7a9cbcd49\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET / HTTP/1.1\" 200 349\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:247) | request to url http://localhost:9200 returned: <Response [200]>\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:147) | Elasticsearch version is [1, 0, 0]\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET /_nodes/_local/stats?all=true HTTP/1.1\" 400 155\r\n2021-09-09 12:48:49 UTC | CORE | ERROR | (pkg/collector/runner/runner.go:292 in work) | Error running check elastic: [{\"message\": \"400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\\\", line 897, in run\\n    self.check(instance)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 79, in check\\n    stats_data = self._get_data(stats_url)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 232, in _get_data\\n    resp.raise_for_status()\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\\\", line 940, in raise_for_status\\n    raise HTTPError(http_error_msg, response=self)\\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\\n\"}]\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:327 in work) | check:elastic | Done running check\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nOpensearch 1.0.0 is fully compatible with Elasticsearch 7.10.2 and datadog agent should be able to monitor it in the same way as the Elasticsearch.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe issue seems to be that since Opensearch is reporting its version as `1.0.0` the Elasticsearch check interprets it as Elasticsearch `1.0.0` and for this reason adds `?all=true` to the URL when calling `/_nodes/_local/stats` API to collect the node stats. https://github.com/DataDog/integrations-core/blob/40d9ceb14c57c109e8f6371b1a4c677fa33e1669/elastic/datadog_checks/elastic/elastic.py#L215\r\n\r\nThe `?all=true` parameter has been depricated since Elasticsearch version `5.0.0` and results in HTTP 400 error when used with newer versions of Elasticsearch. All is working well when Elasticsearch check is monitoring Opensearch if `?all=true` has been left out when making requests to `/_nodes/_local/stats`.\r\n\r\nThe version information returned from Opensearch contains field called `distribution` which has value `opensearch` that could be used to detect that the check is actually running against an Opensearch server. Example here:\r\n```text\r\n{'name': 'os-355e47a7-1', 'cluster_name': 'fc7a706a-9c51-40a1-9e1b-953d1546caa0', 'cluster_uuid': 'HrCNW5uhSZKtHxlJQz444g', 'version': {'distribution': 'opensearch', 'number': '1.0.0', 'build_type': 'unknown', 'build_hash': 'unknown', 'build_date': '2021-08-13T12:38:05.881264Z', 'build_snapshot': False, 'lucene_version': '8.8.2', 'minimum_wire_compatibility_version': '6.8.0', 'minimum_index_compatibility_version': '6.0.0-beta1'}, 'tagline': 'The OpenSearch Project: https://opensearch.org/'}\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nhivemq/tox.ini\n## context:\n[tox]\nminversion = 2.0\nskip_missing_interpreters = true\nbasepython = py38\nenvlist =\n    py38-{4.3}\n\n[testenv]\nensure_default_envdir = true\nenvdir =\n    py38: {toxworkdir}/py38\ndescription =\n    py38: e2e ready\ndd_check_style = true\nusedevelop = true\nplatform = linux|darwin|win32\ndeps =\n    -e../datadog_checks_base[deps]\n    -rrequirements-dev.txt\ncommands =\n    pip install -r requirements.in\n    pytest -v {posargs}\nsetenv =\n    4.3: HIVEMQ_VERSION=4.3.2\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncisco_aci/tests/fixtures/fabric/b4e10262ba44c169d8ccf61afa3d383f.txt\n## context:\n{\"totalCount\":\"294\",\"imdata\":[{\"fvFltCounter5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"27\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter5min\",\"lastCollOffset\":\"270\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:38.592-07:00\",\"repIntvStart\":\"2018-05-30T12:45:08.509-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-1\",\"index\":\"1\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:40:08.414-07:00\",\"repIntvStart\":\"2018-05-30T12:35:08.330-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-0\",\"index\":\"0\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:45:08.509-07:00\",\"repIntvStart\":\"2018-05-30T12:40:08.414-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"29\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-11\",\"index\":\"11\",\"lastCollOffset\":\"290\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:49:57.633-07:00\",\"repIntvStart\":\"2018-05-30T11:45:07.542-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"31\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-10\",\"index\":\"10\",\"lastCollOffset\":\"310\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:55:07.696-07:00\",\"repIntvStart\":\"2018-05-30T11:49:57.633-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"29\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-9\",\"index\":\"9\",\"lastCollOffset\":\"290\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:59:57.770-07:00\",\"repIntvStart\":\"2018-05-30T11:55:07.696-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"31\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-8\",\"index\":\"8\",\"lastCollOffset\":\"310\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:05:07.839-07:00\",\"repIntvStart\":\"2018-05-30T11:59:57.770-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-7\",\"index\":\"7\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:10:07.910-07:00\",\"repIntvStart\":\"2018-05-30T12:05:07.839-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-6\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:15:07.984-07:00\",\"repIntvStart\":\"2018-05-30T12:10:07.910-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-5\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:20:08.087-07:00\",\"repIntvStart\":\"2018-05-30T12:15:07.984-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"29\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-4\",\"index\":\"4\",\"lastCollOffset\":\"290\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:24:58.160-07:00\",\"repIntvStart\":\"2018-05-30T12:20:08.087-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"31\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-3\",\"index\":\"3\",\"lastCollOffset\":\"310\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:30:08.246-07:00\",\"repIntvStart\":\"2018-05-30T12:24:58.160-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter5min-2\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:35:08.330-07:00\",\"repIntvStart\":\"2018-05-30T12:30:08.246-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounter15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter15min\",\"lastCollOffset\":\"600\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T12:45:08.509-07:00\",\"repIntvStart\":\"2018-05-30T12:35:08.330-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1d\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"19\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1d\",\"lastCollOffset\":\"68408\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T12:05:07.839-07:00\",\"repIntvStart\":\"2018-05-29T17:04:59.503-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1h\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1h\",\"lastCollOffset\":\"1800\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T12:35:08.330-07:00\",\"repIntvStart\":\"2018-05-30T12:05:07.839-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1mo\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"29\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1mo\",\"lastCollOffset\":\"2504095\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T17:04:59.503-07:00\",\"repIntvStart\":\"2018-04-30T17:30:03.601-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1qtr\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"53\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1qtr\",\"lastCollOffset\":\"4555209\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T17:04:59.503-07:00\",\"repIntvStart\":\"2018-04-06T23:44:50.249-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1w\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1w\",\"lastCollOffset\":\"259202\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T17:04:59.503-07:00\",\"repIntvStart\":\"2018-05-26T17:04:57.078-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1year\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"53\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/CDfvFltCounter1year\",\"lastCollOffset\":\"4555209\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T17:04:59.503-07:00\",\"repIntvStart\":\"2018-04-06T23:44:50.249-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-44\",\"index\":\"44\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T01:35:01.308-07:00\",\"repIntvStart\":\"2018-05-30T01:20:01.035-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-43\",\"index\":\"43\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T01:50:01.553-07:00\",\"repIntvStart\":\"2018-05-30T01:35:01.308-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-42\",\"index\":\"42\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T02:05:01.836-07:00\",\"repIntvStart\":\"2018-05-30T01:50:01.553-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-41\",\"index\":\"41\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T02:20:02.076-07:00\",\"repIntvStart\":\"2018-05-30T02:05:01.836-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-40\",\"index\":\"40\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T02:35:02.335-07:00\",\"repIntvStart\":\"2018-05-30T02:20:02.076-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-39\",\"index\":\"39\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T02:49:52.784-07:00\",\"repIntvStart\":\"2018-05-30T02:35:02.335-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-38\",\"index\":\"38\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:05:03.256-07:00\",\"repIntvStart\":\"2018-05-30T02:49:52.784-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-37\",\"index\":\"37\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:20:03.528-07:00\",\"repIntvStart\":\"2018-05-30T03:05:03.256-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-36\",\"index\":\"36\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:34:53.720-07:00\",\"repIntvStart\":\"2018-05-30T03:20:03.528-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-35\",\"index\":\"35\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:49:53.965-07:00\",\"repIntvStart\":\"2018-05-30T03:34:53.720-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-34\",\"index\":\"34\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:04:54.592-07:00\",\"repIntvStart\":\"2018-05-30T03:49:53.965-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-33\",\"index\":\"33\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:20:04.865-07:00\",\"repIntvStart\":\"2018-05-30T04:04:54.592-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-32\",\"index\":\"32\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:35:05.129-07:00\",\"repIntvStart\":\"2018-05-30T04:20:04.865-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-31\",\"index\":\"31\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:50:05.609-07:00\",\"repIntvStart\":\"2018-05-30T04:35:05.129-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-30\",\"index\":\"30\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:05:05.854-07:00\",\"repIntvStart\":\"2018-05-30T04:50:05.609-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-29\",\"index\":\"29\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:20:06.136-07:00\",\"repIntvStart\":\"2018-05-30T05:05:05.854-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-28\",\"index\":\"28\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:35:06.613-07:00\",\"repIntvStart\":\"2018-05-30T05:20:06.136-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-27\",\"index\":\"27\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:50:06.819-07:00\",\"repIntvStart\":\"2018-05-30T05:35:06.613-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-26\",\"index\":\"26\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:05:07.058-07:00\",\"repIntvStart\":\"2018-05-30T05:50:06.819-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-25\",\"index\":\"25\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:19:57.278-07:00\",\"repIntvStart\":\"2018-05-30T06:05:07.058-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-24\",\"index\":\"24\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:35:07.534-07:00\",\"repIntvStart\":\"2018-05-30T06:19:57.278-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-23\",\"index\":\"23\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:50:07.773-07:00\",\"repIntvStart\":\"2018-05-30T06:35:07.534-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-22\",\"index\":\"22\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:04:57.978-07:00\",\"repIntvStart\":\"2018-05-30T06:50:07.773-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-21\",\"index\":\"21\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:19:58.588-07:00\",\"repIntvStart\":\"2018-05-30T07:04:57.978-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-20\",\"index\":\"20\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:34:58.825-07:00\",\"repIntvStart\":\"2018-05-30T07:19:58.588-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-19\",\"index\":\"19\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:49:59.160-07:00\",\"repIntvStart\":\"2018-05-30T07:34:58.825-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-18\",\"index\":\"18\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:04:59.847-07:00\",\"repIntvStart\":\"2018-05-30T07:49:59.160-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-17\",\"index\":\"17\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:20:00.610-07:00\",\"repIntvStart\":\"2018-05-30T08:04:59.847-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-16\",\"index\":\"16\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:35:01.287-07:00\",\"repIntvStart\":\"2018-05-30T08:20:00.610-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-202/sys/phys-[eth1/15]/HDfvFltCounter15min-15\",\"index\":\"15\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:50:01.662-07:00\",\"repIntvStart\":\"2018-05-30T08:35:01.287-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}}]}"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nElasticsearch check fails when used with Opensearch\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\n    elastic (1.24.0)\r\n    ----------------\r\n      Instance ID: elastic:e6126c6cf9b8eebe [ERROR]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/elastic.yaml\r\n      Total Runs: 121\r\n      Metric Samples: Last Run: 0, Total: 0\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 1, Total: 121\r\n      Average Execution Time : 13ms\r\n      Last Execution Date : 2021-09-10 06:00:16 UTC (1631253616000)\r\n      Last Successful Execution Date : Never\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 0\r\n        version.patch: 0\r\n        version.raw: 1.0.0\r\n        version.scheme: semver\r\n      Error: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n      Traceback (most recent call last):\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\", line 897, in run\r\n          self.check(instance)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 79, in check\r\n          stats_data = self._get_data(stats_url)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 232, in _get_data\r\n          resp.raise_for_status()\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\", line 940, in raise_for_status\r\n          raise HTTPError(http_error_msg, response=self)\r\n      requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nFedora 33 running agent inside systemd-nspawn container. Container is running Opensearch 1.0.0 and datadog agent has been configured to monitor it.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install and run Opensearch\r\n2. Configure datadog agent Elasticsearch integration to monitor it\r\n3. Observe that the Elasticsearch check is failing\r\n\r\n**Describe the results you received:**\r\n\r\nThe Elasticsearch check fails in the following way:\r\n```text\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:261 in work) | check:elastic | Running check\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/check.go:81 in runCheck) | Running python check elastic elastic:878a21a7a9cbcd49\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET / HTTP/1.1\" 200 349\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:247) | request to url http://localhost:9200 returned: <Response [200]>\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:147) | Elasticsearch version is [1, 0, 0]\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET /_nodes/_local/stats?all=true HTTP/1.1\" 400 155\r\n2021-09-09 12:48:49 UTC | CORE | ERROR | (pkg/collector/runner/runner.go:292 in work) | Error running check elastic: [{\"message\": \"400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\\\", line 897, in run\\n    self.check(instance)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 79, in check\\n    stats_data = self._get_data(stats_url)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 232, in _get_data\\n    resp.raise_for_status()\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\\\", line 940, in raise_for_status\\n    raise HTTPError(http_error_msg, response=self)\\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\\n\"}]\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:327 in work) | check:elastic | Done running check\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nOpensearch 1.0.0 is fully compatible with Elasticsearch 7.10.2 and datadog agent should be able to monitor it in the same way as the Elasticsearch.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe issue seems to be that since Opensearch is reporting its version as `1.0.0` the Elasticsearch check interprets it as Elasticsearch `1.0.0` and for this reason adds `?all=true` to the URL when calling `/_nodes/_local/stats` API to collect the node stats. https://github.com/DataDog/integrations-core/blob/40d9ceb14c57c109e8f6371b1a4c677fa33e1669/elastic/datadog_checks/elastic/elastic.py#L215\r\n\r\nThe `?all=true` parameter has been depricated since Elasticsearch version `5.0.0` and results in HTTP 400 error when used with newer versions of Elasticsearch. All is working well when Elasticsearch check is monitoring Opensearch if `?all=true` has been left out when making requests to `/_nodes/_local/stats`.\r\n\r\nThe version information returned from Opensearch contains field called `distribution` which has value `opensearch` that could be used to detect that the check is actually running against an Opensearch server. Example here:\r\n```text\r\n{'name': 'os-355e47a7-1', 'cluster_name': 'fc7a706a-9c51-40a1-9e1b-953d1546caa0', 'cluster_uuid': 'HrCNW5uhSZKtHxlJQz444g', 'version': {'distribution': 'opensearch', 'number': '1.0.0', 'build_type': 'unknown', 'build_hash': 'unknown', 'build_date': '2021-08-13T12:38:05.881264Z', 'build_snapshot': False, 'lucene_version': '8.8.2', 'minimum_wire_compatibility_version': '6.8.0', 'minimum_index_compatibility_version': '6.0.0-beta1'}, 'tagline': 'The OpenSearch Project: https://opensearch.org/'}\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nnginx/tests/utils.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nimport json\nimport os\nimport re\n\nimport mock\n\nfrom datadog_checks.dev.utils import read_file\n\nfrom .common import FIXTURES_PATH\n\n\ndef mocked_perform_request(*args, **kwargs):\n    \"\"\"\n    A mocked version of _perform_request\n    \"\"\"\n    response = mock.MagicMock()\n    url = args[0]\n\n    if re.search('/[23]/nginx', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_nginx.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/processes', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_processes.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/connections', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_connections.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/ssl', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_ssl.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/slabs', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_slabs.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/requests', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_requests.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/server_zones', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_server_zones.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/caches', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_caches.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/upstreams', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_upstreams.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/stream/upstreams', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_upstreams.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/stream/server_zones', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_server_zones.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif '/3/stream/zone_sync' in url:\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_zone_sync.json'))\n        response.json.return_value = json.loads(file_contents)\n    else:\n        response.json.return_value = ''\n\n    return response\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nhivemq/tox.ini\n## context:\n[tox]\nminversion = 2.0\nskip_missing_interpreters = true\nbasepython = py38\nenvlist =\n    py38-{4.3}\n\n[testenv]\nensure_default_envdir = true\nenvdir =\n    py38: {toxworkdir}/py38\ndescription =\n    py38: e2e ready\ndd_check_style = true\nusedevelop = true\nplatform = linux|darwin|win32\ndeps =\n    -e../datadog_checks_base[deps]\n    -rrequirements-dev.txt\ncommands =\n    pip install -r requirements.in\n    pytest -v {posargs}\nsetenv =\n    4.3: HIVEMQ_VERSION=4.3.2\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nElasticsearch check fails when used with Opensearch\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\n    elastic (1.24.0)\r\n    ----------------\r\n      Instance ID: elastic:e6126c6cf9b8eebe [ERROR]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/elastic.yaml\r\n      Total Runs: 121\r\n      Metric Samples: Last Run: 0, Total: 0\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 1, Total: 121\r\n      Average Execution Time : 13ms\r\n      Last Execution Date : 2021-09-10 06:00:16 UTC (1631253616000)\r\n      Last Successful Execution Date : Never\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 0\r\n        version.patch: 0\r\n        version.raw: 1.0.0\r\n        version.scheme: semver\r\n      Error: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n      Traceback (most recent call last):\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\", line 897, in run\r\n          self.check(instance)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 79, in check\r\n          stats_data = self._get_data(stats_url)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 232, in _get_data\r\n          resp.raise_for_status()\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\", line 940, in raise_for_status\r\n          raise HTTPError(http_error_msg, response=self)\r\n      requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nFedora 33 running agent inside systemd-nspawn container. Container is running Opensearch 1.0.0 and datadog agent has been configured to monitor it.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install and run Opensearch\r\n2. Configure datadog agent Elasticsearch integration to monitor it\r\n3. Observe that the Elasticsearch check is failing\r\n\r\n**Describe the results you received:**\r\n\r\nThe Elasticsearch check fails in the following way:\r\n```text\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:261 in work) | check:elastic | Running check\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/check.go:81 in runCheck) | Running python check elastic elastic:878a21a7a9cbcd49\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET / HTTP/1.1\" 200 349\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:247) | request to url http://localhost:9200 returned: <Response [200]>\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:147) | Elasticsearch version is [1, 0, 0]\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET /_nodes/_local/stats?all=true HTTP/1.1\" 400 155\r\n2021-09-09 12:48:49 UTC | CORE | ERROR | (pkg/collector/runner/runner.go:292 in work) | Error running check elastic: [{\"message\": \"400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\\\", line 897, in run\\n    self.check(instance)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 79, in check\\n    stats_data = self._get_data(stats_url)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 232, in _get_data\\n    resp.raise_for_status()\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\\\", line 940, in raise_for_status\\n    raise HTTPError(http_error_msg, response=self)\\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\\n\"}]\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:327 in work) | check:elastic | Done running check\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nOpensearch 1.0.0 is fully compatible with Elasticsearch 7.10.2 and datadog agent should be able to monitor it in the same way as the Elasticsearch.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe issue seems to be that since Opensearch is reporting its version as `1.0.0` the Elasticsearch check interprets it as Elasticsearch `1.0.0` and for this reason adds `?all=true` to the URL when calling `/_nodes/_local/stats` API to collect the node stats. https://github.com/DataDog/integrations-core/blob/40d9ceb14c57c109e8f6371b1a4c677fa33e1669/elastic/datadog_checks/elastic/elastic.py#L215\r\n\r\nThe `?all=true` parameter has been depricated since Elasticsearch version `5.0.0` and results in HTTP 400 error when used with newer versions of Elasticsearch. All is working well when Elasticsearch check is monitoring Opensearch if `?all=true` has been left out when making requests to `/_nodes/_local/stats`.\r\n\r\nThe version information returned from Opensearch contains field called `distribution` which has value `opensearch` that could be used to detect that the check is actually running against an Opensearch server. Example here:\r\n```text\r\n{'name': 'os-355e47a7-1', 'cluster_name': 'fc7a706a-9c51-40a1-9e1b-953d1546caa0', 'cluster_uuid': 'HrCNW5uhSZKtHxlJQz444g', 'version': {'distribution': 'opensearch', 'number': '1.0.0', 'build_type': 'unknown', 'build_hash': 'unknown', 'build_date': '2021-08-13T12:38:05.881264Z', 'build_snapshot': False, 'lucene_version': '8.8.2', 'minimum_wire_compatibility_version': '6.8.0', 'minimum_index_compatibility_version': '6.0.0-beta1'}, 'tagline': 'The OpenSearch Project: https://opensearch.org/'}\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nnginx/tests/utils.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nimport json\nimport os\nimport re\n\nimport mock\n\nfrom datadog_checks.dev.utils import read_file\n\nfrom .common import FIXTURES_PATH\n\n\ndef mocked_perform_request(*args, **kwargs):\n    \"\"\"\n    A mocked version of _perform_request\n    \"\"\"\n    response = mock.MagicMock()\n    url = args[0]\n\n    if re.search('/[23]/nginx', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_nginx.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/processes', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_processes.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/connections', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_connections.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/ssl', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_ssl.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/slabs', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_slabs.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/requests', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_requests.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/server_zones', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_server_zones.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/caches', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_caches.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/http/upstreams', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_http_upstreams.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/stream/upstreams', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_upstreams.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif re.search('/[23]/stream/server_zones', url):\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_server_zones.json'))\n        response.json.return_value = json.loads(file_contents)\n    elif '/3/stream/zone_sync' in url:\n        file_contents = read_file(os.path.join(FIXTURES_PATH, 'plus_api_stream_zone_sync.json'))\n        response.json.return_value = json.loads(file_contents)\n    else:\n        response.json.return_value = ''\n\n    return response\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmarklogic/tests/fixtures/cluster-query.yaml\n## context:\ncluster-query:\n  meta:\n    uri: \"/manage/v2?view=query\"\n    current-time: '2020-07-20T12:13:03.265454Z'\n    elapsed-time:\n      units: sec\n      value: 0.014009\n  query-properties:\n    result-count: '28'\n  relations:\n    relation-group:\n    - typeref: clusters\n      relation-count:\n        units: quantity\n        value: 1\n      relation:\n      - uriref: \"/manage/v2/clusters/test-cluster\"\n        roleref: 'foreign'\n        idref: '123255818103205892753'\n        nameref: test-cluster\n    - typeref: databases\n      relation-count:\n        units: quantity\n        value: 10\n      relation:\n      - uriref: \"/manage/v2/databases/App-Services\"\n        idref: '255818103205892753'\n        nameref: App-Services\n      - uriref: \"/manage/v2/databases/Documents\"\n        idref: '5004266825873163057'\n        nameref: Documents\n      - uriref: \"/manage/v2/databases/Extensions\"\n        idref: '16851068239719039698'\n        nameref: Extensions\n      - uriref: \"/manage/v2/databases/Fab\"\n        idref: '8856275086743994731'\n        nameref: Fab\n      - uriref: \"/manage/v2/databases/Last-Login\"\n        idref: '6816197642999717526'\n        nameref: Last-Login\n      - uriref: \"/manage/v2/databases/Meters\"\n        idref: '12682928374639417132'\n        nameref: Meters\n      - uriref: \"/manage/v2/databases/Modules\"\n        idref: '6503289002923531207'\n        nameref: Modules\n      - uriref: \"/manage/v2/databases/Schemas\"\n        idref: '1666078100697577708'\n        nameref: Schemas\n      - uriref: \"/manage/v2/databases/Security\"\n        idref: '8685886462920786200'\n        nameref: Security\n      - uriref: \"/manage/v2/databases/Triggers\"\n        idref: '2554043170273433710'\n        nameref: Triggers\n    - typeref: forests\n      relation-count:\n        units: quantity\n        value: 10\n      relation:\n      - uriref: \"/manage/v2/forests/Documents\"\n        idref: '5198739379836946612'\n        nameref: Documents\n      - uriref: \"/manage/v2/forests/App-Services\"\n        idref: '13366707925516962600'\n        nameref: App-Services\n      - uriref: \"/manage/v2/forests/Modules\"\n        idref: '16024526243775340149'\n        nameref: Modules\n      - uriref: \"/manage/v2/forests/Fab\"\n        idref: '6362535838618150355'\n        nameref: Fab\n      - uriref: \"/manage/v2/forests/Extensions\"\n        idref: '17254568917360711355'\n        nameref: Extensions\n      - uriref: \"/manage/v2/forests/Security\"\n        idref: '1112331563215633422'\n        nameref: Security\n      - uriref: \"/manage/v2/forests/Schemas\"\n        idref: '5750304059804042419'\n        nameref: Schemas\n      - uriref: \"/manage/v2/forests/Triggers\"\n        idref: '13651426856376247219'\n        nameref: Triggers\n      - uriref: \"/manage/v2/forests/Last-Login\"\n        idref: '4160063021749064859'\n        nameref: Last-Login\n      - uriref: \"/manage/v2/forests/Meters\"\n        idref: '9374918776994601400'\n        nameref: Meters\n    - typeref: groups\n      relation-count:\n        units: quantity\n        value: 1\n      relation:\n      - uriref: \"/manage/v2/groups/Default\"\n        idref: '4940646765162118604'\n        nameref: Default\n    - typeref: hosts\n      relation-count:\n        units: quantity\n        value: 2\n      relation:\n      - uriref: \"/manage/v2/hosts/9aea032c882e\"\n        idref: '17797492400840985949'\n        nameref: 9aea032c882e\n      - uriref: \"/manage/v2/hosts/ff0fef449486\"\n        idref: '3428441913043145991'\n        nameref: ff0fef449486\n    - typeref: servers\n      relation-count:\n        units: quantity\n        value: 4\n      relation:\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/Admin?group-id=Default\"\n        idref: '9403936238896063877'\n        nameref: Admin\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/App-Services?group-id=Default\"\n        idref: '11308174715442220527'\n        nameref: App-Services\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/HealthCheck?group-id=Default\"\n        idref: '6175005334572251784'\n        nameref: HealthCheck\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/Manage?group-id=Default\"\n        idref: '2238518805167662531'\n        nameref: Manage\n  related-views:\n    related-view:\n    - view-type: root\n      view-name: default\n      view-uri: \"/manage/v2\"\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nElasticsearch check fails when used with Opensearch\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\n    elastic (1.24.0)\r\n    ----------------\r\n      Instance ID: elastic:e6126c6cf9b8eebe [ERROR]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/elastic.yaml\r\n      Total Runs: 121\r\n      Metric Samples: Last Run: 0, Total: 0\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 1, Total: 121\r\n      Average Execution Time : 13ms\r\n      Last Execution Date : 2021-09-10 06:00:16 UTC (1631253616000)\r\n      Last Successful Execution Date : Never\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 0\r\n        version.patch: 0\r\n        version.raw: 1.0.0\r\n        version.scheme: semver\r\n      Error: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n      Traceback (most recent call last):\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\", line 897, in run\r\n          self.check(instance)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 79, in check\r\n          stats_data = self._get_data(stats_url)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 232, in _get_data\r\n          resp.raise_for_status()\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\", line 940, in raise_for_status\r\n          raise HTTPError(http_error_msg, response=self)\r\n      requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nFedora 33 running agent inside systemd-nspawn container. Container is running Opensearch 1.0.0 and datadog agent has been configured to monitor it.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install and run Opensearch\r\n2. Configure datadog agent Elasticsearch integration to monitor it\r\n3. Observe that the Elasticsearch check is failing\r\n\r\n**Describe the results you received:**\r\n\r\nThe Elasticsearch check fails in the following way:\r\n```text\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:261 in work) | check:elastic | Running check\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/check.go:81 in runCheck) | Running python check elastic elastic:878a21a7a9cbcd49\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET / HTTP/1.1\" 200 349\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:247) | request to url http://localhost:9200 returned: <Response [200]>\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:147) | Elasticsearch version is [1, 0, 0]\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET /_nodes/_local/stats?all=true HTTP/1.1\" 400 155\r\n2021-09-09 12:48:49 UTC | CORE | ERROR | (pkg/collector/runner/runner.go:292 in work) | Error running check elastic: [{\"message\": \"400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\\\", line 897, in run\\n    self.check(instance)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 79, in check\\n    stats_data = self._get_data(stats_url)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 232, in _get_data\\n    resp.raise_for_status()\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\\\", line 940, in raise_for_status\\n    raise HTTPError(http_error_msg, response=self)\\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\\n\"}]\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:327 in work) | check:elastic | Done running check\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nOpensearch 1.0.0 is fully compatible with Elasticsearch 7.10.2 and datadog agent should be able to monitor it in the same way as the Elasticsearch.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe issue seems to be that since Opensearch is reporting its version as `1.0.0` the Elasticsearch check interprets it as Elasticsearch `1.0.0` and for this reason adds `?all=true` to the URL when calling `/_nodes/_local/stats` API to collect the node stats. https://github.com/DataDog/integrations-core/blob/40d9ceb14c57c109e8f6371b1a4c677fa33e1669/elastic/datadog_checks/elastic/elastic.py#L215\r\n\r\nThe `?all=true` parameter has been depricated since Elasticsearch version `5.0.0` and results in HTTP 400 error when used with newer versions of Elasticsearch. All is working well when Elasticsearch check is monitoring Opensearch if `?all=true` has been left out when making requests to `/_nodes/_local/stats`.\r\n\r\nThe version information returned from Opensearch contains field called `distribution` which has value `opensearch` that could be used to detect that the check is actually running against an Opensearch server. Example here:\r\n```text\r\n{'name': 'os-355e47a7-1', 'cluster_name': 'fc7a706a-9c51-40a1-9e1b-953d1546caa0', 'cluster_uuid': 'HrCNW5uhSZKtHxlJQz444g', 'version': {'distribution': 'opensearch', 'number': '1.0.0', 'build_type': 'unknown', 'build_hash': 'unknown', 'build_date': '2021-08-13T12:38:05.881264Z', 'build_snapshot': False, 'lucene_version': '8.8.2', 'minimum_wire_compatibility_version': '6.8.0', 'minimum_index_compatibility_version': '6.0.0-beta1'}, 'tagline': 'The OpenSearch Project: https://opensearch.org/'}\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nyarn/datadog_checks/yarn/config_models/validators.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmarklogic/tests/fixtures/cluster-query.yaml\n## context:\ncluster-query:\n  meta:\n    uri: \"/manage/v2?view=query\"\n    current-time: '2020-07-20T12:13:03.265454Z'\n    elapsed-time:\n      units: sec\n      value: 0.014009\n  query-properties:\n    result-count: '28'\n  relations:\n    relation-group:\n    - typeref: clusters\n      relation-count:\n        units: quantity\n        value: 1\n      relation:\n      - uriref: \"/manage/v2/clusters/test-cluster\"\n        roleref: 'foreign'\n        idref: '123255818103205892753'\n        nameref: test-cluster\n    - typeref: databases\n      relation-count:\n        units: quantity\n        value: 10\n      relation:\n      - uriref: \"/manage/v2/databases/App-Services\"\n        idref: '255818103205892753'\n        nameref: App-Services\n      - uriref: \"/manage/v2/databases/Documents\"\n        idref: '5004266825873163057'\n        nameref: Documents\n      - uriref: \"/manage/v2/databases/Extensions\"\n        idref: '16851068239719039698'\n        nameref: Extensions\n      - uriref: \"/manage/v2/databases/Fab\"\n        idref: '8856275086743994731'\n        nameref: Fab\n      - uriref: \"/manage/v2/databases/Last-Login\"\n        idref: '6816197642999717526'\n        nameref: Last-Login\n      - uriref: \"/manage/v2/databases/Meters\"\n        idref: '12682928374639417132'\n        nameref: Meters\n      - uriref: \"/manage/v2/databases/Modules\"\n        idref: '6503289002923531207'\n        nameref: Modules\n      - uriref: \"/manage/v2/databases/Schemas\"\n        idref: '1666078100697577708'\n        nameref: Schemas\n      - uriref: \"/manage/v2/databases/Security\"\n        idref: '8685886462920786200'\n        nameref: Security\n      - uriref: \"/manage/v2/databases/Triggers\"\n        idref: '2554043170273433710'\n        nameref: Triggers\n    - typeref: forests\n      relation-count:\n        units: quantity\n        value: 10\n      relation:\n      - uriref: \"/manage/v2/forests/Documents\"\n        idref: '5198739379836946612'\n        nameref: Documents\n      - uriref: \"/manage/v2/forests/App-Services\"\n        idref: '13366707925516962600'\n        nameref: App-Services\n      - uriref: \"/manage/v2/forests/Modules\"\n        idref: '16024526243775340149'\n        nameref: Modules\n      - uriref: \"/manage/v2/forests/Fab\"\n        idref: '6362535838618150355'\n        nameref: Fab\n      - uriref: \"/manage/v2/forests/Extensions\"\n        idref: '17254568917360711355'\n        nameref: Extensions\n      - uriref: \"/manage/v2/forests/Security\"\n        idref: '1112331563215633422'\n        nameref: Security\n      - uriref: \"/manage/v2/forests/Schemas\"\n        idref: '5750304059804042419'\n        nameref: Schemas\n      - uriref: \"/manage/v2/forests/Triggers\"\n        idref: '13651426856376247219'\n        nameref: Triggers\n      - uriref: \"/manage/v2/forests/Last-Login\"\n        idref: '4160063021749064859'\n        nameref: Last-Login\n      - uriref: \"/manage/v2/forests/Meters\"\n        idref: '9374918776994601400'\n        nameref: Meters\n    - typeref: groups\n      relation-count:\n        units: quantity\n        value: 1\n      relation:\n      - uriref: \"/manage/v2/groups/Default\"\n        idref: '4940646765162118604'\n        nameref: Default\n    - typeref: hosts\n      relation-count:\n        units: quantity\n        value: 2\n      relation:\n      - uriref: \"/manage/v2/hosts/9aea032c882e\"\n        idref: '17797492400840985949'\n        nameref: 9aea032c882e\n      - uriref: \"/manage/v2/hosts/ff0fef449486\"\n        idref: '3428441913043145991'\n        nameref: ff0fef449486\n    - typeref: servers\n      relation-count:\n        units: quantity\n        value: 4\n      relation:\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/Admin?group-id=Default\"\n        idref: '9403936238896063877'\n        nameref: Admin\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/App-Services?group-id=Default\"\n        idref: '11308174715442220527'\n        nameref: App-Services\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/HealthCheck?group-id=Default\"\n        idref: '6175005334572251784'\n        nameref: HealthCheck\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/Manage?group-id=Default\"\n        idref: '2238518805167662531'\n        nameref: Manage\n  related-views:\n    related-view:\n    - view-type: root\n      view-name: default\n      view-uri: \"/manage/v2\"\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nElasticsearch check fails when used with Opensearch\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\n    elastic (1.24.0)\r\n    ----------------\r\n      Instance ID: elastic:e6126c6cf9b8eebe [ERROR]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/elastic.yaml\r\n      Total Runs: 121\r\n      Metric Samples: Last Run: 0, Total: 0\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 1, Total: 121\r\n      Average Execution Time : 13ms\r\n      Last Execution Date : 2021-09-10 06:00:16 UTC (1631253616000)\r\n      Last Successful Execution Date : Never\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 0\r\n        version.patch: 0\r\n        version.raw: 1.0.0\r\n        version.scheme: semver\r\n      Error: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n      Traceback (most recent call last):\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\", line 897, in run\r\n          self.check(instance)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 79, in check\r\n          stats_data = self._get_data(stats_url)\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\", line 232, in _get_data\r\n          resp.raise_for_status()\r\n        File \"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\", line 940, in raise_for_status\r\n          raise HTTPError(http_error_msg, response=self)\r\n      requests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\r\n\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nFedora 33 running agent inside systemd-nspawn container. Container is running Opensearch 1.0.0 and datadog agent has been configured to monitor it.\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install and run Opensearch\r\n2. Configure datadog agent Elasticsearch integration to monitor it\r\n3. Observe that the Elasticsearch check is failing\r\n\r\n**Describe the results you received:**\r\n\r\nThe Elasticsearch check fails in the following way:\r\n```text\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:261 in work) | check:elastic | Running check\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/check.go:81 in runCheck) | Running python check elastic elastic:878a21a7a9cbcd49\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET / HTTP/1.1\" 200 349\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:247) | request to url http://localhost:9200 returned: <Response [200]>\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | elastic:878a21a7a9cbcd49 | (elastic.py:147) | Elasticsearch version is [1, 0, 0]\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:226) | Starting new HTTP connection (1): localhost:9200\r\n2021-09-09 12:48:49 UTC | CORE | DEBUG | (pkg/collector/python/datadog_agent.go:126 in LogMessage) | - | (connectionpool.py:433) | http://localhost:9200 \"GET /_nodes/_local/stats?all=true HTTP/1.1\" 400 155\r\n2021-09-09 12:48:49 UTC | CORE | ERROR | (pkg/collector/runner/runner.go:292 in work) | Error running check elastic: [{\"message\": \"400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\", \"traceback\": \"Traceback (most recent call last):\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/base/checks/base.py\\\", line 897, in run\\n    self.check(instance)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 79, in check\\n    stats_data = self._get_data(stats_url)\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/datadog_checks/elastic/elastic.py\\\", line 232, in _get_data\\n    resp.raise_for_status()\\n  File \\\"/opt/datadog-agent/embedded/lib/python3.8/site-packages/requests/models.py\\\", line 940, in raise_for_status\\n    raise HTTPError(http_error_msg, response=self)\\nrequests.exceptions.HTTPError: 400 Client Error: Bad Request for url: http://localhost:9200/_nodes/_local/stats?all=true\\n\"}]\r\n2021-09-09 12:48:49 UTC | CORE | INFO | (pkg/collector/runner/runner.go:327 in work) | check:elastic | Done running check\r\n```\r\n\r\n**Describe the results you expected:**\r\n\r\nOpensearch 1.0.0 is fully compatible with Elasticsearch 7.10.2 and datadog agent should be able to monitor it in the same way as the Elasticsearch.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe issue seems to be that since Opensearch is reporting its version as `1.0.0` the Elasticsearch check interprets it as Elasticsearch `1.0.0` and for this reason adds `?all=true` to the URL when calling `/_nodes/_local/stats` API to collect the node stats. https://github.com/DataDog/integrations-core/blob/40d9ceb14c57c109e8f6371b1a4c677fa33e1669/elastic/datadog_checks/elastic/elastic.py#L215\r\n\r\nThe `?all=true` parameter has been depricated since Elasticsearch version `5.0.0` and results in HTTP 400 error when used with newer versions of Elasticsearch. All is working well when Elasticsearch check is monitoring Opensearch if `?all=true` has been left out when making requests to `/_nodes/_local/stats`.\r\n\r\nThe version information returned from Opensearch contains field called `distribution` which has value `opensearch` that could be used to detect that the check is actually running against an Opensearch server. Example here:\r\n```text\r\n{'name': 'os-355e47a7-1', 'cluster_name': 'fc7a706a-9c51-40a1-9e1b-953d1546caa0', 'cluster_uuid': 'HrCNW5uhSZKtHxlJQz444g', 'version': {'distribution': 'opensearch', 'number': '1.0.0', 'build_type': 'unknown', 'build_hash': 'unknown', 'build_date': '2021-08-13T12:38:05.881264Z', 'build_snapshot': False, 'lucene_version': '8.8.2', 'minimum_wire_compatibility_version': '6.8.0', 'minimum_index_compatibility_version': '6.0.0-beta1'}, 'tagline': 'The OpenSearch Project: https://opensearch.org/'}\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ntcp_check/tests/common.py\n## context:\n# (C) Datadog, Inc. 2019-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nfrom datadog_checks.dev.docker import using_windows_containers\nfrom datadog_checks.tcp_check import TCPCheck\n\nCHECK_NAME = \"tcp_check\"\n\nINSTANCE = {'host': 'datadoghq.com', 'port': 80, 'timeout': 1.5, 'name': 'UpService', 'tags': [\"foo:bar\"]}\n\nINSTANCE_KO = {'host': '127.0.0.1', 'port': 65530, 'timeout': 1.5, 'name': 'DownService', 'tags': [\"foo:bar\"]}\n\nE2E_METADATA = {'docker_platform': 'windows' if using_windows_containers() else 'linux'}\n\n\ndef _test_check(aggregator):\n    expected_tags = ['foo:bar', 'target_host:datadoghq.com', 'port:80', 'instance:UpService']\n    aggregator.assert_metric('network.tcp.can_connect', value=1, tags=expected_tags)\n    aggregator.assert_service_check('tcp.can_connect', status=TCPCheck.OK, tags=expected_tags)\n    aggregator.assert_all_metrics_covered()\n    assert len(aggregator.service_checks('tcp.can_connect')) == 1\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmarklogic/tests/fixtures/cluster-query.yaml\n## context:\ncluster-query:\n  meta:\n    uri: \"/manage/v2?view=query\"\n    current-time: '2020-07-20T12:13:03.265454Z'\n    elapsed-time:\n      units: sec\n      value: 0.014009\n  query-properties:\n    result-count: '28'\n  relations:\n    relation-group:\n    - typeref: clusters\n      relation-count:\n        units: quantity\n        value: 1\n      relation:\n      - uriref: \"/manage/v2/clusters/test-cluster\"\n        roleref: 'foreign'\n        idref: '123255818103205892753'\n        nameref: test-cluster\n    - typeref: databases\n      relation-count:\n        units: quantity\n        value: 10\n      relation:\n      - uriref: \"/manage/v2/databases/App-Services\"\n        idref: '255818103205892753'\n        nameref: App-Services\n      - uriref: \"/manage/v2/databases/Documents\"\n        idref: '5004266825873163057'\n        nameref: Documents\n      - uriref: \"/manage/v2/databases/Extensions\"\n        idref: '16851068239719039698'\n        nameref: Extensions\n      - uriref: \"/manage/v2/databases/Fab\"\n        idref: '8856275086743994731'\n        nameref: Fab\n      - uriref: \"/manage/v2/databases/Last-Login\"\n        idref: '6816197642999717526'\n        nameref: Last-Login\n      - uriref: \"/manage/v2/databases/Meters\"\n        idref: '12682928374639417132'\n        nameref: Meters\n      - uriref: \"/manage/v2/databases/Modules\"\n        idref: '6503289002923531207'\n        nameref: Modules\n      - uriref: \"/manage/v2/databases/Schemas\"\n        idref: '1666078100697577708'\n        nameref: Schemas\n      - uriref: \"/manage/v2/databases/Security\"\n        idref: '8685886462920786200'\n        nameref: Security\n      - uriref: \"/manage/v2/databases/Triggers\"\n        idref: '2554043170273433710'\n        nameref: Triggers\n    - typeref: forests\n      relation-count:\n        units: quantity\n        value: 10\n      relation:\n      - uriref: \"/manage/v2/forests/Documents\"\n        idref: '5198739379836946612'\n        nameref: Documents\n      - uriref: \"/manage/v2/forests/App-Services\"\n        idref: '13366707925516962600'\n        nameref: App-Services\n      - uriref: \"/manage/v2/forests/Modules\"\n        idref: '16024526243775340149'\n        nameref: Modules\n      - uriref: \"/manage/v2/forests/Fab\"\n        idref: '6362535838618150355'\n        nameref: Fab\n      - uriref: \"/manage/v2/forests/Extensions\"\n        idref: '17254568917360711355'\n        nameref: Extensions\n      - uriref: \"/manage/v2/forests/Security\"\n        idref: '1112331563215633422'\n        nameref: Security\n      - uriref: \"/manage/v2/forests/Schemas\"\n        idref: '5750304059804042419'\n        nameref: Schemas\n      - uriref: \"/manage/v2/forests/Triggers\"\n        idref: '13651426856376247219'\n        nameref: Triggers\n      - uriref: \"/manage/v2/forests/Last-Login\"\n        idref: '4160063021749064859'\n        nameref: Last-Login\n      - uriref: \"/manage/v2/forests/Meters\"\n        idref: '9374918776994601400'\n        nameref: Meters\n    - typeref: groups\n      relation-count:\n        units: quantity\n        value: 1\n      relation:\n      - uriref: \"/manage/v2/groups/Default\"\n        idref: '4940646765162118604'\n        nameref: Default\n    - typeref: hosts\n      relation-count:\n        units: quantity\n        value: 2\n      relation:\n      - uriref: \"/manage/v2/hosts/9aea032c882e\"\n        idref: '17797492400840985949'\n        nameref: 9aea032c882e\n      - uriref: \"/manage/v2/hosts/ff0fef449486\"\n        idref: '3428441913043145991'\n        nameref: ff0fef449486\n    - typeref: servers\n      relation-count:\n        units: quantity\n        value: 4\n      relation:\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/Admin?group-id=Default\"\n        idref: '9403936238896063877'\n        nameref: Admin\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/App-Services?group-id=Default\"\n        idref: '11308174715442220527'\n        nameref: App-Services\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/HealthCheck?group-id=Default\"\n        idref: '6175005334572251784'\n        nameref: HealthCheck\n      - qualifiers:\n          qualifier:\n          - uriref: \"/manage/v2/groups/Default\"\n            idref: '4940646765162118604'\n            nameref: Default\n        uriref: \"/manage/v2/servers/Manage?group-id=Default\"\n        idref: '2238518805167662531'\n        nameref: Manage\n  related-views:\n    related-view:\n    - view-type: root\n      view-name: default\n      view-uri: \"/manage/v2\"\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nnfsstat/datadog_checks/__init__.py\n## context:\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmapreduce/test/ci/fixtures/job_counter_metrics\n## context:\n{\n  \"jobCounters\": {\n    \"id\": \"job_1453738555560_0001\",\n    \"counterGroup\": [\n      {\n        \"counterGroupName\": \"org.apache.hadoop.mapreduce.FileSystemCounter\",\n        \"counter\": [\n          {\n            \"name\": \"FILE_BYTES_READ\",\n            \"totalCounterValue\": 0,\n            \"mapCounterValue\": 1,\n            \"reduceCounterValue\": 2\n          },\n          {\n            \"name\": \"FILE_BYTES_WRITTEN\",\n            \"totalCounterValue\": 3,\n            \"mapCounterValue\": 4,\n            \"reduceCounterValue\": 5\n          }\n        ]\n      },\n      {\n        \"counterGroupName\": \"org.apache.hadoop.mapreduce.TaskCounter\",\n        \"counter\": [\n          {\n            \"name\": \"MAP_INPUT_RECORDS\",\n            \"totalCounterValue\": 6,\n            \"mapCounterValue\": 7,\n            \"reduceCounterValue\": 8\n          },\n          {\n            \"name\": \"MAP_OUTPUT_RECORDS\",\n            \"totalCounterValue\": 9,\n            \"mapCounterValue\": 10,\n            \"reduceCounterValue\": 11\n          }\n        ]\n      }\n    ]\n  }\n}"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nriakcs/README.md\n## context:\n# RiakCS Check\n\n## Overview\n\nCapture RiakCS metrics in Datadog to:\n\n* Visualize key RiakCS metrics.\n* Correlate RiakCS performance with the rest of your applications.\n\n## Setup\n### Installation\n\nThe RiakCS check is packaged with the Agent, so simply [install the Agent](https://app.datadoghq.com/account/settings#agent) on your RiakCS nodes. If you need the newest version of the check, install the `dd-check-riakcs` package.\n\n### Configuration\n\nCreate a file `riakcs.yaml` in the Agent's `conf.d` directory. See the [sample riakcs.yaml](https://github.com/DataDog/integrations-core/blob/master/riakcs/conf.yaml.example) for all available configuration options:\n\n```\ninit_config:\n\ninstances:\n  - host: localhost \n    port: 8080 \n    access_id: <YOUR_ACCESS_KEY>\n    access_secret: <YOUR_ACCESS_SECRET>\n#   is_secure: true # set to false if your endpoint doesn't use SSL\n#   s3_root: s3.amazonaws.com # \n```\n\n[Restart the Agent](https://docs.datadoghq.com/agent/faq/start-stop-restart-the-datadog-agent) to start sending RiakCS metrics to Datadog.\n\n### Validation\n\n[Run the Agent's `info` subcommand](https://docs.datadoghq.com/agent/faq/agent-status-and-information/) and look for `riakcs` under the Checks section:\n\n```\n  Checks\n  ======\n    [...]\n\n    riakcs\n    -------\n      - instance #0 [OK]\n      - Collected 26 metrics, 0 events & 1 service check\n\n    [...]\n```\n\n## Compatibility\n\nThe riakcs check is compatible with all major platforms.\n\n## Data Collected\n### Metrics\n\nSee [metadata.csv](https://github.com/DataDog/integrations-core/blob/master/riakcs/metadata.csv) for a list of metrics provided by this check.\n\n### Events\nThe RiackCS check does not include any event at this time.\n\n### Service Checks\n\n**riakcs.can_connect**:\n\nReturns CRITICAL if the Agent cannot connect to the RiakCS endpoint to collect metrics, otherwise OK.\n\n## Troubleshooting\nNeed help? Contact [Datadog Support](http://docs.datadoghq.com/help/).\n\n## Further Reading\nTo get a better idea of how (or why) to monitor Riak CS performance and availability with Datadog, check out our [series of blog posts](https://www.datadoghq.com/blog/monitor-riak-cs-performance-and-availability/) about it.\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nspark/datadog_checks/__init__.py\n## context:\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nspark/datadog_checks/__init__.py\n## context:\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nhdfs_datanode/CHANGELOG.md\n## context:\n# CHANGELOG - hdfs_datanode\n\n1.1.0 / 2018-01-10\n==================\n\n### Changes\n\n* [FEATURE] adds configuration option to ignore SSL validation. See [#714][]\n\n1.0.0 / 2017-03-22\n==================\n\n### Changes\n\n* [FEATURE] adds hdfs_datanode integration.\n\n\n[#714]: https://github.com/DataDog/integrations-core/issues/714\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nspark/datadog_checks/__init__.py\n## context:\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nspark/test/ci/fixtures/spark_standalone_app\n## context:\n<!DOCTYPE html><html>\n<head>\n</head>\n<body>\n   <div class=\"container-fluid\">\n      <div class=\"row-fluid\">\n         <div class=\"span12\">\n            <ul class=\"unstyled\">\n               <li><strong><a href=\"http://localhost:4040\">Application Detail UI</a></strong></li>\n            </ul>\n         </div>\n      </div>\n   </div>\n</body>\n</html>"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsqlserver/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"sqlserver\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-sqlserver',\n    version=version,\n    description='The SqlServer check',\n    long_description=long_description,\n    keywords='datadog agent sqlserver check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.sqlserver'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.sqlserver': ['conf.yaml.example']},\n    include_package_data=True,\n\n    # The entrypoint to run the check manually without an agent\n    entry_points={\n        'console_scripts': [\n            'sqlserver=datadog_checks.sqlserver:main',\n        ],\n    },\n)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkyototycoon/auto_conf.yaml\n## context:\nad_identifiers:\n  - kyototycoon\n\ninit_config:\n\ninstances:\n  - report_url: http://%%host%%:%%port%%/rpc/report\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndns_check/datadog_checks/dns_check/dns_check.py\n## context:\n# (C) Datadog, Inc. 2010-2017\n# All rights reserved\n# Licensed under Simplified BSD License (see LICENSE)\n\n# stdlib\nimport time\n\n# 3p\nimport dns.resolver\n\n# project\nfrom utils.platform import Platform\nfrom checks.network_checks import NetworkCheck, Status\n\n# These imports are necessary because otherwise dynamic type\n# resolution will fail on windows without it.\n# See more here: https://github.com/rthalley/dnspython/issues/39.\nif Platform.is_win32():\n    from dns.rdtypes.ANY import *  # noqa\n    from dns.rdtypes.IN import *  # noqa\n    # for tiny time deltas, time.time on Windows reports the same value\n    # of the clock more than once, causing the computation of response_time\n    # to be often 0; let's use time.clock that is more precise.\n    time_func = time.clock\nelse:\n    time_func = time.time\n\n\nclass BadConfException(Exception):\n    pass\n\n\nclass DNSCheck(NetworkCheck):\n    SERVICE_CHECK_NAME = 'dns.can_resolve'\n    DEFAULT_TIMEOUT = 5\n\n    def __init__(self, name, init_config, agentConfig, instances):\n        # Now that the DNS check is a Network check, we must provide a `name` for each\n        # instance before calling NetworkCheck to make backwards compatible with old yaml.\n        for idx, inst in enumerate(instances):\n            try:\n                inst['name'] = inst['name']\n            except KeyError:\n                inst['name'] = 'dns-check-%s' % idx\n\n        NetworkCheck.__init__(self, name, init_config, agentConfig, instances)\n\n        self.default_timeout = init_config.get('default_timeout', self.DEFAULT_TIMEOUT)\n\n    def _load_conf(self, instance):\n        # Fetches the conf\n        hostname = instance.get('hostname')\n        if not hostname:\n            raise BadConfException('A valid \"hostname\" must be specified')\n\n        resolver = dns.resolver.Resolver()\n\n        # If a specific DNS server was defined use it, else use the system default\n        nameserver = instance.get('nameserver')\n        nameserver_port = instance.get('nameserver_port')\n        if nameserver is not None:\n            resolver.nameservers = [nameserver]\n        if nameserver_port is not None:\n            resolver.port = nameserver_port\n\n        timeout = float(instance.get('timeout', self.default_timeout))\n        resolver.lifetime = timeout\n        record_type = instance.get('record_type', 'A')\n\n        return hostname, timeout, nameserver, record_type, resolver\n\n    def _check(self, instance):\n        hostname, timeout, nameserver, record_type, resolver = self._load_conf(instance)\n\n        # Perform the DNS query, and report its duration as a gauge\n        response_time = 0\n        t0 = time_func()\n\n        try:\n            self.log.debug('Querying \"{0}\" record for hostname \"{1}\"...'.format(record_type, hostname))\n            if record_type == \"NXDOMAIN\":\n                try:\n                    resolver.query(hostname)\n                except dns.resolver.NXDOMAIN:\n                    pass\n                else:\n                    raise AssertionError(\"Expected an NXDOMAIN, got a result.\")\n            else:\n                answer = resolver.query(hostname, rdtype=record_type)\n                assert(answer.rrset.items[0].to_text())\n\n            response_time = time_func() - t0\n\n        except dns.exception.Timeout:\n            self.log.error('DNS resolution of {0} timed out'.format(hostname))\n            return Status.CRITICAL, 'DNS resolution of {0} timed out'.format(hostname)\n\n        except Exception:\n            self.log.exception('DNS resolution of {0} has failed.'.format(hostname))\n            return Status.CRITICAL, 'DNS resolution of {0} has failed'.format(hostname)\n\n        else:\n            tags = self._get_tags(instance)\n            if response_time > 0:\n                self.gauge('dns.response_time', response_time, tags=tags)\n            self.log.debug('Resolved hostname: {0}'.format(hostname))\n            return Status.UP, 'UP'\n\n    def _get_tags(self, instance):\n        hostname = instance.get('hostname')\n        instance_name = instance.get('name', hostname)\n        record_type = instance.get('record_type', 'A')\n        custom_tags = instance.get('tags', [])\n        tags = []\n\n        try:\n            nameserver = instance.get('nameserver') or dns.resolver.Resolver().nameservers[0]\n            tags.append('nameserver:{0}'.format(nameserver))\n        except IndexError:\n            self.log.error('No DNS server was found on this host.')\n\n        tags = custom_tags + ['nameserver:{0}'.format(nameserver),\n                              'resolved_hostname:{0}'.format(hostname),\n                              'instance:{0}'.format(instance_name),\n                              'record_type:{0}'.format(record_type)]\n        return tags\n\n    def report_as_service_check(self, sc_name, status, instance, msg=None):\n        tags = self._get_tags(instance)\n\n        instance['skip_event'] = True\n\n        if status == Status.UP:\n            msg = None\n\n        self.service_check(self.SERVICE_CHECK_NAME,\n                           NetworkCheck.STATUS_TO_SERVICE_CHECK[status],\n                           tags=tags,\n                           message=msg\n                           )\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nnfsstat/datadog_checks/__init__.py\n## context:\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndns_check/datadog_checks/dns_check/dns_check.py\n## context:\n# (C) Datadog, Inc. 2010-2017\n# All rights reserved\n# Licensed under Simplified BSD License (see LICENSE)\n\n# stdlib\nimport time\n\n# 3p\nimport dns.resolver\n\n# project\nfrom utils.platform import Platform\nfrom checks.network_checks import NetworkCheck, Status\n\n# These imports are necessary because otherwise dynamic type\n# resolution will fail on windows without it.\n# See more here: https://github.com/rthalley/dnspython/issues/39.\nif Platform.is_win32():\n    from dns.rdtypes.ANY import *  # noqa\n    from dns.rdtypes.IN import *  # noqa\n    # for tiny time deltas, time.time on Windows reports the same value\n    # of the clock more than once, causing the computation of response_time\n    # to be often 0; let's use time.clock that is more precise.\n    time_func = time.clock\nelse:\n    time_func = time.time\n\n\nclass BadConfException(Exception):\n    pass\n\n\nclass DNSCheck(NetworkCheck):\n    SERVICE_CHECK_NAME = 'dns.can_resolve'\n    DEFAULT_TIMEOUT = 5\n\n    def __init__(self, name, init_config, agentConfig, instances):\n        # Now that the DNS check is a Network check, we must provide a `name` for each\n        # instance before calling NetworkCheck to make backwards compatible with old yaml.\n        for idx, inst in enumerate(instances):\n            try:\n                inst['name'] = inst['name']\n            except KeyError:\n                inst['name'] = 'dns-check-%s' % idx\n\n        NetworkCheck.__init__(self, name, init_config, agentConfig, instances)\n\n        self.default_timeout = init_config.get('default_timeout', self.DEFAULT_TIMEOUT)\n\n    def _load_conf(self, instance):\n        # Fetches the conf\n        hostname = instance.get('hostname')\n        if not hostname:\n            raise BadConfException('A valid \"hostname\" must be specified')\n\n        resolver = dns.resolver.Resolver()\n\n        # If a specific DNS server was defined use it, else use the system default\n        nameserver = instance.get('nameserver')\n        nameserver_port = instance.get('nameserver_port')\n        if nameserver is not None:\n            resolver.nameservers = [nameserver]\n        if nameserver_port is not None:\n            resolver.port = nameserver_port\n\n        timeout = float(instance.get('timeout', self.default_timeout))\n        resolver.lifetime = timeout\n        record_type = instance.get('record_type', 'A')\n\n        return hostname, timeout, nameserver, record_type, resolver\n\n    def _check(self, instance):\n        hostname, timeout, nameserver, record_type, resolver = self._load_conf(instance)\n\n        # Perform the DNS query, and report its duration as a gauge\n        response_time = 0\n        t0 = time_func()\n\n        try:\n            self.log.debug('Querying \"{0}\" record for hostname \"{1}\"...'.format(record_type, hostname))\n            if record_type == \"NXDOMAIN\":\n                try:\n                    resolver.query(hostname)\n                except dns.resolver.NXDOMAIN:\n                    pass\n                else:\n                    raise AssertionError(\"Expected an NXDOMAIN, got a result.\")\n            else:\n                answer = resolver.query(hostname, rdtype=record_type)\n                assert(answer.rrset.items[0].to_text())\n\n            response_time = time_func() - t0\n\n        except dns.exception.Timeout:\n            self.log.error('DNS resolution of {0} timed out'.format(hostname))\n            return Status.CRITICAL, 'DNS resolution of {0} timed out'.format(hostname)\n\n        except Exception:\n            self.log.exception('DNS resolution of {0} has failed.'.format(hostname))\n            return Status.CRITICAL, 'DNS resolution of {0} has failed'.format(hostname)\n\n        else:\n            tags = self._get_tags(instance)\n            if response_time > 0:\n                self.gauge('dns.response_time', response_time, tags=tags)\n            self.log.debug('Resolved hostname: {0}'.format(hostname))\n            return Status.UP, 'UP'\n\n    def _get_tags(self, instance):\n        hostname = instance.get('hostname')\n        instance_name = instance.get('name', hostname)\n        record_type = instance.get('record_type', 'A')\n        custom_tags = instance.get('tags', [])\n        tags = []\n\n        try:\n            nameserver = instance.get('nameserver') or dns.resolver.Resolver().nameservers[0]\n            tags.append('nameserver:{0}'.format(nameserver))\n        except IndexError:\n            self.log.error('No DNS server was found on this host.')\n\n        tags = custom_tags + ['nameserver:{0}'.format(nameserver),\n                              'resolved_hostname:{0}'.format(hostname),\n                              'instance:{0}'.format(instance_name),\n                              'record_type:{0}'.format(record_type)]\n        return tags\n\n    def report_as_service_check(self, sc_name, status, instance, msg=None):\n        tags = self._get_tags(instance)\n\n        instance['skip_event'] = True\n\n        if status == Status.UP:\n            msg = None\n\n        self.service_check(self.SERVICE_CHECK_NAME,\n                           NetworkCheck.STATUS_TO_SERVICE_CHECK[status],\n                           tags=tags,\n                           message=msg\n                           )\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nhttp_check/CHANGELOG.md\n## context:\n# CHANGELOG - http_check\n\n1.3.0 / 2018-01-10\n==================\n\n### Changes\n\n* [FEATURE] Report http connect status as metrics. See #659.\n* [BUGFIX] User-defined \"url\" tag replaces default \"url\" tag. See[#301][]. (Thanks [@colinmollenhour][])\n* [FEATURE] Add configurable ssl server name for cert expiration check. See[#905][].\n\n1.2.0 / 2017-10-10\n==================\n\n### Changes\n\n* [FEATURE] Add support for client side certificate. See[#688][]. (Thanks [@xkrt][])\n* [IMPROVEMENT] Make tornado optional. See [#758][].\n\n1.1.2 / 2017-08-28\n==================\n\n### Changes\n\n* [IMPROVEMENT] Improved logging. See [#652][].\n\n1.1.1 / 2017-07-18\n==================\n\n### Changes\n\n* [BUGFIX] Fix response tuple arity in SSL certificate check. See[#461][].\n\n1.1.0 / 2017-06-05\n==================\n\n### Changes\n\n* [FEATURE] Add support for SOAP requests. See [#328][].\n* [FEATURE] Add gauge metric for ssl days left. See [#249][].\n\n1.0.0 / 2017-03-22\n==================\n\n### Changes\n\n* [FEATURE] adds http_check integration.\n\n<!--- The following link definition list is generated by PimpMyChangelog --->\n[#249]: https://github.com/DataDog/integrations-core/issues/249\n[#328]: https://github.com/DataDog/integrations-core/issues/328\n[#461]: https://github.com/DataDog/integrations-core/issues/461\n[#652]: https://github.com/DataDog/integrations-core/issues/652\n[#688]: https://github.com/DataDog/integrations-core/issues/688\n[#758]: https://github.com/DataDog/integrations-core/issues/758\n[@xkrt]: https://github.com/xkrt\n[#905]:https://github.com/DataDog/integrations-core/pull/905\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndns_check/datadog_checks/dns_check/dns_check.py\n## context:\n# (C) Datadog, Inc. 2010-2017\n# All rights reserved\n# Licensed under Simplified BSD License (see LICENSE)\n\n# stdlib\nimport time\n\n# 3p\nimport dns.resolver\n\n# project\nfrom utils.platform import Platform\nfrom checks.network_checks import NetworkCheck, Status\n\n# These imports are necessary because otherwise dynamic type\n# resolution will fail on windows without it.\n# See more here: https://github.com/rthalley/dnspython/issues/39.\nif Platform.is_win32():\n    from dns.rdtypes.ANY import *  # noqa\n    from dns.rdtypes.IN import *  # noqa\n    # for tiny time deltas, time.time on Windows reports the same value\n    # of the clock more than once, causing the computation of response_time\n    # to be often 0; let's use time.clock that is more precise.\n    time_func = time.clock\nelse:\n    time_func = time.time\n\n\nclass BadConfException(Exception):\n    pass\n\n\nclass DNSCheck(NetworkCheck):\n    SERVICE_CHECK_NAME = 'dns.can_resolve'\n    DEFAULT_TIMEOUT = 5\n\n    def __init__(self, name, init_config, agentConfig, instances):\n        # Now that the DNS check is a Network check, we must provide a `name` for each\n        # instance before calling NetworkCheck to make backwards compatible with old yaml.\n        for idx, inst in enumerate(instances):\n            try:\n                inst['name'] = inst['name']\n            except KeyError:\n                inst['name'] = 'dns-check-%s' % idx\n\n        NetworkCheck.__init__(self, name, init_config, agentConfig, instances)\n\n        self.default_timeout = init_config.get('default_timeout', self.DEFAULT_TIMEOUT)\n\n    def _load_conf(self, instance):\n        # Fetches the conf\n        hostname = instance.get('hostname')\n        if not hostname:\n            raise BadConfException('A valid \"hostname\" must be specified')\n\n        resolver = dns.resolver.Resolver()\n\n        # If a specific DNS server was defined use it, else use the system default\n        nameserver = instance.get('nameserver')\n        nameserver_port = instance.get('nameserver_port')\n        if nameserver is not None:\n            resolver.nameservers = [nameserver]\n        if nameserver_port is not None:\n            resolver.port = nameserver_port\n\n        timeout = float(instance.get('timeout', self.default_timeout))\n        resolver.lifetime = timeout\n        record_type = instance.get('record_type', 'A')\n\n        return hostname, timeout, nameserver, record_type, resolver\n\n    def _check(self, instance):\n        hostname, timeout, nameserver, record_type, resolver = self._load_conf(instance)\n\n        # Perform the DNS query, and report its duration as a gauge\n        response_time = 0\n        t0 = time_func()\n\n        try:\n            self.log.debug('Querying \"{0}\" record for hostname \"{1}\"...'.format(record_type, hostname))\n            if record_type == \"NXDOMAIN\":\n                try:\n                    resolver.query(hostname)\n                except dns.resolver.NXDOMAIN:\n                    pass\n                else:\n                    raise AssertionError(\"Expected an NXDOMAIN, got a result.\")\n            else:\n                answer = resolver.query(hostname, rdtype=record_type)\n                assert(answer.rrset.items[0].to_text())\n\n            response_time = time_func() - t0\n\n        except dns.exception.Timeout:\n            self.log.error('DNS resolution of {0} timed out'.format(hostname))\n            return Status.CRITICAL, 'DNS resolution of {0} timed out'.format(hostname)\n\n        except Exception:\n            self.log.exception('DNS resolution of {0} has failed.'.format(hostname))\n            return Status.CRITICAL, 'DNS resolution of {0} has failed'.format(hostname)\n\n        else:\n            tags = self._get_tags(instance)\n            if response_time > 0:\n                self.gauge('dns.response_time', response_time, tags=tags)\n            self.log.debug('Resolved hostname: {0}'.format(hostname))\n            return Status.UP, 'UP'\n\n    def _get_tags(self, instance):\n        hostname = instance.get('hostname')\n        instance_name = instance.get('name', hostname)\n        record_type = instance.get('record_type', 'A')\n        custom_tags = instance.get('tags', [])\n        tags = []\n\n        try:\n            nameserver = instance.get('nameserver') or dns.resolver.Resolver().nameservers[0]\n            tags.append('nameserver:{0}'.format(nameserver))\n        except IndexError:\n            self.log.error('No DNS server was found on this host.')\n\n        tags = custom_tags + ['nameserver:{0}'.format(nameserver),\n                              'resolved_hostname:{0}'.format(hostname),\n                              'instance:{0}'.format(instance_name),\n                              'record_type:{0}'.format(record_type)]\n        return tags\n\n    def report_as_service_check(self, sc_name, status, instance, msg=None):\n        tags = self._get_tags(instance)\n\n        instance['skip_event'] = True\n\n        if status == Status.UP:\n            msg = None\n\n        self.service_check(self.SERVICE_CHECK_NAME,\n                           NetworkCheck.STATUS_TO_SERVICE_CHECK[status],\n                           tags=tags,\n                           message=msg\n                           )\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsqlserver/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"sqlserver\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-sqlserver',\n    version=version,\n    description='The SqlServer check',\n    long_description=long_description,\n    keywords='datadog agent sqlserver check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.sqlserver'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.sqlserver': ['conf.yaml.example']},\n    include_package_data=True,\n\n    # The entrypoint to run the check manually without an agent\n    entry_points={\n        'console_scripts': [\n            'sqlserver=datadog_checks.sqlserver:main',\n        ],\n    },\n)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[nginx] NGINX Plus extended status API depreciated; Integration needs to use Plus API instead\nNGINX R13 was just released and it replaces the Extended Status API with the NGINX Plus API.\r\n\r\n[See Announcement](https://www.nginx.com/blog/nginx-plus-r13-released/)\r\n\r\nA future version of NGINX Plus will drop support for the Extended Status API. They are promising at least 6 months before they do so.\r\n\r\nThe Datadog integration for NGINX Plus depends on the Extended Status API (http status module).\r\n\r\nhttps://github.com/DataDog/integrations-core/tree/master/nginx\r\n\r\n### Extended Status API Deprecated\r\nThe previous on-the-fly reconfiguration and extended status APIs are now deprecated. The deprecated APIs will continue to be shipped with NGINX Plus for a minimum of 6 months, alongside the new NGINX Plus API. After this period, the old APIs will be removed in a subsequent release of NGINX Plus.\r\n\r\n### NGINX Plus API\r\nNGINX Plus R13 includes a new API that is unified under one single endpoint. Previous versions of NGINX Plus included separate upstream_conf and extended status APIs. The new API combines the functionality of both, and also includes a new Key-Value Store module which brings a variety of use cases for on-the-fly reconfiguration (discussed in the next section).\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nspark/datadog_checks/__init__.py\n## context:\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsqlserver/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"sqlserver\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-sqlserver',\n    version=version,\n    description='The SqlServer check',\n    long_description=long_description,\n    keywords='datadog agent sqlserver check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.sqlserver'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.sqlserver': ['conf.yaml.example']},\n    include_package_data=True,\n\n    # The entrypoint to run the check manually without an agent\n    entry_points={\n        'console_scripts': [\n            'sqlserver=datadog_checks.sqlserver:main',\n        ],\n    },\n)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nnginx/test/ci/testing.key\n## context:\n-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQD0RetB4kR66ojN\n1U82WuCUfUTZGI+HmkAuumslNhVlNsZFy5sHTCQQwQPxN1BMi5ki3noNYVzPr970\nvy+p7FH1XBry7S8f0viAni851J+Jo+HrppGgaGVFpbNqqZtKMY37TpqbQRagtWoJ\nLb72NDiW9r5q0JUUyQ56dfeeIGwohUjh64TBTuu1D7Q9QlWYSOjqSta6R0ESGjOk\nKrpmbYHmyoARjPyFZCkAzqEznzFgvjWVIYBXQKaHfuZcwx0g5wrUNjf+lSkJNLlN\nxKnEJx7rUwRmEAdt8mXAnMd6bkxJeDGgLPKZPv8iTTwZgi0AijRjTGDdWHDwl7mm\n8dajPh+FAgMBAAECggEAaq9q22CGRiTO0Q8bxIKWWWQIwMRwU2o0I/R5PUxMteLh\nX7RYJizEB6k1HpHo+TVzEX6XUea3EWIff0dM+uritMWgY37huQV8UThFKf3KG+Q+\nlJwwOB3ANVX0cV5YG2RfPWYMMkiQKGpzQEUBhSgzmwNzENW+dtCFCUkid6ZzdpI9\nUKqXhRj7c9FF5/24P9ERCkoIG0+L1SXynqduqCVnKy4UOgptsGryago4C9NA+RpF\nUnYb8bEgkO4mSrr9ozzLkM3lz8XZhk0AmkKCsKw/PWJ+EJ/Ydy4A8/lF9MYjiqEv\nAWip22O7WEvkQzhSg0ymGI8cSfwUdm7xqgvVWs4K9QKBgQD/oKA4TUYzFWzVWA7w\nEvs4V5ImuHyuO5nJRKwJainct5LJVab300sM2LwPHxiZvnyExcFCT5vwuY/JxfWO\nklShbP52GSB9oEFS58HaQg78YqAtuWnu1HtYbWFl4NZMLqLZV8PLWlbW+aMdl4FA\nLGzsxgDHndBwFhEbR2HwVTferwKBgQD0oQ6M4O4SkJYOff30cpulSq/dhzW80rYd\n03y/bLAfWjDONeVSuSh1iqMaQkntjeOmsmu7Rb+340kaTzkF3/dRbaTwQVkTOplY\nXPxRWnuFEl1k1gGJitHbmz7xCDzC5SehsFCCts2NIDOXFoCOa6zus6KdYR7/mxem\nvqzyGJTSCwKBgFJL+SkHH8GUdTxeJDkAM2bZMpFKtcE2KPWWKTjCuAV6CETPUXjZ\nyoCxSiIoJbhhjh8Et4pMrOycIQGZvMuQqrRpraaBwmcPb9hsConk2IRCkEUIO2WL\nfMZkOIYfE37lSMJmMf/G7sw5BF2jiBYL92lm+ZtKYG+lew5oNcy08s67AoGAcgxs\nVi2/kJQsAVGoBkEwY11wpF0XJpMuKLWioTQw4E0SF/F0mp6MSFB8Pg/Nm5zdF6hz\nJXodKcQjHsr0kNKb4TC3BvPQbXCScWnYkK0YjS/ErvA/AzrfH/0+2Oy4NzzSv0UO\nJALJzhPHOZdaFAwLMbY6CBlxdEWAP1MCGlRvfYUCgYEAl8iuq0NUrY3UCoUPSDnh\nC51hAH2dJ9n7kFwgOt6X3DeHQOWUb9U3LRcrJqtHoLP2QB1nMu86/BkevOo6A/Wj\nkr6GkcoxIw0Oec5k56ThQnyCAjQFiW8nRoyhbRR9nwK2gjOCsPHrceQoZjr3KbAl\naYMKjbhy0hJvt92vTqqD31c=\n-----END PRIVATE KEY-----\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmesos_slave/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"mesos_slave\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-mesos_slave',\n    version=version,\n    description='The Mesos slave check',\n    long_description=long_description,\n    keywords='datadog agent mesos_slave check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.mesos_slave'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.mesos_slave': ['conf.yaml.example']},\n    include_package_data=True,\n\n    # The entrypoint to run the check manually without an agent\n    entry_points={\n        'console_scripts': [\n            'mesos_slave=datadog_checks.mesos_slave:main',\n        ],\n    },\n)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ntcp_check/datadog_checks/tcp_check/tcp_check.py\n## context:\n# (C) Datadog, Inc. 2010-2017\n# All rights reserved\n# Licensed under Simplified BSD License (see LICENSE)\n\n# stdlib\nimport socket\nimport time\n\n# project\nfrom checks.network_checks import EventType, NetworkCheck, Status\n\n\nclass BadConfException(Exception):\n    pass\n\n\nclass TCPCheck(NetworkCheck):\n\n    SOURCE_TYPE_NAME = 'system'\n    SERVICE_CHECK_NAME = 'tcp.can_connect'\n\n    def _load_conf(self, instance):\n        # Fetches the conf\n\n        port = instance.get('port', None)\n        timeout = float(instance.get('timeout', 10))\n        response_time = instance.get('collect_response_time', False)\n        custom_tags = instance.get('tags', [])\n        socket_type = None\n        try:\n            port = int(port)\n        except Exception:\n            raise BadConfException(\"%s is not a correct port.\" % str(port))\n\n        try:\n            url = instance.get('host', None)\n            split = url.split(\":\")\n        except Exception:  # Would be raised if url is not a string\n            raise BadConfException(\"A valid url must be specified\")\n\n        # IPv6 address format: 2001:db8:85a3:8d3:1319:8a2e:370:7348\n        if len(split) == 8:  # It may then be a IP V6 address, we check that\n            for block in split:\n                if len(block) != 4:\n                    raise BadConfException(\"%s is not a correct IPv6 address.\" % url)\n\n            addr = url\n            # It's a correct IP V6 address\n            socket_type = socket.AF_INET6\n\n        if socket_type is None:\n            try:\n                addr = socket.gethostbyname(url)\n                socket_type = socket.AF_INET\n            except Exception:\n                raise BadConfException(\"URL: %s is not a correct IPv4, IPv6 or hostname\" % addr)\n\n        return addr, port, custom_tags, socket_type, timeout, response_time\n\n    def _check(self, instance):\n        addr, port, custom_tags, socket_type, timeout, response_time = self._load_conf(instance)\n        start = time.time()\n        try:\n            self.log.debug(\"Connecting to %s %s\" % (addr, port))\n            sock = socket.socket(socket_type)\n            try:\n                sock.settimeout(timeout)\n                sock.connect((addr, port))\n            finally:\n                sock.close()\n\n        except socket.timeout as e:\n            # The connection timed out because it took more time than the specified value in the yaml config file\n            length = int((time.time() - start) * 1000)\n            self.log.info(\"%s:%s is DOWN (%s). Connection failed after %s ms\" % (addr, port, str(e), length))\n            return Status.DOWN, \"%s. Connection failed after %s ms\" % (str(e), length)\n\n        except socket.error as e:\n            length = int((time.time() - start) * 1000)\n            if \"timed out\" in str(e):\n\n                # The connection timed out becase it took more time than the system tcp stack allows\n                self.log.warning(\"The connection timed out because it took more time than the system tcp stack allows. You might want to change this setting to allow longer timeouts\")\n                self.log.info(\"System tcp timeout. Assuming that the checked system is down\")\n                return Status.DOWN, \"\"\"Socket error: %s.\n                 The connection timed out after %s ms because it took more time than the system tcp stack allows.\n                 You might want to change this setting to allow longer timeouts\"\"\" % (str(e), length)\n            else:\n                self.log.info(\"%s:%s is DOWN (%s). Connection failed after %s ms\" % (addr, port, str(e), length))\n                return Status.DOWN, \"%s. Connection failed after %s ms\" % (str(e), length)\n\n        except Exception as e:\n            length = int((time.time() - start) * 1000)\n            self.log.info(\"%s:%s is DOWN (%s). Connection failed after %s ms\" % (addr, port, str(e), length))\n            return Status.DOWN, \"%s. Connection failed after %s ms\" % (str(e), length)\n\n        if response_time:\n            self.gauge('network.tcp.response_time', time.time() - start, tags=['url:%s:%s' % (instance.get('host', None), port), 'instance:%s' % instance.get('name')] + custom_tags)\n\n        self.log.debug(\"%s:%s is UP\" % (addr, port))\n        return Status.UP, \"UP\"\n\n    # FIXME: 5.3 remove that\n    def _create_status_event(self, sc_name, status, msg, instance):\n        # Get the instance settings\n        host = instance.get('host', None)\n        port = instance.get('port', None)\n        name = instance.get('name', None)\n        nb_failures = self.statuses[name][sc_name].count(Status.DOWN)\n        nb_tries = len(self.statuses[name][sc_name])\n\n        # Get a custom message that will be displayed in the event\n        custom_message = instance.get('message', \"\")\n        if custom_message:\n            custom_message += \" \\n\"\n\n        # Let the possibility to override the source type name\n        instance_source_type_name = instance.get('source_type', None)\n        if instance_source_type_name is None:\n            source_type = \"%s.%s\" % (NetworkCheck.SOURCE_TYPE_NAME, name)\n        else:\n            source_type = \"%s.%s\" % (NetworkCheck.SOURCE_TYPE_NAME, instance_source_type_name)\n\n        # Get the handles you want to notify\n        notify = instance.get('notify', self.init_config.get('notify', []))\n        notify_message = \"\"\n        if notify:\n            notify_list = []\n            for handle in notify:\n                notify_list.append(\"@%s\" % handle.strip())\n            notify_message = \" \".join(notify_list) + \" \\n\"\n\n        if status == Status.DOWN:\n            title = \"[Alert] %s reported that %s is down\" % (self.hostname, name)\n            alert_type = \"error\"\n            msg = \"\"\"%s %s %s reported that %s (%s:%s) failed %s time(s) within %s last attempt(s).\n                Last error: %s\"\"\" % (notify_message,\n                custom_message, self.hostname, name, host, port, nb_failures, nb_tries, msg)\n            event_type = EventType.DOWN\n\n        else:  # Status is UP\n            title = \"[Recovered] %s reported that %s is up\" % (self.hostname, name)\n            alert_type = \"success\"\n            msg = \"%s %s %s reported that %s (%s:%s) recovered.\" % (notify_message,\n                custom_message, self.hostname, name, host, port)\n            event_type = EventType.UP\n\n        return {\n            'timestamp': int(time.time()),\n            'event_type': event_type,\n            'host': self.hostname,\n            'msg_text': msg,\n            'msg_title': title,\n            'alert_type': alert_type,\n            \"source_type_name\": source_type,\n            \"event_object\": name,\n        }\n\n    def report_as_service_check(self, sc_name, status, instance, msg=None):\n        instance_name = self.normalize(instance['name'])\n        host = instance.get('host', None)\n        port = instance.get('port', None)\n        custom_tags = instance.get('tags', [])\n\n        if status == Status.UP:\n            msg = None\n\n        tags = custom_tags + ['target_host:{0}'.format(host),\n                              'port:{0}'.format(port),\n                              'instance:{0}'.format(instance_name)]\n\n        self.service_check(self.SERVICE_CHECK_NAME,\n                           NetworkCheck.STATUS_TO_SERVICE_CHECK[status],\n                           tags=tags,\n                           message=msg\n                           )\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkafka_consumer/test/__init__.py\n## context:\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\npowerdns_recursor/manifest.json\n## context:\n{\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"0.1.1\",\n  \"max_agent_version\": \"6.0.0\",\n  \"min_agent_version\": \"5.6.3\",\n  \"name\": \"powerdns_recursor\",\n  \"short_description\": \"Keep an eye on strange traffic to and from your PowerDNS recursors.\",\n  \"support\": \"core\",\n  \"supported_os\": [\n    \"linux\",\n    \"mac_os\",\n    \"windows\"\n  ],\n  \"version\": \"1.0.0\",\n  \"guid\": \"ae533b67-a2af-45ce-8e23-235acb3a3893\",\n  \"public_title\": \"Datadog-Power DNS Recursor Integration\",\n  \"categories\":[\"web\", \"network\"],\n  \"type\":\"check\",\n  \"doc_link\": \"https://docs.datadoghq.com/integrations/powerdns_recursor/\",\n  \"is_public\": true,\n  \"has_logo\": true,\n  \"aliases\":[\"/integrations/powerdns\"]\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncassandra_nodetool/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"cassandra_nodetool\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-cassandra_nodetool',\n    version=version,\n    description='The Cassandra Nodetool check',\n    long_description=long_description,\n    keywords='datadog agent cassandra_nodetool check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.cassandra_nodetool'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.cassandra_nodetool': ['conf.yaml.example']},\n    include_package_data=True,\n\n    # The entrypoint to run the check manually without an agent\n    entry_points={\n        'console_scripts': [\n            'cassandra_nodetool=datadog_checks.cassandra_nodetool:main',\n        ],\n    },\n)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nfluentd/README.md\n## context:\n# Fluentd Integration\n{{< img src=\"integrations/fluentd/snapshot-fluentd.png\" alt=\"Fluentd Dashboard\" responsive=\"true\" popup=\"true\">}}\n## Overview\n\nGet metrics from Fluentd to:\n\n* Visualize Fluentd performance.\n* Correlate the performance of Fluentd with the rest of your applications.\n\n## Setup\n### Installation\n\nThe Fluentd check is packaged with the Agent, so simply [install the Agent](https://app.datadoghq.com/account/settings#agent) on your Fluentd servers.\n\n### Configuration\n#### Prepare Fluentd\n\nIn your fluentd configuration, add a `monitor_agent` source:\n\n```\n<source>\n  @type monitor_agent\n  bind 0.0.0.0\n  port 24220\n</source>\n```\n\n#### Connect the Datadog Agent\n\nCreate a file `fluentd.yaml` in the Agent's `conf.d` directory. See the [sample fluentd.yaml](https://github.com/DataDog/integrations-core/blob/master/fluentd/conf.yaml.example) for all available configuration options:\n\n```\ninit_config:\n\ninstances:\n  - monitor_agent_url: http://localhost:24220/api/plugins.json\n    #tag_by: \"type\" # defaults to 'plugin_id'\n    #plugin_ids:    # collect metrics only on your chosen plugin_ids (optional)\n    #  - plg1\n    #  - plg2\n```\n\n[Restart the Agent](https://docs.datadoghq.com/agent/faq/start-stop-restart-the-datadog-agent) to begin sending Fluentd metrics to Datadog.\n\n### Validation\n\n[Run the Agent's `info` subcommand](https://docs.datadoghq.com/agent/faq/agent-status-and-information/) and look for `fluentd` under the Checks section:\n\n```\n  Checks\n  ======\n    [...]\n\n    fluentd\n    -------\n      - instance #0 [OK]\n      - Collected 26 metrics, 0 events & 1 service check\n\n    [...]\n```\n\n\n## Data Collected\n### Metrics\n\nSee [metadata.csv](https://github.com/DataDog/integrations-core/blob/master/fluentd/metadata.csv) for a list of metrics provided by this integration.\n\n### Events\nThe FluentD check does not include any event at this time.\n\n### Service Checks\n\n`fluentd.is_ok`:\n\nReturns 'Critical' if the Agent cannot connect to Fluentd to collect metrics. This is the check which most other integrations would call `can_connect`.\n\n## Troubleshooting\nNeed help? Contact [Datadog Support](http://docs.datadoghq.com/help/).\n\n## Further Reading\n\n* [How to monitor Fluentd with Datadog](https://www.datadoghq.com/blog/monitor-fluentd-datadog/)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncassandra_nodetool/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"cassandra_nodetool\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-cassandra_nodetool',\n    version=version,\n    description='The Cassandra Nodetool check',\n    long_description=long_description,\n    keywords='datadog agent cassandra_nodetool check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.cassandra_nodetool'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.cassandra_nodetool': ['conf.yaml.example']},\n    include_package_data=True,\n\n    # The entrypoint to run the check manually without an agent\n    entry_points={\n        'console_scripts': [\n            'cassandra_nodetool=datadog_checks.cassandra_nodetool:main',\n        ],\n    },\n)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\npgbouncer/manifest.json\n## context:\n{\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"0.1.1\",\n  \"max_agent_version\": \"6.0.0\",\n  \"min_agent_version\": \"5.6.3\",\n  \"name\": \"pgbouncer\",\n  \"short_description\": \"Track connection pool metrics and monitor traffic to and from your application.\",\n  \"support\": \"core\",\n  \"supported_os\": [\n    \"linux\",\n    \"mac_os\"\n  ],\n  \"package_deps\": false,\n  \"version\": \"1.0.2\",\n  \"guid\": \"51386802-4502-4991-b592-27eff1ca111c\",\n  \"public_title\": \"Datadog-PGBouncer Integration\",\n  \"categories\":[\"data store\"],\n  \"type\":\"check\",\n  \"doc_link\": \"https://docs.datadoghq.com/integrations/pgbouncer/\",\n  \"is_public\": true,\n  \"has_logo\": true\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nfluentd/README.md\n## context:\n# Fluentd Integration\n{{< img src=\"integrations/fluentd/snapshot-fluentd.png\" alt=\"Fluentd Dashboard\" responsive=\"true\" popup=\"true\">}}\n## Overview\n\nGet metrics from Fluentd to:\n\n* Visualize Fluentd performance.\n* Correlate the performance of Fluentd with the rest of your applications.\n\n## Setup\n### Installation\n\nThe Fluentd check is packaged with the Agent, so simply [install the Agent](https://app.datadoghq.com/account/settings#agent) on your Fluentd servers.\n\n### Configuration\n#### Prepare Fluentd\n\nIn your fluentd configuration, add a `monitor_agent` source:\n\n```\n<source>\n  @type monitor_agent\n  bind 0.0.0.0\n  port 24220\n</source>\n```\n\n#### Connect the Datadog Agent\n\nCreate a file `fluentd.yaml` in the Agent's `conf.d` directory. See the [sample fluentd.yaml](https://github.com/DataDog/integrations-core/blob/master/fluentd/conf.yaml.example) for all available configuration options:\n\n```\ninit_config:\n\ninstances:\n  - monitor_agent_url: http://localhost:24220/api/plugins.json\n    #tag_by: \"type\" # defaults to 'plugin_id'\n    #plugin_ids:    # collect metrics only on your chosen plugin_ids (optional)\n    #  - plg1\n    #  - plg2\n```\n\n[Restart the Agent](https://docs.datadoghq.com/agent/faq/start-stop-restart-the-datadog-agent) to begin sending Fluentd metrics to Datadog.\n\n### Validation\n\n[Run the Agent's `info` subcommand](https://docs.datadoghq.com/agent/faq/agent-status-and-information/) and look for `fluentd` under the Checks section:\n\n```\n  Checks\n  ======\n    [...]\n\n    fluentd\n    -------\n      - instance #0 [OK]\n      - Collected 26 metrics, 0 events & 1 service check\n\n    [...]\n```\n\n\n## Data Collected\n### Metrics\n\nSee [metadata.csv](https://github.com/DataDog/integrations-core/blob/master/fluentd/metadata.csv) for a list of metrics provided by this integration.\n\n### Events\nThe FluentD check does not include any event at this time.\n\n### Service Checks\n\n`fluentd.is_ok`:\n\nReturns 'Critical' if the Agent cannot connect to Fluentd to collect metrics. This is the check which most other integrations would call `can_connect`.\n\n## Troubleshooting\nNeed help? Contact [Datadog Support](http://docs.datadoghq.com/help/).\n\n## Further Reading\n\n* [How to monitor Fluentd with Datadog](https://www.datadoghq.com/blog/monitor-fluentd-datadog/)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmcache/datadog_checks/__init__.py\n## context:\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkafka_consumer/test/__init__.py\n## context:\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ngitlab_runner/datadog_checks/gitlab_runner/__init__.py\n## context:\nfrom . import gitlab_runner\n\nGitlabRunnerCheck = gitlab_runner.GitlabRunnerCheck\n\n__version__ = \"1.0.0\"\n\n__all__ = ['gitlab_runner']\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmesos_slave/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"mesos_slave\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-mesos_slave',\n    version=version,\n    description='The Mesos slave check',\n    long_description=long_description,\n    keywords='datadog agent mesos_slave check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.mesos_slave'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.mesos_slave': ['conf.yaml.example']},\n    include_package_data=True,\n\n    # The entrypoint to run the check manually without an agent\n    entry_points={\n        'console_scripts': [\n            'mesos_slave=datadog_checks.mesos_slave:main',\n        ],\n    },\n)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ngitlab_runner/datadog_checks/gitlab_runner/__init__.py\n## context:\nfrom . import gitlab_runner\n\nGitlabRunnerCheck = gitlab_runner.GitlabRunnerCheck\n\n__version__ = \"1.0.0\"\n\n__all__ = ['gitlab_runner']\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nfluentd/README.md\n## context:\n# Fluentd Integration\n{{< img src=\"integrations/fluentd/snapshot-fluentd.png\" alt=\"Fluentd Dashboard\" responsive=\"true\" popup=\"true\">}}\n## Overview\n\nGet metrics from Fluentd to:\n\n* Visualize Fluentd performance.\n* Correlate the performance of Fluentd with the rest of your applications.\n\n## Setup\n### Installation\n\nThe Fluentd check is packaged with the Agent, so simply [install the Agent](https://app.datadoghq.com/account/settings#agent) on your Fluentd servers.\n\n### Configuration\n#### Prepare Fluentd\n\nIn your fluentd configuration, add a `monitor_agent` source:\n\n```\n<source>\n  @type monitor_agent\n  bind 0.0.0.0\n  port 24220\n</source>\n```\n\n#### Connect the Datadog Agent\n\nCreate a file `fluentd.yaml` in the Agent's `conf.d` directory. See the [sample fluentd.yaml](https://github.com/DataDog/integrations-core/blob/master/fluentd/conf.yaml.example) for all available configuration options:\n\n```\ninit_config:\n\ninstances:\n  - monitor_agent_url: http://localhost:24220/api/plugins.json\n    #tag_by: \"type\" # defaults to 'plugin_id'\n    #plugin_ids:    # collect metrics only on your chosen plugin_ids (optional)\n    #  - plg1\n    #  - plg2\n```\n\n[Restart the Agent](https://docs.datadoghq.com/agent/faq/start-stop-restart-the-datadog-agent) to begin sending Fluentd metrics to Datadog.\n\n### Validation\n\n[Run the Agent's `info` subcommand](https://docs.datadoghq.com/agent/faq/agent-status-and-information/) and look for `fluentd` under the Checks section:\n\n```\n  Checks\n  ======\n    [...]\n\n    fluentd\n    -------\n      - instance #0 [OK]\n      - Collected 26 metrics, 0 events & 1 service check\n\n    [...]\n```\n\n\n## Data Collected\n### Metrics\n\nSee [metadata.csv](https://github.com/DataDog/integrations-core/blob/master/fluentd/metadata.csv) for a list of metrics provided by this integration.\n\n### Events\nThe FluentD check does not include any event at this time.\n\n### Service Checks\n\n`fluentd.is_ok`:\n\nReturns 'Critical' if the Agent cannot connect to Fluentd to collect metrics. This is the check which most other integrations would call `can_connect`.\n\n## Troubleshooting\nNeed help? Contact [Datadog Support](http://docs.datadoghq.com/help/).\n\n## Further Reading\n\n* [How to monitor Fluentd with Datadog](https://www.datadoghq.com/blog/monitor-fluentd-datadog/)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nSupport for \"headers\" configuration in haproxy.yaml?\nHi all, I'm interested in passing a custom header to my HAProxy integration in `haproxy.yaml`, like this:\r\n\r\n```\r\ninstances:\r\n    - name: haproxy\r\n      url: http://localhost:3000\r\n      headers:\r\n        service-route: haproxy-stats\r\n```\r\n\r\nHowever, that [doesn't appear to be supported](https://github.com/DataDog/integrations-core/blob/master/haproxy/check.py#L160). Any chance something like this could be added, or ideas for a workaround?\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ngitlab_runner/datadog_checks/gitlab_runner/__init__.py\n## context:\nfrom . import gitlab_runner\n\nGitlabRunnerCheck = gitlab_runner.GitlabRunnerCheck\n\n__version__ = \"1.0.0\"\n\n__all__ = ['gitlab_runner']\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkafka_consumer/test/__init__.py\n## context:\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\n\n process\n    -------\n      - instance #0 [OK]\n      - instance DataDog/dd-agent#1 [WARNING]\n          Warning: Process 16039 disappeared while scanning\n          Warning: Process 16177 disappeared while scanning\n          Warning: Process 16178 disappeared while scanning\n          Warning: Process 16193 disappeared while scanning\n          Warning: Process 16194 disappeared while scanning\n          Warning: Process 16198 disappeared while scanning\n\n```\n      Warning: Process 15830 disappeared while scanning\n      Warning: Process 15844 disappeared while scanning\n  - instance DataDog/dd-agent#2 [OK]\n  - instance DataDog/dd-agent#3 [OK]\n  - instance DataDog/dd-agent#4 [OK]\n  - instance DataDog/dd-agent#5 [OK]\n  - instance DataDog/dd-agent#6 [OK]\n  - instance DataDog/dd-agent#7 [OK]\n  - instance DataDog/dd-agent#8 [OK]\n  - instance DataDog/dd-agent#9 [OK]\n  - Collected 43 metrics, 0 events & 11 service checks\n```\n\nIs is perfectly normal for postgresql to start and stop processes, and I see no reason why datadog would have to complain about that.\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/tooling/commands/meta/snmp/validate_mib_filenames.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under Simplified BSD License (see LICENSE)\nimport os\nimport re\nfrom collections import namedtuple\n\nimport click\nfrom tabulate import tabulate\n\nfrom ...console import CONTEXT_SETTINGS, echo_info, echo_warning\n\nOPTION_ALL = '*'\n\nOPTION_HELP = '''Use a supported option to select all files, one single file, a range of files or multiple ranges\nOption supports:\n> * all\n> 1 single index\n> 1-4 range of indexes from 1 to 4 excluded\n> 1-4:6 multiple ranges\nExample:\n1-3:6-9\nselects files 1,2 and 6,7,8\n2\nselects file 2\n1:3:5-9\nselects files 1,3,5,6,7,8\n1:4\nselects files 1,2,3\n'''\n\n# (\n#   (\n#     \\d+     # one or more digits\n#     (-\\d+)* # zero or one character'-' followed by one or more digits\n#   ){1} # exactly once\n#   (\n#     :\\d+    # one character ':' followed by one or more digits\n#     (-\\d+)* # zero or one character'-' followed by one or more digits\n#   )*  # one or more\n# )\n# |  # OR\n# \\* # one character '*'\nOPTION_PATTERN = r'((\\d+(-\\d+)*){1}(:\\d+(-\\d+)*)*)|\\*'\n\nMibFile = namedtuple('MibFile', ['index', 'folder', 'base_filename', 'name', 'is_valid'])\n\n\n@click.command(context_settings=CONTEXT_SETTINGS, short_help='Validate MIB file names')\n@click.argument('mib_files', nargs=-1)\n@click.option('--interactive', '-i', is_flag=True, help='Prompt to confirm before renaming all invalid MIB files')\n@click.pass_context\ndef validate_mib_filenames(ctx, mib_files, interactive):\n    \"\"\"\n    Validate MIB file names. Frameworks used to load mib files expect MIB file names to match\n    MIB name.\n    \"\"\"\n    # filter files\n    mib_files = [f for f in mib_files if os.path.isfile(f)]\n    # ensure at least one mib file is provided\n    if len(mib_files) == 0:\n        echo_warning('\ud83d\ude44 no mib file provided, need at least one mib file to validate them')\n        return\n\n    mibs = []\n    # build profile\n    index = 1\n    for mib_file in mib_files:\n        if not os.path.isfile(mib_file):\n            continue\n        mib_name = _load_and_extract_mib_name(mib_file)\n\n        base_filename = os.path.basename(mib_file)\n        mibs.append(\n            MibFile(\n                index,\n                folder=os.path.dirname(os.path.realpath(mib_file)),\n                base_filename=base_filename,\n                name=mib_name,\n                is_valid=mib_name and mib_name == base_filename.split('.')[0],\n            )\n        )\n        index += 1\n\n    option = '*'\n    if interactive:\n        echo_info(\n            tabulate(\n                [[mib.index, mib.base_filename, mib.name, mib.is_valid] for mib in mibs],\n                headers=['Index', 'File', 'Name', \"Valid\"],\n            )\n        )\n        option = click.prompt(\n            text='\ud83e\udd16 Which files do you want to rename? (* for all, 1 for single, 1-3:5-7 for range(s))',\n            default=OPTION_ALL,\n        )\n\n    _rename_mib_files([mib for mib in mibs if not mib.is_valid], option)\n\n\ndef _load_and_extract_mib_name(mib_file):\n    with open(mib_file) as f:\n        read_data = f.read()\n        return _extract_mib_name(read_data)\n    return None\n\n\ndef _extract_mib_name(mib_data):\n    for line in mib_data.splitlines():\n        if 'DEFINITIONS ::= BEGIN' in line:\n            name = line.split('DEFINITIONS ::=')[0].strip()\n            return name\n    return None\n\n\ndef _rename_mib_files(mibs, option='*'):\n    if not _is_valid_option(option):\n        echo_warning('\u26a0\ufe0f Invalid option')\n        echo_info(OPTION_HELP)\n        return\n\n    # filter indexes\n    if option != OPTION_ALL:\n        indexes = set()\n        # parse ranges\n        for opt_range in option.split(':'):\n            if '-' in opt_range:\n                # parse index ranges\n                # ie: 1-7\n                start, end = opt_range.split('-')\n                indexes.update(range(int(start), int(end)))\n            else:\n                # parse single index\n                # ie: 1\n                indexes.add(int(opt_range))\n        mibs = [mib for mib in mibs if mib.index in indexes]\n\n    # rename\n    for mib in mibs:\n        dst = mib.name\n        if '.' in mib.base_filename:\n            extension = mib.base_filename.split('.')[1]\n            dst += '.{}'.format(extension)\n        os.rename(src=os.path.join(mib.folder, mib.base_filename), dst=os.path.join(mib.folder, dst))\n\n\ndef _is_valid_option(option):\n    return re.fullmatch(OPTION_PATTERN, option)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nhyperv/manifest.json\n## context:\n{\n  \"display_name\": \"HyperV\",\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"1.0.0\",\n  \"name\": \"hyperv\",\n  \"metric_prefix\": \"hyperv.\",\n  \"metric_to_check\": \"hyperv.hypervisor_logical_processor.total_run_time\",\n  \"creates_events\": false,\n  \"short_description\": \"Monitor Microsoft's Hyper-V virtualization technology.\",\n  \"guid\": \"412a75c1-b752-4b20-b046-4195dfaaf6ec\",\n  \"support\": \"core\",\n  \"supported_os\": [\n    \"windows\"\n  ],\n  \"public_title\": \"Datadog-HyperV Integration\",\n  \"categories\": [\n    \"azure\",\n    \"cloud\",\n    \"monitoring\",\n    \"os & system\"\n  ],\n  \"type\": \"check\",\n  \"is_public\": true,\n  \"integration_id\": \"hyper-v\",\n  \"assets\": {\n    \"configuration\": {\n      \"spec\": \"assets/configuration/spec.yaml\"\n    },\n    \"monitors\": {},\n    \"dashboards\": {\n      \"hyper-v\": \"assets/dashboards/overview.json\"\n    },\n    \"service_checks\": \"assets/service_checks.json\",\n    \"logs\": {},\n    \"metrics_metadata\": \"metadata.csv\"\n  }\n}\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\n\n process\n    -------\n      - instance #0 [OK]\n      - instance DataDog/dd-agent#1 [WARNING]\n          Warning: Process 16039 disappeared while scanning\n          Warning: Process 16177 disappeared while scanning\n          Warning: Process 16178 disappeared while scanning\n          Warning: Process 16193 disappeared while scanning\n          Warning: Process 16194 disappeared while scanning\n          Warning: Process 16198 disappeared while scanning\n\n```\n      Warning: Process 15830 disappeared while scanning\n      Warning: Process 15844 disappeared while scanning\n  - instance DataDog/dd-agent#2 [OK]\n  - instance DataDog/dd-agent#3 [OK]\n  - instance DataDog/dd-agent#4 [OK]\n  - instance DataDog/dd-agent#5 [OK]\n  - instance DataDog/dd-agent#6 [OK]\n  - instance DataDog/dd-agent#7 [OK]\n  - instance DataDog/dd-agent#8 [OK]\n  - instance DataDog/dd-agent#9 [OK]\n  - Collected 43 metrics, 0 events & 11 service checks\n```\n\nIs is perfectly normal for postgresql to start and stop processes, and I see no reason why datadog would have to complain about that.\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/tooling/manifest_validator/v2/validator.py\n## context:\n#  (C) Datadog, Inc. 2020-present\n#  All rights reserved\n#  Licensed under a 3-clause BSD style license (see LICENSE)\nimport json\nimport os\n\nimport jsonschema\nimport requests\n\nimport datadog_checks.dev.tooling.manifest_validator.common.validator as common\nfrom datadog_checks.dev.tooling.manifest_validator.common.validator import BaseManifestValidator\n\nfrom ...constants import get_root\nfrom ..constants import V2\n\nMETRIC_TO_CHECK_EXCLUDE_LIST = {\n    'openstack.controller',  # \"Artificial\" metric, shouldn't be listed in metadata file.\n    'riakcs.bucket_list_pool.workers',  # RiakCS 2.1 metric, but metadata.csv lists RiakCS 2.0 metrics only.\n}\n\n\nclass DisplayOnPublicValidator(BaseManifestValidator):\n    def validate(self, check_name, decoded, fix):\n        correct_is_public = True\n        path = '/display_on_public_website'\n        is_public = decoded.get_path(path)\n        if not isinstance(is_public, bool):\n            output = '  required boolean: display_on_public_website'\n\n            if fix:\n                decoded.set_path(path, correct_is_public)\n                self.fix(output, f'  new `display_on_public_website`: {correct_is_public}')\n            else:\n                self.fail(output)\n\n\nclass SchemaValidator(BaseManifestValidator):\n    def validate(self, check_name, decoded, fix):\n        if not self.should_validate():\n            return\n\n        # Get API and APP keys which are needed to call Datadog API\n        org_name = self.ctx.obj.get('org')\n        if not org_name:\n            self.fail('No `org` has been set')\n            return\n\n        if org_name not in self.ctx.obj.get('orgs'):\n            self.fail(f'Selected org {org_name} is not in `orgs`')\n            return\n\n        org = self.ctx.obj['orgs'][org_name]\n\n        dd_url = org.get('dd_url')\n        if not dd_url:\n            self.fail(f'No `dd_url` has been set for org `{org_name}`')\n            return\n\n        url = f\"{dd_url}/api/beta/apps/manifest/validate\"\n\n        # prep for upload\n        payload = {\"data\": {\"type\": \"app_manifest\", \"attributes\": decoded}}\n\n        try:\n            payload_json = json.dumps(payload)\n            r = requests.post(url, data=payload_json)\n\n            if r.status_code == 400:\n                # parse the errors\n                errors = \"\\n\".join(r.json()[\"errors\"])\n                message = f\"Error validating manifest schema:\\n{errors}\"\n                self.fail(message)\n            else:\n                r.raise_for_status()\n        except Exception as e:\n            self.fail(str(e))\n\n\nclass MediaGalleryValidator(BaseManifestValidator):\n    VIDEO_MEDIA_ATTRIBUTES = ('media_type', 'caption', 'image_url', 'vimeo_id')\n    IMAGE_MEDIA_ATTRIBUTES = ('media_type', 'caption', 'image_url')\n    MEDIA_PATH = '/tile/media'\n    MAX_MEDIA_ELEMENTS = 8\n\n    IMAGE_SCHEMA = jsonschema.Draft7Validator(\n        {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"title\": \"V2 Manifest Image Media Element Validator\",\n            \"description\": \"Defines the various components of an image media element\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"media_type\": {\n                    \"description\": \"The type of media (image or video)\",\n                    \"type\": \"string\",\n                    \"enum\": [\"image\"],\n                },\n                \"caption\": {\n                    \"description\": \"The caption for this image media\",\n                    \"type\": \"string\",\n                },\n                \"image_url\": {\n                    \"description\": \"The relative path to the image from integration root\",\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": [\"media_type\", \"caption\", \"image_url\"],\n        }\n    )\n    VIDEO_SCHEMA = jsonschema.Draft7Validator(\n        {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"title\": \"V2 Manifest Video Media Element Validator\",\n            \"description\": \"Defines the various components of a video media element\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"media_type\": {\n                    \"description\": \"The type of media (image or video)\",\n                    \"type\": \"string\",\n                    \"enum\": [\"video\"],\n                },\n                \"caption\": {\n                    \"description\": \"The caption for this video media\",\n                    \"type\": \"string\",\n                },\n                \"image_url\": {\n                    \"description\": \"The relative path to the image from integration root\",\n                    \"type\": \"string\",\n                },\n                \"vimeo_id\": {\n                    \"description\": \"The vimeo id (9 digits) corresponding to this video\",\n                    \"type\": \"integer\",\n                },\n            },\n            \"required\": [\"media_type\", \"caption\", \"image_url\", \"vimeo_id\"],\n        }\n    )\n\n    def validate(self, check_name, decoded, fix):\n        if not self.should_validate():\n            return\n\n        media_array = decoded.get_path(self.MEDIA_PATH)\n        # Skip validations if no media is included in the manifest\n        if not media_array:\n            return\n\n        # Length must be between 1-8\n        num_media_elements = len(media_array)\n        if num_media_elements > self.MAX_MEDIA_ELEMENTS:\n            output = f'  The maximum number of media elements is 8, there are currently {num_media_elements}.'\n            self.fail(output)\n\n        # Validate each media object\n        video_count = 0\n        for i, media in enumerate(media_array, 1):\n            # Ensure each media contains valid keys\n            try:\n                media_type = media['media_type']\n                if media_type == 'image':\n                    attribute_schema = self.IMAGE_SCHEMA\n                elif media_type == 'video':\n                    attribute_schema = self.VIDEO_SCHEMA\n                else:\n                    output = f'  Media #{i} `media_type` attribute must be \"video\" or \"image\"'\n                    self.fail(output)\n                    continue\n\n                # Validate with the correct schema\n                errors = sorted(attribute_schema.iter_errors(media), key=lambda e: e.path)\n                if errors:\n                    for error in errors:\n                        self.fail(f'  Media #{i}: {error.message}')\n                    continue\n            except KeyError:\n                output = f'  Media #{i}: \\'media_type\\' is a required property'\n                self.fail(output)\n                continue\n\n            caption = media['caption']\n            image_url = media['image_url']\n\n            # Image_url must lead to png or jpg\n            if '.png' not in image_url.lower() and '.jpg' not in image_url.lower():\n                output = f'  The filetype for media #{i} must be either `.jpg` or `.png`.'\n                self.fail(output)\n\n            # Caption must be smaller than 300 chars\n            if len(caption) > 300:\n                output = f'  The `caption` for media #{i} cannot contain more than 300 characters.'\n                self.fail(output)\n\n            # Keep track of video count (only 1 is allowed)\n            if media_type == 'video':\n                video_count += 1\n\n            try:\n                # Check if file is found in directory\n                cur_path = os.path.join(get_root(), check_name)\n                file_size = os.path.getsize(f'{cur_path}/{image_url}')\n                if file_size > 1000000:  # If file size greater than 1 megabyte, fail\n                    output = f'  File size for media #{i} must be smaller than 1 mb, currently {file_size} bytes.'\n                    self.fail(output)\n            except OSError:\n                output = f'  File not found for media #{i} at `{image_url}`, please fix the path.'\n                self.fail(output)\n\n        if video_count > 1:\n            output = f'  There cannot be more than 1 video in the list of media, currently there are {video_count}'\n            self.fail(output)\n\n\ndef get_v2_validators(ctx, is_extras, is_marketplace):\n    return [\n        common.MaintainerValidator(\n            is_extras, is_marketplace, check_in_extras=False, check_in_marketplace=False, version=V2\n        ),\n        common.MetricsMetadataValidator(version=V2),\n        common.MetricToCheckValidator(version=V2),\n        common.ImmutableAttributesValidator(version=V2),\n        common.LogsCategoryValidator(version=V2),\n        DisplayOnPublicValidator(version=V2),\n        MediaGalleryValidator(is_marketplace, is_extras, version=V2),\n        # keep SchemaValidator last, and avoid running this validation if errors already found\n        SchemaValidator(ctx=ctx, version=V2, skip_if_errors=True),\n    ]\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/tests/tooling/configuration/consumers/model/test_all_required.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nimport pytest\n\nfrom ...utils import get_model_consumer, normalize_yaml\n\npytestmark = [pytest.mark.conf, pytest.mark.conf_consumer, pytest.mark.conf_consumer_model]\n\n\ndef test():\n    consumer = get_model_consumer(\n        \"\"\"\n        name: test\n        version: 0.0.0\n        files:\n        - name: test.yaml\n          options:\n          - template: instances\n            options:\n            - name: foo\n              required: true\n              description: words\n              value:\n                type: string\n        \"\"\"\n    )\n\n    model_definitions = consumer.render()\n    assert len(model_definitions) == 1\n\n    files = model_definitions['test.yaml']\n    assert len(files) == 3\n\n    validators_contents, validators_errors = files['validators.py']\n    assert not validators_errors\n    assert validators_contents == ''\n\n    package_root_contents, package_root_errors = files['__init__.py']\n    assert not package_root_errors\n    assert package_root_contents == normalize_yaml(\n        \"\"\"\n        from .instance import InstanceConfig\n\n\n        class ConfigMixin:\n            _config_model_instance: InstanceConfig\n\n            @property\n            def config(self) -> InstanceConfig:\n                return self._config_model_instance\n        \"\"\"\n    )\n\n    instance_model_contents, instance_model_errors = files['instance.py']\n    assert not instance_model_errors\n    assert instance_model_contents == normalize_yaml(\n        \"\"\"\n        from __future__ import annotations\n\n        from pydantic import BaseModel, root_validator, validator\n\n        from datadog_checks.base.utils.functions import identity\n        from datadog_checks.base.utils.models import validation\n\n        from . import validators\n\n\n        class InstanceConfig(BaseModel):\n            class Config:\n                allow_mutation = False\n\n            foo: str\n\n            @root_validator(pre=True)\n            def _initial_validation(cls, values):\n                return validation.core.initialize_config(getattr(validators, 'initialize_instance', identity)(values))\n\n            @validator('*', pre=True, always=True)\n            def _ensure_defaults(cls, v, field):\n                if v is not None or field.required:\n                    return v\n\n                return getattr(defaults, f'instance_{field.name}')(field, v)\n\n            @validator('*')\n            def _run_validations(cls, v, field):\n                if not v:\n                    return v\n\n                return getattr(validators, f'instance_{field.name}', identity)(v, field=field)\n\n            @root_validator(pre=False)\n            def _final_validation(cls, values):\n                return validation.core.finalize_config(getattr(validators, 'finalize_instance', identity)(values))\n        \"\"\"\n    )\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\n\n process\n    -------\n      - instance #0 [OK]\n      - instance DataDog/dd-agent#1 [WARNING]\n          Warning: Process 16039 disappeared while scanning\n          Warning: Process 16177 disappeared while scanning\n          Warning: Process 16178 disappeared while scanning\n          Warning: Process 16193 disappeared while scanning\n          Warning: Process 16194 disappeared while scanning\n          Warning: Process 16198 disappeared while scanning\n\n```\n      Warning: Process 15830 disappeared while scanning\n      Warning: Process 15844 disappeared while scanning\n  - instance DataDog/dd-agent#2 [OK]\n  - instance DataDog/dd-agent#3 [OK]\n  - instance DataDog/dd-agent#4 [OK]\n  - instance DataDog/dd-agent#5 [OK]\n  - instance DataDog/dd-agent#6 [OK]\n  - instance DataDog/dd-agent#7 [OK]\n  - instance DataDog/dd-agent#8 [OK]\n  - instance DataDog/dd-agent#9 [OK]\n  - Collected 43 metrics, 0 events & 11 service checks\n```\n\nIs is perfectly normal for postgresql to start and stop processes, and I see no reason why datadog would have to complain about that.\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncisco_aci/tests/fixtures/fabric/97c9b38cfda14c9218b0d97ac45e2635.txt\n## context:\n{\"totalCount\":\"294\",\"imdata\":[{\"fvFltCounter5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"22\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/CDfvFltCounter5min\",\"lastCollOffset\":\"220\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:48:37.270-07:00\",\"repIntvStart\":\"2018-05-30T12:44:57.236-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-0\",\"index\":\"0\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:44:57.236-07:00\",\"repIntvStart\":\"2018-05-30T12:39:57.191-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-11\",\"index\":\"11\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:49:56.716-07:00\",\"repIntvStart\":\"2018-05-30T11:44:56.669-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-10\",\"index\":\"10\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:54:56.771-07:00\",\"repIntvStart\":\"2018-05-30T11:49:56.716-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-9\",\"index\":\"9\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T11:59:56.822-07:00\",\"repIntvStart\":\"2018-05-30T11:54:56.771-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-8\",\"index\":\"8\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:04:56.868-07:00\",\"repIntvStart\":\"2018-05-30T11:59:56.822-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-7\",\"index\":\"7\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:09:56.914-07:00\",\"repIntvStart\":\"2018-05-30T12:04:56.868-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-6\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:14:56.959-07:00\",\"repIntvStart\":\"2018-05-30T12:09:56.914-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-5\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:19:57.005-07:00\",\"repIntvStart\":\"2018-05-30T12:14:56.959-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-4\",\"index\":\"4\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:24:57.052-07:00\",\"repIntvStart\":\"2018-05-30T12:19:57.005-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-3\",\"index\":\"3\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:29:57.098-07:00\",\"repIntvStart\":\"2018-05-30T12:24:57.052-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-2\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:34:57.144-07:00\",\"repIntvStart\":\"2018-05-30T12:29:57.098-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter5min-1\",\"index\":\"1\",\"lastCollOffset\":\"300\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:39:57.191-07:00\",\"repIntvStart\":\"2018-05-30T12:34:57.144-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounter15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/CDfvFltCounter15min\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T12:44:57.236-07:00\",\"repIntvStart\":\"2018-05-30T12:29:57.098-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1d\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"19\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/CDfvFltCounter1d\",\"lastCollOffset\":\"68400\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T11:59:56.822-07:00\",\"repIntvStart\":\"2018-05-29T16:59:55.927-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1h\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/CDfvFltCounter1h\",\"lastCollOffset\":\"1800\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-30T12:29:57.098-07:00\",\"repIntvStart\":\"2018-05-30T11:59:56.822-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1mo\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"10\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/CDfvFltCounter1mo\",\"lastCollOffset\":\"883490\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T16:59:55.927-07:00\",\"repIntvStart\":\"2018-05-19T11:35:05.378-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1qtr\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"10\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/CDfvFltCounter1qtr\",\"lastCollOffset\":\"883490\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T16:59:55.927-07:00\",\"repIntvStart\":\"2018-05-19T11:35:05.378-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1w\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/CDfvFltCounter1w\",\"lastCollOffset\":\"259191\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T16:59:55.927-07:00\",\"repIntvStart\":\"2018-05-26T17:00:04.708-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounter1year\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"10\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/CDfvFltCounter1year\",\"lastCollOffset\":\"883490\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"repIntvEnd\":\"2018-05-29T16:59:55.927-07:00\",\"repIntvStart\":\"2018-05-19T11:35:05.378-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-35\",\"index\":\"35\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T03:45:02.068-07:00\",\"repIntvStart\":\"2018-05-30T03:30:01.925-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-34\",\"index\":\"34\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:00:02.210-07:00\",\"repIntvStart\":\"2018-05-30T03:45:02.068-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-33\",\"index\":\"33\",\"lastCollOffset\":\"610\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:15:02.353-07:00\",\"repIntvStart\":\"2018-05-30T04:04:52.257-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-32\",\"index\":\"32\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:30:02.494-07:00\",\"repIntvStart\":\"2018-05-30T04:15:02.353-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-31\",\"index\":\"31\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:44:52.634-07:00\",\"repIntvStart\":\"2018-05-30T04:30:02.494-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-30\",\"index\":\"30\",\"lastCollOffset\":\"610\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T04:55:02.731-07:00\",\"repIntvStart\":\"2018-05-30T04:44:52.634-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-29\",\"index\":\"29\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:15:02.920-07:00\",\"repIntvStart\":\"2018-05-30T05:00:02.778-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-28\",\"index\":\"28\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:30:03.071-07:00\",\"repIntvStart\":\"2018-05-30T05:15:02.920-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-27\",\"index\":\"27\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:44:53.213-07:00\",\"repIntvStart\":\"2018-05-30T05:30:03.071-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-26\",\"index\":\"26\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T05:59:53.358-07:00\",\"repIntvStart\":\"2018-05-30T05:44:53.213-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-25\",\"index\":\"25\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:14:53.502-07:00\",\"repIntvStart\":\"2018-05-30T05:59:53.358-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-24\",\"index\":\"24\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:29:53.645-07:00\",\"repIntvStart\":\"2018-05-30T06:14:53.502-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-23\",\"index\":\"23\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:45:03.788-07:00\",\"repIntvStart\":\"2018-05-30T06:29:53.645-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-22\",\"index\":\"22\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T06:59:53.932-07:00\",\"repIntvStart\":\"2018-05-30T06:45:03.788-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-21\",\"index\":\"21\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:15:04.079-07:00\",\"repIntvStart\":\"2018-05-30T06:59:53.932-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-20\",\"index\":\"20\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:30:04.225-07:00\",\"repIntvStart\":\"2018-05-30T07:15:04.079-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-19\",\"index\":\"19\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T07:44:54.368-07:00\",\"repIntvStart\":\"2018-05-30T07:30:04.225-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-18\",\"index\":\"18\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:00:04.512-07:00\",\"repIntvStart\":\"2018-05-30T07:44:54.368-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-17\",\"index\":\"17\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:15:04.658-07:00\",\"repIntvStart\":\"2018-05-30T08:00:04.512-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-16\",\"index\":\"16\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:29:54.802-07:00\",\"repIntvStart\":\"2018-05-30T08:15:04.658-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-15\",\"index\":\"15\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:45:04.948-07:00\",\"repIntvStart\":\"2018-05-30T08:29:54.802-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-14\",\"index\":\"14\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T08:59:55.091-07:00\",\"repIntvStart\":\"2018-05-30T08:45:04.948-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-13\",\"index\":\"13\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T09:14:55.241-07:00\",\"repIntvStart\":\"2018-05-30T08:59:55.091-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-12\",\"index\":\"12\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T09:29:55.387-07:00\",\"repIntvStart\":\"2018-05-30T09:14:55.241-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-11\",\"index\":\"11\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T09:45:05.535-07:00\",\"repIntvStart\":\"2018-05-30T09:29:55.387-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-10\",\"index\":\"10\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T10:00:05.678-07:00\",\"repIntvStart\":\"2018-05-30T09:45:05.535-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-9\",\"index\":\"9\",\"lastCollOffset\":\"890\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T10:14:55.822-07:00\",\"repIntvStart\":\"2018-05-30T10:00:05.678-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-8\",\"index\":\"8\",\"lastCollOffset\":\"900\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T10:29:55.966-07:00\",\"repIntvStart\":\"2018-05-30T10:14:55.822-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"3\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-7\",\"index\":\"7\",\"lastCollOffset\":\"910\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T10:45:06.109-07:00\",\"repIntvStart\":\"2018-05-30T10:29:55.966-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}},{\"fvFltCounterHist15min\":{\"attributes\":{\"childAction\":\"\",\"cnt\":\"2\",\"critcountAvg\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"dn\":\"topology/pod-1/node-101/sys/phys-[eth1/18]/HDfvFltCounter15min-6\",\"index\":\"6\",\"lastCollOffset\":\"600\",\"majcountAvg\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"mincountAvg\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:00:06.249-07:00\",\"repIntvStart\":\"2018-05-30T10:50:06.155-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\"}}}]}"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncisco_aci/tests/fixtures/fabric/26bfabd76a3c7b74961718e820150181.txt\n## context:\n{\"totalCount\":\"3900\",\"imdata\":[{\"eqptMacsectxpkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptMacsectxpkts5min\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesBase\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesLast\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateLast\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesRateTrBase\":\"0.000000\",\"encryptedPacktesRateTtl\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"encryptedPacktesTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsBase\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsLast\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateLast\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsRateTrBase\":\"0.000000\",\"protectedPacketsRateTtl\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"protectedPacketsTrBase\":\"0\",\"repIntvEnd\":\"2018-05-30T12:49:28.251-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptMacsectxbytes5min\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsBase\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsLast\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateLast\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsRateTrBase\":\"0.000000\",\"encryptedOctetsRateTtl\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"encryptedOctetsTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsBase\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsLast\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateLast\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsRateTrBase\":\"0.000000\",\"protectedOctetsRateTtl\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"protectedOctetsTrBase\":\"0\",\"repIntvEnd\":\"2018-05-30T12:49:28.251-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsecrxpkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesBase\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesLast\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateLast\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesRateTrBase\":\"0.000000\",\"decryptedPacktesRateTtl\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"decryptedPacktesTrBase\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptMacsecrxpkts5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.248-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsBase\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsLast\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateLast\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsRateTrBase\":\"0.000000\",\"validatedPacketsRateTtl\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\",\"validatedPacketsTrBase\":\"0\"}}},{\"eqptMacsecrxbytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"decryptedOctetsAvg\":\"0\",\"decryptedOctetsBase\":\"0\",\"decryptedOctetsCum\":\"0\",\"decryptedOctetsLast\":\"0\",\"decryptedOctetsMax\":\"0\",\"decryptedOctetsMin\":\"0\",\"decryptedOctetsPer\":\"0\",\"decryptedOctetsRate\":\"0.000000\",\"decryptedOctetsRateAvg\":\"0.000000\",\"decryptedOctetsRateLast\":\"0.000000\",\"decryptedOctetsRateMax\":\"0.000000\",\"decryptedOctetsRateMin\":\"0.000000\",\"decryptedOctetsRateSpct\":\"0\",\"decryptedOctetsRateThr\":\"\",\"decryptedOctetsRateTr\":\"0.000000\",\"decryptedOctetsRateTrBase\":\"0.000000\",\"decryptedOctetsRateTtl\":\"0.000000\",\"decryptedOctetsSpct\":\"0\",\"decryptedOctetsThr\":\"\",\"decryptedOctetsTr\":\"0\",\"decryptedOctetsTrBase\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptMacsecrxbytes5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.248-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.248-07:00\",\"status\":\"\",\"validatedOctetsAvg\":\"0\",\"validatedOctetsBase\":\"0\",\"validatedOctetsCum\":\"0\",\"validatedOctetsLast\":\"0\",\"validatedOctetsMax\":\"0\",\"validatedOctetsMin\":\"0\",\"validatedOctetsPer\":\"0\",\"validatedOctetsRate\":\"0.000000\",\"validatedOctetsRateAvg\":\"0.000000\",\"validatedOctetsRateLast\":\"0.000000\",\"validatedOctetsRateMax\":\"0.000000\",\"validatedOctetsRateMin\":\"0.000000\",\"validatedOctetsRateSpct\":\"0\",\"validatedOctetsRateThr\":\"\",\"validatedOctetsRateTr\":\"0.000000\",\"validatedOctetsRateTrBase\":\"0.000000\",\"validatedOctetsRateTtl\":\"0.000000\",\"validatedOctetsSpct\":\"0\",\"validatedOctetsThr\":\"\",\"validatedOctetsTr\":\"0\",\"validatedOctetsTrBase\":\"0\"}}},{\"eqptIngrStormMc5min\":{\"attributes\":{\"DropBytesAvg\":\"0\",\"DropBytesBase\":\"0\",\"DropBytesCum\":\"0\",\"DropBytesLast\":\"0\",\"DropBytesMax\":\"0\",\"DropBytesMin\":\"0\",\"DropBytesPer\":\"0\",\"DropBytesRate\":\"0.000000\",\"DropBytesRateAvg\":\"0.000000\",\"DropBytesRateLast\":\"0.000000\",\"DropBytesRateMax\":\"0.000000\",\"DropBytesRateMin\":\"0.000000\",\"DropBytesRateSpct\":\"0\",\"DropBytesRateThr\":\"\",\"DropBytesRateTr\":\"0.000000\",\"DropBytesRateTrBase\":\"0.000000\",\"DropBytesRateTtl\":\"0.000000\",\"DropBytesSpct\":\"0\",\"DropBytesThr\":\"\",\"DropBytesTr\":\"0\",\"DropBytesTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrStormMc5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\"}}},{\"eqptIngrStormBc5min\":{\"attributes\":{\"DropBytesAvg\":\"0\",\"DropBytesBase\":\"0\",\"DropBytesCum\":\"0\",\"DropBytesLast\":\"0\",\"DropBytesMax\":\"0\",\"DropBytesMin\":\"0\",\"DropBytesPer\":\"0\",\"DropBytesRate\":\"0.000000\",\"DropBytesRateAvg\":\"0.000000\",\"DropBytesRateLast\":\"0.000000\",\"DropBytesRateMax\":\"0.000000\",\"DropBytesRateMin\":\"0.000000\",\"DropBytesRateSpct\":\"0\",\"DropBytesRateThr\":\"\",\"DropBytesRateTr\":\"0.000000\",\"DropBytesRateTrBase\":\"0.000000\",\"DropBytesRateTtl\":\"0.000000\",\"DropBytesSpct\":\"0\",\"DropBytesThr\":\"\",\"DropBytesTr\":\"0\",\"DropBytesTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrStormBc5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\"}}},{\"eqptIngrStormUc5min\":{\"attributes\":{\"DropBytesAvg\":\"0\",\"DropBytesBase\":\"0\",\"DropBytesCum\":\"0\",\"DropBytesLast\":\"0\",\"DropBytesMax\":\"0\",\"DropBytesMin\":\"0\",\"DropBytesPer\":\"0\",\"DropBytesRate\":\"0.000000\",\"DropBytesRateAvg\":\"0.000000\",\"DropBytesRateLast\":\"0.000000\",\"DropBytesRateMax\":\"0.000000\",\"DropBytesRateMin\":\"0.000000\",\"DropBytesRateSpct\":\"0\",\"DropBytesRateThr\":\"\",\"DropBytesRateTr\":\"0.000000\",\"DropBytesRateTrBase\":\"0.000000\",\"DropBytesRateTtl\":\"0.000000\",\"DropBytesSpct\":\"0\",\"DropBytesThr\":\"\",\"DropBytesTr\":\"0\",\"DropBytesTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrStormUc5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\"}}},{\"fvFltCounter5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDfvFltCounter5min\",\"lastCollOffset\":\"280\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:37.015-07:00\",\"repIntvStart\":\"2018-05-30T12:44:56.967-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"eqptIngrStorm5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"56\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrStorm5min\",\"dropBytesAvg\":\"0\",\"dropBytesBase\":\"0\",\"dropBytesCum\":\"0\",\"dropBytesLast\":\"0\",\"dropBytesMax\":\"0\",\"dropBytesMin\":\"0\",\"dropBytesPer\":\"0\",\"dropBytesRate\":\"0.000000\",\"dropBytesRateAvg\":\"0.000000\",\"dropBytesRateLast\":\"0.000000\",\"dropBytesRateMax\":\"0.000000\",\"dropBytesRateMin\":\"0.000000\",\"dropBytesRateSpct\":\"0\",\"dropBytesRateThr\":\"\",\"dropBytesRateTr\":\"0.000000\",\"dropBytesRateTrBase\":\"0.000000\",\"dropBytesRateTtl\":\"0.000000\",\"dropBytesSpct\":\"0\",\"dropBytesThr\":\"\",\"dropBytesTr\":\"0\",\"dropBytesTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.247-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.247-07:00\",\"status\":\"\"}}},{\"eqptEgrTotal5min\":{\"attributes\":{\"bytesAvg\":\"7975\",\"bytesBase\":\"0\",\"bytesCum\":\"172762765311\",\"bytesLast\":\"0\",\"bytesMax\":\"17208\",\"bytesMin\":\"0\",\"bytesPer\":\"223320\",\"bytesRate\":\"797.571429\",\"bytesRateAvg\":\"797.574823\",\"bytesRateLast\":\"0.000000\",\"bytesRateMax\":\"1720.972097\",\"bytesRateMin\":\"0.000000\",\"bytesRateSpct\":\"0\",\"bytesRateThr\":\"\",\"bytesRateTr\":\"0.000000\",\"bytesRateTrBase\":\"806.782399\",\"bytesRateTtl\":\"22332.095049\",\"bytesSpct\":\"0\",\"bytesThr\":\"\",\"bytesTr\":\"0\",\"bytesTrBase\":\"242039\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptEgrTotal5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"pktsAvg\":\"10\",\"pktsBase\":\"0\",\"pktsCum\":\"346585592\",\"pktsLast\":\"0\",\"pktsMax\":\"27\",\"pktsMin\":\"0\",\"pktsPer\":\"287\",\"pktsRate\":\"1.025000\",\"pktsRateAvg\":\"1.025012\",\"pktsRateLast\":\"0.000000\",\"pktsRateMax\":\"2.700270\",\"pktsRateMin\":\"0.000000\",\"pktsRateSpct\":\"0\",\"pktsRateThr\":\"\",\"pktsRateTr\":\"0.000000\",\"pktsRateTrBase\":\"1.053318\",\"pktsRateTtl\":\"28.700330\",\"pktsSpct\":\"0\",\"pktsThr\":\"\",\"pktsTr\":\"0\",\"pktsTrBase\":\"316\",\"repIntvEnd\":\"2018-05-30T12:49:28.244-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.244-07:00\",\"status\":\"\",\"utilAvg\":\"0\",\"utilLast\":\"0\",\"utilMax\":\"0\",\"utilMin\":\"0\",\"utilSpct\":\"0\",\"utilThr\":\"\",\"utilTr\":\"0\",\"utilTrBase\":\"0\",\"utilTtl\":\"0\"}}},{\"eqptIngrTotal5min\":{\"attributes\":{\"bytesAvg\":\"3649\",\"bytesBase\":\"0\",\"bytesCum\":\"56557060354\",\"bytesLast\":\"1318\",\"bytesMax\":\"12477\",\"bytesMin\":\"0\",\"bytesPer\":\"102198\",\"bytesRate\":\"364.992857\",\"bytesRateAvg\":\"364.991836\",\"bytesRateLast\":\"131.800000\",\"bytesRateMax\":\"1247.700000\",\"bytesRateMin\":\"0.000000\",\"bytesRateSpct\":\"0\",\"bytesRateThr\":\"\",\"bytesRateTr\":\"0.000000\",\"bytesRateTrBase\":\"409.612848\",\"bytesRateTtl\":\"10219.771401\",\"bytesSpct\":\"0\",\"bytesThr\":\"\",\"bytesTr\":\"0\",\"bytesTrBase\":\"122885\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrTotal5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"pktsAvg\":\"5\",\"pktsBase\":\"0\",\"pktsCum\":\"302298061\",\"pktsLast\":\"9\",\"pktsMax\":\"15\",\"pktsMin\":\"0\",\"pktsPer\":\"160\",\"pktsRate\":\"0.571429\",\"pktsRateAvg\":\"0.571428\",\"pktsRateLast\":\"0.900000\",\"pktsRateMax\":\"1.500000\",\"pktsRateMin\":\"0.000000\",\"pktsRateSpct\":\"0\",\"pktsRateThr\":\"\",\"pktsRateTr\":\"0.000000\",\"pktsRateTrBase\":\"0.713329\",\"pktsRateTtl\":\"15.999980\",\"pktsSpct\":\"0\",\"pktsThr\":\"\",\"pktsTr\":\"0\",\"pktsTrBase\":\"214\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"utilAvg\":\"0\",\"utilLast\":\"0\",\"utilMax\":\"0\",\"utilMin\":\"0\",\"utilSpct\":\"0\",\"utilThr\":\"\",\"utilTr\":\"0\",\"utilTrBase\":\"0\",\"utilTtl\":\"0\"}}},{\"eqptEgrDropPkts5min\":{\"attributes\":{\"afdWredAvg\":\"0\",\"afdWredBase\":\"0\",\"afdWredCum\":\"0\",\"afdWredLast\":\"0\",\"afdWredMax\":\"0\",\"afdWredMin\":\"0\",\"afdWredPer\":\"0\",\"afdWredRate\":\"0.000000\",\"afdWredSpct\":\"0\",\"afdWredThr\":\"\",\"afdWredTr\":\"0\",\"afdWredTrBase\":\"0\",\"bufferAvg\":\"0\",\"bufferBase\":\"0\",\"bufferCum\":\"0\",\"bufferLast\":\"0\",\"bufferMax\":\"0\",\"bufferMin\":\"0\",\"bufferPer\":\"0\",\"bufferRate\":\"0.000000\",\"bufferSpct\":\"0\",\"bufferThr\":\"\",\"bufferTr\":\"0\",\"bufferTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptEgrDropPkts5min\",\"errorAvg\":\"0\",\"errorBase\":\"0\",\"errorCum\":\"0\",\"errorLast\":\"0\",\"errorMax\":\"0\",\"errorMin\":\"0\",\"errorPer\":\"0\",\"errorRate\":\"0.000000\",\"errorSpct\":\"0\",\"errorThr\":\"\",\"errorTr\":\"0\",\"errorTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.244-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.244-07:00\",\"status\":\"\"}}},{\"eqptEgrBytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptEgrBytes5min\",\"floodAvg\":\"0\",\"floodBase\":\"0\",\"floodCum\":\"0\",\"floodLast\":\"0\",\"floodMax\":\"0\",\"floodMin\":\"0\",\"floodPer\":\"0\",\"floodRate\":\"0.000000\",\"floodSpct\":\"0\",\"floodThr\":\"\",\"floodTr\":\"0\",\"floodTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"multicastAvg\":\"64\",\"multicastBase\":\"0\",\"multicastCum\":\"278551439\",\"multicastLast\":\"0\",\"multicastMax\":\"896\",\"multicastMin\":\"0\",\"multicastPer\":\"1792\",\"multicastRate\":\"6.400000\",\"multicastRateAvg\":\"6.400320\",\"multicastRateLast\":\"0.000000\",\"multicastRateMax\":\"89.608961\",\"multicastRateMin\":\"0.000000\",\"multicastRateSpct\":\"0\",\"multicastRateThr\":\"\",\"multicastRateTr\":\"0.000000\",\"multicastRateTrBase\":\"10.683305\",\"multicastRateTtl\":\"179.208961\",\"multicastSpct\":\"0\",\"multicastThr\":\"\",\"multicastTr\":\"0\",\"multicastTrBase\":\"3205\",\"repIntvEnd\":\"2018-05-30T12:49:28.244-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.244-07:00\",\"status\":\"\",\"unicastAvg\":\"7911\",\"unicastBase\":\"0\",\"unicastCum\":\"172484213872\",\"unicastLast\":\"0\",\"unicastMax\":\"17097\",\"unicastMin\":\"0\",\"unicastPer\":\"221528\",\"unicastRate\":\"791.171429\",\"unicastRateAvg\":\"791.174503\",\"unicastRateLast\":\"0.000000\",\"unicastRateMax\":\"1709.870987\",\"unicastRateMin\":\"0.000000\",\"unicastRateSpct\":\"0\",\"unicastRateThr\":\"\",\"unicastRateTr\":\"0.000000\",\"unicastRateTrBase\":\"796.099094\",\"unicastRateTtl\":\"22152.886088\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"238834\"}}},{\"eqptEgrPkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptEgrPkts5min\",\"floodAvg\":\"0\",\"floodBase\":\"0\",\"floodCum\":\"0\",\"floodLast\":\"0\",\"floodMax\":\"0\",\"floodMin\":\"0\",\"floodPer\":\"0\",\"floodRate\":\"0.000000\",\"floodSpct\":\"0\",\"floodThr\":\"\",\"floodTr\":\"0\",\"floodTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"multicastAvg\":\"0\",\"multicastBase\":\"0\",\"multicastCum\":\"3419798\",\"multicastLast\":\"0\",\"multicastMax\":\"4\",\"multicastMin\":\"0\",\"multicastPer\":\"8\",\"multicastRate\":\"0.028571\",\"multicastSpct\":\"0\",\"multicastThr\":\"\",\"multicastTr\":\"0\",\"multicastTrBase\":\"16\",\"repIntvEnd\":\"2018-05-30T12:49:28.244-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.244-07:00\",\"status\":\"\",\"unicastAvg\":\"9\",\"unicastBase\":\"0\",\"unicastCum\":\"343165794\",\"unicastLast\":\"0\",\"unicastMax\":\"24\",\"unicastMin\":\"0\",\"unicastPer\":\"279\",\"unicastRate\":\"0.996429\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"300\"}}},{\"eqptIngrDropPkts5min\":{\"attributes\":{\"bufferAvg\":\"0\",\"bufferBase\":\"0\",\"bufferCum\":\"0\",\"bufferLast\":\"0\",\"bufferMax\":\"0\",\"bufferMin\":\"0\",\"bufferPer\":\"0\",\"bufferRate\":\"0.000000\",\"bufferSpct\":\"0\",\"bufferThr\":\"\",\"bufferTr\":\"0\",\"bufferTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrDropPkts5min\",\"errorAvg\":\"0\",\"errorBase\":\"0\",\"errorCum\":\"0\",\"errorLast\":\"0\",\"errorMax\":\"0\",\"errorMin\":\"0\",\"errorPer\":\"0\",\"errorRate\":\"0.000000\",\"errorSpct\":\"0\",\"errorThr\":\"\",\"errorTr\":\"0\",\"errorTrBase\":\"0\",\"forwardingAvg\":\"0\",\"forwardingBase\":\"0\",\"forwardingCum\":\"0\",\"forwardingLast\":\"0\",\"forwardingMax\":\"0\",\"forwardingMin\":\"0\",\"forwardingPer\":\"0\",\"forwardingRate\":\"0.000000\",\"forwardingSpct\":\"0\",\"forwardingThr\":\"\",\"forwardingTr\":\"0\",\"forwardingTrBase\":\"0\",\"lastCollOffset\":\"280\",\"lbAvg\":\"0\",\"lbBase\":\"0\",\"lbCum\":\"0\",\"lbLast\":\"0\",\"lbMax\":\"0\",\"lbMin\":\"0\",\"lbPer\":\"0\",\"lbRate\":\"0.000000\",\"lbSpct\":\"0\",\"lbThr\":\"\",\"lbTr\":\"0\",\"lbTrBase\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\"}}},{\"eqptIngrUnkBytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrUnkBytes5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"unclassifiedAvg\":\"0\",\"unclassifiedBase\":\"0\",\"unclassifiedCum\":\"0\",\"unclassifiedLast\":\"0\",\"unclassifiedMax\":\"0\",\"unclassifiedMin\":\"0\",\"unclassifiedPer\":\"0\",\"unclassifiedRate\":\"0.000000\",\"unclassifiedSpct\":\"0\",\"unclassifiedThr\":\"\",\"unclassifiedTr\":\"0\",\"unclassifiedTrBase\":\"0\",\"unicastAvg\":\"0\",\"unicastBase\":\"0\",\"unicastCum\":\"0\",\"unicastLast\":\"0\",\"unicastMax\":\"0\",\"unicastMin\":\"0\",\"unicastPer\":\"0\",\"unicastRate\":\"0.000000\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"0\"}}},{\"eqptIngrBytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrBytes5min\",\"floodAvg\":\"47\",\"floodBase\":\"0\",\"floodCum\":\"39593148\",\"floodLast\":\"1318\",\"floodMax\":\"1318\",\"floodMin\":\"0\",\"floodPer\":\"1318\",\"floodRate\":\"4.707143\",\"floodSpct\":\"0\",\"floodThr\":\"\",\"floodTr\":\"0\",\"floodTrBase\":\"9052\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"multicastAvg\":\"0\",\"multicastBase\":\"0\",\"multicastCum\":\"0\",\"multicastLast\":\"0\",\"multicastMax\":\"0\",\"multicastMin\":\"0\",\"multicastPer\":\"0\",\"multicastRate\":\"0.000000\",\"multicastRateAvg\":\"0.000000\",\"multicastRateLast\":\"0.000000\",\"multicastRateMax\":\"0.000000\",\"multicastRateMin\":\"0.000000\",\"multicastRateSpct\":\"0\",\"multicastRateThr\":\"\",\"multicastRateTr\":\"0.000000\",\"multicastRateTrBase\":\"0.000000\",\"multicastRateTtl\":\"0.000000\",\"multicastSpct\":\"0\",\"multicastThr\":\"\",\"multicastTr\":\"0\",\"multicastTrBase\":\"0\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"unicastAvg\":\"3602\",\"unicastBase\":\"0\",\"unicastCum\":\"56517467206\",\"unicastLast\":\"0\",\"unicastMax\":\"12477\",\"unicastMin\":\"0\",\"unicastPer\":\"100880\",\"unicastRate\":\"360.285714\",\"unicastRateAvg\":\"360.284693\",\"unicastRateLast\":\"0.000000\",\"unicastRateMax\":\"1247.700000\",\"unicastRateMin\":\"0.000000\",\"unicastRateSpct\":\"0\",\"unicastRateThr\":\"\",\"unicastRateTr\":\"0.000000\",\"unicastRateTrBase\":\"379.439515\",\"unicastRateTtl\":\"10087.971401\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"113833\"}}},{\"eqptIngrUnkPkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrUnkPkts5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"unclassifiedAvg\":\"0\",\"unclassifiedBase\":\"0\",\"unclassifiedCum\":\"0\",\"unclassifiedLast\":\"0\",\"unclassifiedMax\":\"0\",\"unclassifiedMin\":\"0\",\"unclassifiedPer\":\"0\",\"unclassifiedRate\":\"0.000000\",\"unclassifiedSpct\":\"0\",\"unclassifiedThr\":\"\",\"unclassifiedTr\":\"0\",\"unclassifiedTrBase\":\"0\",\"unicastAvg\":\"0\",\"unicastBase\":\"0\",\"unicastCum\":\"0\",\"unicastLast\":\"0\",\"unicastMax\":\"0\",\"unicastMin\":\"0\",\"unicastPer\":\"0\",\"unicastRate\":\"0.000000\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"0\"}}},{\"eqptIngrPkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrPkts5min\",\"floodAvg\":\"0\",\"floodBase\":\"0\",\"floodCum\":\"213604\",\"floodLast\":\"9\",\"floodMax\":\"9\",\"floodMin\":\"0\",\"floodPer\":\"9\",\"floodRate\":\"0.032143\",\"floodSpct\":\"0\",\"floodThr\":\"\",\"floodTr\":\"0\",\"floodTrBase\":\"50\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"multicastAvg\":\"0\",\"multicastBase\":\"0\",\"multicastCum\":\"0\",\"multicastLast\":\"0\",\"multicastMax\":\"0\",\"multicastMin\":\"0\",\"multicastPer\":\"0\",\"multicastRate\":\"0.000000\",\"multicastSpct\":\"0\",\"multicastThr\":\"\",\"multicastTr\":\"0\",\"multicastTrBase\":\"0\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"unicastAvg\":\"5\",\"unicastBase\":\"0\",\"unicastCum\":\"302084457\",\"unicastLast\":\"0\",\"unicastMax\":\"15\",\"unicastMin\":\"0\",\"unicastPer\":\"151\",\"unicastRate\":\"0.539286\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"164\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-8\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"8\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:04:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:59:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-7\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"7\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:09:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:04:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-6\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:14:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:09:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-5\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:19:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:14:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-4\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"4\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:24:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:19:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-3\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"3\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:29:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:24:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-2\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:34:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:29:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-1\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"1\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:39:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:34:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-0\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"0\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:44:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:39:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-11\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"11\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:49:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:44:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-10\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"10\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:54:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:49:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-9\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"9\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:59:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:54:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-8\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"8\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:04:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:59:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-7\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"7\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:09:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:04:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-6\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:14:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:09:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-5\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:19:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:14:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-4\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"4\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:24:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:19:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-3\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"3\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:29:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:24:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-2\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:34:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:29:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-1\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"1\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:39:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:34:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-0\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"0\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:44:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:39:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-11\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"11\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:49:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:44:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-10\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"10\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:54:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:49:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-9\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"9\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:59:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:54:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-8\",\"index\":\"8\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:04:48.248-07:00\",\"repIntvStart\":\"2018-05-30T11:59:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-7\",\"index\":\"7\",\"lastCollOffset\":\"299\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:09:48.247-07:00\",\"repIntvStart\":\"2018-05-30T12:04:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-6\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:14:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:09:48.247-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-5\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:19:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:14:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-4\",\"index\":\"4\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:24:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:19:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-3\",\"index\":\"3\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:29:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:24:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-2\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:34:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:29:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}}]}"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\n\n process\n    -------\n      - instance #0 [OK]\n      - instance DataDog/dd-agent#1 [WARNING]\n          Warning: Process 16039 disappeared while scanning\n          Warning: Process 16177 disappeared while scanning\n          Warning: Process 16178 disappeared while scanning\n          Warning: Process 16193 disappeared while scanning\n          Warning: Process 16194 disappeared while scanning\n          Warning: Process 16198 disappeared while scanning\n\n```\n      Warning: Process 15830 disappeared while scanning\n      Warning: Process 15844 disappeared while scanning\n  - instance DataDog/dd-agent#2 [OK]\n  - instance DataDog/dd-agent#3 [OK]\n  - instance DataDog/dd-agent#4 [OK]\n  - instance DataDog/dd-agent#5 [OK]\n  - instance DataDog/dd-agent#6 [OK]\n  - instance DataDog/dd-agent#7 [OK]\n  - instance DataDog/dd-agent#8 [OK]\n  - instance DataDog/dd-agent#9 [OK]\n  - Collected 43 metrics, 0 events & 11 service checks\n```\n\nIs is perfectly normal for postgresql to start and stop processes, and I see no reason why datadog would have to complain about that.\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/tooling/manifest_validator/v2/validator.py\n## context:\n#  (C) Datadog, Inc. 2020-present\n#  All rights reserved\n#  Licensed under a 3-clause BSD style license (see LICENSE)\nimport json\nimport os\n\nimport jsonschema\nimport requests\n\nimport datadog_checks.dev.tooling.manifest_validator.common.validator as common\nfrom datadog_checks.dev.tooling.manifest_validator.common.validator import BaseManifestValidator\n\nfrom ...constants import get_root\nfrom ..constants import V2\n\nMETRIC_TO_CHECK_EXCLUDE_LIST = {\n    'openstack.controller',  # \"Artificial\" metric, shouldn't be listed in metadata file.\n    'riakcs.bucket_list_pool.workers',  # RiakCS 2.1 metric, but metadata.csv lists RiakCS 2.0 metrics only.\n}\n\n\nclass DisplayOnPublicValidator(BaseManifestValidator):\n    def validate(self, check_name, decoded, fix):\n        correct_is_public = True\n        path = '/display_on_public_website'\n        is_public = decoded.get_path(path)\n        if not isinstance(is_public, bool):\n            output = '  required boolean: display_on_public_website'\n\n            if fix:\n                decoded.set_path(path, correct_is_public)\n                self.fix(output, f'  new `display_on_public_website`: {correct_is_public}')\n            else:\n                self.fail(output)\n\n\nclass SchemaValidator(BaseManifestValidator):\n    def validate(self, check_name, decoded, fix):\n        if not self.should_validate():\n            return\n\n        # Get API and APP keys which are needed to call Datadog API\n        org_name = self.ctx.obj.get('org')\n        if not org_name:\n            self.fail('No `org` has been set')\n            return\n\n        if org_name not in self.ctx.obj.get('orgs'):\n            self.fail(f'Selected org {org_name} is not in `orgs`')\n            return\n\n        org = self.ctx.obj['orgs'][org_name]\n\n        dd_url = org.get('dd_url')\n        if not dd_url:\n            self.fail(f'No `dd_url` has been set for org `{org_name}`')\n            return\n\n        url = f\"{dd_url}/api/beta/apps/manifest/validate\"\n\n        # prep for upload\n        payload = {\"data\": {\"type\": \"app_manifest\", \"attributes\": decoded}}\n\n        try:\n            payload_json = json.dumps(payload)\n            r = requests.post(url, data=payload_json)\n\n            if r.status_code == 400:\n                # parse the errors\n                errors = \"\\n\".join(r.json()[\"errors\"])\n                message = f\"Error validating manifest schema:\\n{errors}\"\n                self.fail(message)\n            else:\n                r.raise_for_status()\n        except Exception as e:\n            self.fail(str(e))\n\n\nclass MediaGalleryValidator(BaseManifestValidator):\n    VIDEO_MEDIA_ATTRIBUTES = ('media_type', 'caption', 'image_url', 'vimeo_id')\n    IMAGE_MEDIA_ATTRIBUTES = ('media_type', 'caption', 'image_url')\n    MEDIA_PATH = '/tile/media'\n    MAX_MEDIA_ELEMENTS = 8\n\n    IMAGE_SCHEMA = jsonschema.Draft7Validator(\n        {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"title\": \"V2 Manifest Image Media Element Validator\",\n            \"description\": \"Defines the various components of an image media element\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"media_type\": {\n                    \"description\": \"The type of media (image or video)\",\n                    \"type\": \"string\",\n                    \"enum\": [\"image\"],\n                },\n                \"caption\": {\n                    \"description\": \"The caption for this image media\",\n                    \"type\": \"string\",\n                },\n                \"image_url\": {\n                    \"description\": \"The relative path to the image from integration root\",\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": [\"media_type\", \"caption\", \"image_url\"],\n        }\n    )\n    VIDEO_SCHEMA = jsonschema.Draft7Validator(\n        {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"title\": \"V2 Manifest Video Media Element Validator\",\n            \"description\": \"Defines the various components of a video media element\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"media_type\": {\n                    \"description\": \"The type of media (image or video)\",\n                    \"type\": \"string\",\n                    \"enum\": [\"video\"],\n                },\n                \"caption\": {\n                    \"description\": \"The caption for this video media\",\n                    \"type\": \"string\",\n                },\n                \"image_url\": {\n                    \"description\": \"The relative path to the image from integration root\",\n                    \"type\": \"string\",\n                },\n                \"vimeo_id\": {\n                    \"description\": \"The vimeo id (9 digits) corresponding to this video\",\n                    \"type\": \"integer\",\n                },\n            },\n            \"required\": [\"media_type\", \"caption\", \"image_url\", \"vimeo_id\"],\n        }\n    )\n\n    def validate(self, check_name, decoded, fix):\n        if not self.should_validate():\n            return\n\n        media_array = decoded.get_path(self.MEDIA_PATH)\n        # Skip validations if no media is included in the manifest\n        if not media_array:\n            return\n\n        # Length must be between 1-8\n        num_media_elements = len(media_array)\n        if num_media_elements > self.MAX_MEDIA_ELEMENTS:\n            output = f'  The maximum number of media elements is 8, there are currently {num_media_elements}.'\n            self.fail(output)\n\n        # Validate each media object\n        video_count = 0\n        for i, media in enumerate(media_array, 1):\n            # Ensure each media contains valid keys\n            try:\n                media_type = media['media_type']\n                if media_type == 'image':\n                    attribute_schema = self.IMAGE_SCHEMA\n                elif media_type == 'video':\n                    attribute_schema = self.VIDEO_SCHEMA\n                else:\n                    output = f'  Media #{i} `media_type` attribute must be \"video\" or \"image\"'\n                    self.fail(output)\n                    continue\n\n                # Validate with the correct schema\n                errors = sorted(attribute_schema.iter_errors(media), key=lambda e: e.path)\n                if errors:\n                    for error in errors:\n                        self.fail(f'  Media #{i}: {error.message}')\n                    continue\n            except KeyError:\n                output = f'  Media #{i}: \\'media_type\\' is a required property'\n                self.fail(output)\n                continue\n\n            caption = media['caption']\n            image_url = media['image_url']\n\n            # Image_url must lead to png or jpg\n            if '.png' not in image_url.lower() and '.jpg' not in image_url.lower():\n                output = f'  The filetype for media #{i} must be either `.jpg` or `.png`.'\n                self.fail(output)\n\n            # Caption must be smaller than 300 chars\n            if len(caption) > 300:\n                output = f'  The `caption` for media #{i} cannot contain more than 300 characters.'\n                self.fail(output)\n\n            # Keep track of video count (only 1 is allowed)\n            if media_type == 'video':\n                video_count += 1\n\n            try:\n                # Check if file is found in directory\n                cur_path = os.path.join(get_root(), check_name)\n                file_size = os.path.getsize(f'{cur_path}/{image_url}')\n                if file_size > 1000000:  # If file size greater than 1 megabyte, fail\n                    output = f'  File size for media #{i} must be smaller than 1 mb, currently {file_size} bytes.'\n                    self.fail(output)\n            except OSError:\n                output = f'  File not found for media #{i} at `{image_url}`, please fix the path.'\n                self.fail(output)\n\n        if video_count > 1:\n            output = f'  There cannot be more than 1 video in the list of media, currently there are {video_count}'\n            self.fail(output)\n\n\ndef get_v2_validators(ctx, is_extras, is_marketplace):\n    return [\n        common.MaintainerValidator(\n            is_extras, is_marketplace, check_in_extras=False, check_in_marketplace=False, version=V2\n        ),\n        common.MetricsMetadataValidator(version=V2),\n        common.MetricToCheckValidator(version=V2),\n        common.ImmutableAttributesValidator(version=V2),\n        common.LogsCategoryValidator(version=V2),\n        DisplayOnPublicValidator(version=V2),\n        MediaGalleryValidator(is_marketplace, is_extras, version=V2),\n        # keep SchemaValidator last, and avoid running this validation if errors already found\n        SchemaValidator(ctx=ctx, version=V2, skip_if_errors=True),\n    ]\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkubelet/conftest.py\n## context:\nimport sys\n\n\ndef get_conn_info():\n    return {'url': 'http://127.0.0.1:10255'}\n\n\nkubeutil = type(sys)('kubeutil')\nkubeutil.get_connection_info = get_conn_info\nsys.modules['kubeutil'] = kubeutil\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\n\n process\n    -------\n      - instance #0 [OK]\n      - instance DataDog/dd-agent#1 [WARNING]\n          Warning: Process 16039 disappeared while scanning\n          Warning: Process 16177 disappeared while scanning\n          Warning: Process 16178 disappeared while scanning\n          Warning: Process 16193 disappeared while scanning\n          Warning: Process 16194 disappeared while scanning\n          Warning: Process 16198 disappeared while scanning\n\n```\n      Warning: Process 15830 disappeared while scanning\n      Warning: Process 15844 disappeared while scanning\n  - instance DataDog/dd-agent#2 [OK]\n  - instance DataDog/dd-agent#3 [OK]\n  - instance DataDog/dd-agent#4 [OK]\n  - instance DataDog/dd-agent#5 [OK]\n  - instance DataDog/dd-agent#6 [OK]\n  - instance DataDog/dd-agent#7 [OK]\n  - instance DataDog/dd-agent#8 [OK]\n  - instance DataDog/dd-agent#9 [OK]\n  - Collected 43 metrics, 0 events & 11 service checks\n```\n\nIs is perfectly normal for postgresql to start and stop processes, and I see no reason why datadog would have to complain about that.\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/tooling/templates/configuration/init_config.yaml\n## context:\nname: init_config\ndescription: |\n  All options defined here are available to all instances.\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nhyperv/manifest.json\n## context:\n{\n  \"display_name\": \"HyperV\",\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"1.0.0\",\n  \"name\": \"hyperv\",\n  \"metric_prefix\": \"hyperv.\",\n  \"metric_to_check\": \"hyperv.hypervisor_logical_processor.total_run_time\",\n  \"creates_events\": false,\n  \"short_description\": \"Monitor Microsoft's Hyper-V virtualization technology.\",\n  \"guid\": \"412a75c1-b752-4b20-b046-4195dfaaf6ec\",\n  \"support\": \"core\",\n  \"supported_os\": [\n    \"windows\"\n  ],\n  \"public_title\": \"Datadog-HyperV Integration\",\n  \"categories\": [\n    \"azure\",\n    \"cloud\",\n    \"monitoring\",\n    \"os & system\"\n  ],\n  \"type\": \"check\",\n  \"is_public\": true,\n  \"integration_id\": \"hyper-v\",\n  \"assets\": {\n    \"configuration\": {\n      \"spec\": \"assets/configuration/spec.yaml\"\n    },\n    \"monitors\": {},\n    \"dashboards\": {\n      \"hyper-v\": \"assets/dashboards/overview.json\"\n    },\n    \"service_checks\": \"assets/service_checks.json\",\n    \"logs\": {},\n    \"metrics_metadata\": \"metadata.csv\"\n  }\n}\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\n\n process\n    -------\n      - instance #0 [OK]\n      - instance DataDog/dd-agent#1 [WARNING]\n          Warning: Process 16039 disappeared while scanning\n          Warning: Process 16177 disappeared while scanning\n          Warning: Process 16178 disappeared while scanning\n          Warning: Process 16193 disappeared while scanning\n          Warning: Process 16194 disappeared while scanning\n          Warning: Process 16198 disappeared while scanning\n\n```\n      Warning: Process 15830 disappeared while scanning\n      Warning: Process 15844 disappeared while scanning\n  - instance DataDog/dd-agent#2 [OK]\n  - instance DataDog/dd-agent#3 [OK]\n  - instance DataDog/dd-agent#4 [OK]\n  - instance DataDog/dd-agent#5 [OK]\n  - instance DataDog/dd-agent#6 [OK]\n  - instance DataDog/dd-agent#7 [OK]\n  - instance DataDog/dd-agent#8 [OK]\n  - instance DataDog/dd-agent#9 [OK]\n  - Collected 43 metrics, 0 events & 11 service checks\n```\n\nIs is perfectly normal for postgresql to start and stop processes, and I see no reason why datadog would have to complain about that.\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nredisdb/tests/README.md\n## context:\n# Tests\n\n## Testing Guidelines\n\nThis check has 2 test matrix, one detailing the test type:\n\n* unit tests (no need for a Redis instance running)\n* integration tests (a Redis instance must run locally)\n\nanother matrix defines the Redis versions to be used with integration tests:\n\n* redis 3.2\n* redis 4.0\n\nThe first matrix is handled by pytest using `mark`: tests that need a running redis instance must be decorated like this:\n\n```python\n@pytest.mark.integration\ndef test_something_requiring_redis_running():\n  pass\n```\n\nRunning the tests with `pytest -m\"integration\"` will run *only* integration tests while `pytest -m\"not integration\"` will run whatever was not marked as an integration test.\n\nThe second matrix is defined with `tox` like this:\n\n```ini\nenvlist = unit, redis{32,40}, flake8\n\n...\n\n[testenv:redis32]\nsetenv = REDIS_VERSION=3.2\n...\n\n[testenv:redis40]\nsetenv = REDIS_VERSION=4.0\n...\n```\n\n### Integration tests\n\nRedis instances are orchestrated with `docker-compose` which is now a dependency\nto run the integration tests. It's `pytest` responsible to start/stop/dispose an\ninstance using the `fixture` concept.\n\nThis is how a fixture orchestrating Redis instances looks like:\n\n```python\n@pytest.fixture(scope=\"session\")\ndef redis_auth():\n    # omitted docker-compose invokation setup here ...\n    subprocess.check_call(args + [\"up\", \"-d\"], env=env)\n    yield\n    subprocess.check_call(args + [\"down\"], env=env)\n```\n\nthe basic concept is that `docker-compose up` is run right after the fixture\nis made available to the test function (it blocks on `yield`). When the test\nhas done, `yield` unblocks and `docker-compose down` is called. Notice the\n`scope=session` argument passed to the fixture decorator, it allows the\n`yield` to block only once for **all the tests** , unblocking only after the\nlast test: this is useful to avoid having `docker-compose up` and `down`\ncalled at every test. One caveat with this approach is that if you have data\nin Redis, some test might operate on a dirty database - this is not an issue\nin this case but something to keep in mind when using `scope=session`.\n\n### Running the tests locally\n\n**Note**: you need `docker` and `docker-compose` to be installed on your system\nin order to run the tests locally.\n\nDuring development, tests can be locally run with tox, same as in the CI. In the case of Redis, there might be no need to test the whole matrix all the times, so for example if you want to run only the unit/mocked tests:\n\n```shell\ntox -e unit\n```\n\nif you want to run integration tests but against one Redis version only:\n\n```shell\ntox -e redis40\n```\n\ntox is great because it creates a virtual Python environment for each tox env but if you don't need this level of isolation you can speed up the development iterations using `pytest` directly (which is what tox does under the hood):\n\n```shell\nREDIS_VERSION=4.0 pytest\n```\n\nor if you don't want to run integration tests:\n\n```shell\npytest -m\"not integration\"\n```\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nhyperv/manifest.json\n## context:\n{\n  \"display_name\": \"HyperV\",\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"1.0.0\",\n  \"name\": \"hyperv\",\n  \"metric_prefix\": \"hyperv.\",\n  \"metric_to_check\": \"hyperv.hypervisor_logical_processor.total_run_time\",\n  \"creates_events\": false,\n  \"short_description\": \"Monitor Microsoft's Hyper-V virtualization technology.\",\n  \"guid\": \"412a75c1-b752-4b20-b046-4195dfaaf6ec\",\n  \"support\": \"core\",\n  \"supported_os\": [\n    \"windows\"\n  ],\n  \"public_title\": \"Datadog-HyperV Integration\",\n  \"categories\": [\n    \"azure\",\n    \"cloud\",\n    \"monitoring\",\n    \"os & system\"\n  ],\n  \"type\": \"check\",\n  \"is_public\": true,\n  \"integration_id\": \"hyper-v\",\n  \"assets\": {\n    \"configuration\": {\n      \"spec\": \"assets/configuration/spec.yaml\"\n    },\n    \"monitors\": {},\n    \"dashboards\": {\n      \"hyper-v\": \"assets/dashboards/overview.json\"\n    },\n    \"service_checks\": \"assets/service_checks.json\",\n    \"logs\": {},\n    \"metrics_metadata\": \"metadata.csv\"\n  }\n}\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\n\n process\n    -------\n      - instance #0 [OK]\n      - instance DataDog/dd-agent#1 [WARNING]\n          Warning: Process 16039 disappeared while scanning\n          Warning: Process 16177 disappeared while scanning\n          Warning: Process 16178 disappeared while scanning\n          Warning: Process 16193 disappeared while scanning\n          Warning: Process 16194 disappeared while scanning\n          Warning: Process 16198 disappeared while scanning\n\n```\n      Warning: Process 15830 disappeared while scanning\n      Warning: Process 15844 disappeared while scanning\n  - instance DataDog/dd-agent#2 [OK]\n  - instance DataDog/dd-agent#3 [OK]\n  - instance DataDog/dd-agent#4 [OK]\n  - instance DataDog/dd-agent#5 [OK]\n  - instance DataDog/dd-agent#6 [OK]\n  - instance DataDog/dd-agent#7 [OK]\n  - instance DataDog/dd-agent#8 [OK]\n  - instance DataDog/dd-agent#9 [OK]\n  - Collected 43 metrics, 0 events & 11 service checks\n```\n\nIs is perfectly normal for postgresql to start and stop processes, and I see no reason why datadog would have to complain about that.\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/tooling/manifest_validator/v2/validator.py\n## context:\n#  (C) Datadog, Inc. 2020-present\n#  All rights reserved\n#  Licensed under a 3-clause BSD style license (see LICENSE)\nimport json\nimport os\n\nimport jsonschema\nimport requests\n\nimport datadog_checks.dev.tooling.manifest_validator.common.validator as common\nfrom datadog_checks.dev.tooling.manifest_validator.common.validator import BaseManifestValidator\n\nfrom ...constants import get_root\nfrom ..constants import V2\n\nMETRIC_TO_CHECK_EXCLUDE_LIST = {\n    'openstack.controller',  # \"Artificial\" metric, shouldn't be listed in metadata file.\n    'riakcs.bucket_list_pool.workers',  # RiakCS 2.1 metric, but metadata.csv lists RiakCS 2.0 metrics only.\n}\n\n\nclass DisplayOnPublicValidator(BaseManifestValidator):\n    def validate(self, check_name, decoded, fix):\n        correct_is_public = True\n        path = '/display_on_public_website'\n        is_public = decoded.get_path(path)\n        if not isinstance(is_public, bool):\n            output = '  required boolean: display_on_public_website'\n\n            if fix:\n                decoded.set_path(path, correct_is_public)\n                self.fix(output, f'  new `display_on_public_website`: {correct_is_public}')\n            else:\n                self.fail(output)\n\n\nclass SchemaValidator(BaseManifestValidator):\n    def validate(self, check_name, decoded, fix):\n        if not self.should_validate():\n            return\n\n        # Get API and APP keys which are needed to call Datadog API\n        org_name = self.ctx.obj.get('org')\n        if not org_name:\n            self.fail('No `org` has been set')\n            return\n\n        if org_name not in self.ctx.obj.get('orgs'):\n            self.fail(f'Selected org {org_name} is not in `orgs`')\n            return\n\n        org = self.ctx.obj['orgs'][org_name]\n\n        dd_url = org.get('dd_url')\n        if not dd_url:\n            self.fail(f'No `dd_url` has been set for org `{org_name}`')\n            return\n\n        url = f\"{dd_url}/api/beta/apps/manifest/validate\"\n\n        # prep for upload\n        payload = {\"data\": {\"type\": \"app_manifest\", \"attributes\": decoded}}\n\n        try:\n            payload_json = json.dumps(payload)\n            r = requests.post(url, data=payload_json)\n\n            if r.status_code == 400:\n                # parse the errors\n                errors = \"\\n\".join(r.json()[\"errors\"])\n                message = f\"Error validating manifest schema:\\n{errors}\"\n                self.fail(message)\n            else:\n                r.raise_for_status()\n        except Exception as e:\n            self.fail(str(e))\n\n\nclass MediaGalleryValidator(BaseManifestValidator):\n    VIDEO_MEDIA_ATTRIBUTES = ('media_type', 'caption', 'image_url', 'vimeo_id')\n    IMAGE_MEDIA_ATTRIBUTES = ('media_type', 'caption', 'image_url')\n    MEDIA_PATH = '/tile/media'\n    MAX_MEDIA_ELEMENTS = 8\n\n    IMAGE_SCHEMA = jsonschema.Draft7Validator(\n        {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"title\": \"V2 Manifest Image Media Element Validator\",\n            \"description\": \"Defines the various components of an image media element\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"media_type\": {\n                    \"description\": \"The type of media (image or video)\",\n                    \"type\": \"string\",\n                    \"enum\": [\"image\"],\n                },\n                \"caption\": {\n                    \"description\": \"The caption for this image media\",\n                    \"type\": \"string\",\n                },\n                \"image_url\": {\n                    \"description\": \"The relative path to the image from integration root\",\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": [\"media_type\", \"caption\", \"image_url\"],\n        }\n    )\n    VIDEO_SCHEMA = jsonschema.Draft7Validator(\n        {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"title\": \"V2 Manifest Video Media Element Validator\",\n            \"description\": \"Defines the various components of a video media element\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"media_type\": {\n                    \"description\": \"The type of media (image or video)\",\n                    \"type\": \"string\",\n                    \"enum\": [\"video\"],\n                },\n                \"caption\": {\n                    \"description\": \"The caption for this video media\",\n                    \"type\": \"string\",\n                },\n                \"image_url\": {\n                    \"description\": \"The relative path to the image from integration root\",\n                    \"type\": \"string\",\n                },\n                \"vimeo_id\": {\n                    \"description\": \"The vimeo id (9 digits) corresponding to this video\",\n                    \"type\": \"integer\",\n                },\n            },\n            \"required\": [\"media_type\", \"caption\", \"image_url\", \"vimeo_id\"],\n        }\n    )\n\n    def validate(self, check_name, decoded, fix):\n        if not self.should_validate():\n            return\n\n        media_array = decoded.get_path(self.MEDIA_PATH)\n        # Skip validations if no media is included in the manifest\n        if not media_array:\n            return\n\n        # Length must be between 1-8\n        num_media_elements = len(media_array)\n        if num_media_elements > self.MAX_MEDIA_ELEMENTS:\n            output = f'  The maximum number of media elements is 8, there are currently {num_media_elements}.'\n            self.fail(output)\n\n        # Validate each media object\n        video_count = 0\n        for i, media in enumerate(media_array, 1):\n            # Ensure each media contains valid keys\n            try:\n                media_type = media['media_type']\n                if media_type == 'image':\n                    attribute_schema = self.IMAGE_SCHEMA\n                elif media_type == 'video':\n                    attribute_schema = self.VIDEO_SCHEMA\n                else:\n                    output = f'  Media #{i} `media_type` attribute must be \"video\" or \"image\"'\n                    self.fail(output)\n                    continue\n\n                # Validate with the correct schema\n                errors = sorted(attribute_schema.iter_errors(media), key=lambda e: e.path)\n                if errors:\n                    for error in errors:\n                        self.fail(f'  Media #{i}: {error.message}')\n                    continue\n            except KeyError:\n                output = f'  Media #{i}: \\'media_type\\' is a required property'\n                self.fail(output)\n                continue\n\n            caption = media['caption']\n            image_url = media['image_url']\n\n            # Image_url must lead to png or jpg\n            if '.png' not in image_url.lower() and '.jpg' not in image_url.lower():\n                output = f'  The filetype for media #{i} must be either `.jpg` or `.png`.'\n                self.fail(output)\n\n            # Caption must be smaller than 300 chars\n            if len(caption) > 300:\n                output = f'  The `caption` for media #{i} cannot contain more than 300 characters.'\n                self.fail(output)\n\n            # Keep track of video count (only 1 is allowed)\n            if media_type == 'video':\n                video_count += 1\n\n            try:\n                # Check if file is found in directory\n                cur_path = os.path.join(get_root(), check_name)\n                file_size = os.path.getsize(f'{cur_path}/{image_url}')\n                if file_size > 1000000:  # If file size greater than 1 megabyte, fail\n                    output = f'  File size for media #{i} must be smaller than 1 mb, currently {file_size} bytes.'\n                    self.fail(output)\n            except OSError:\n                output = f'  File not found for media #{i} at `{image_url}`, please fix the path.'\n                self.fail(output)\n\n        if video_count > 1:\n            output = f'  There cannot be more than 1 video in the list of media, currently there are {video_count}'\n            self.fail(output)\n\n\ndef get_v2_validators(ctx, is_extras, is_marketplace):\n    return [\n        common.MaintainerValidator(\n            is_extras, is_marketplace, check_in_extras=False, check_in_marketplace=False, version=V2\n        ),\n        common.MetricsMetadataValidator(version=V2),\n        common.MetricToCheckValidator(version=V2),\n        common.ImmutableAttributesValidator(version=V2),\n        common.LogsCategoryValidator(version=V2),\n        DisplayOnPublicValidator(version=V2),\n        MediaGalleryValidator(is_marketplace, is_extras, version=V2),\n        # keep SchemaValidator last, and avoid running this validation if errors already found\n        SchemaValidator(ctx=ctx, version=V2, skip_if_errors=True),\n    ]\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nredisdb/tests/README.md\n## context:\n# Tests\n\n## Testing Guidelines\n\nThis check has 2 test matrix, one detailing the test type:\n\n* unit tests (no need for a Redis instance running)\n* integration tests (a Redis instance must run locally)\n\nanother matrix defines the Redis versions to be used with integration tests:\n\n* redis 3.2\n* redis 4.0\n\nThe first matrix is handled by pytest using `mark`: tests that need a running redis instance must be decorated like this:\n\n```python\n@pytest.mark.integration\ndef test_something_requiring_redis_running():\n  pass\n```\n\nRunning the tests with `pytest -m\"integration\"` will run *only* integration tests while `pytest -m\"not integration\"` will run whatever was not marked as an integration test.\n\nThe second matrix is defined with `tox` like this:\n\n```ini\nenvlist = unit, redis{32,40}, flake8\n\n...\n\n[testenv:redis32]\nsetenv = REDIS_VERSION=3.2\n...\n\n[testenv:redis40]\nsetenv = REDIS_VERSION=4.0\n...\n```\n\n### Integration tests\n\nRedis instances are orchestrated with `docker-compose` which is now a dependency\nto run the integration tests. It's `pytest` responsible to start/stop/dispose an\ninstance using the `fixture` concept.\n\nThis is how a fixture orchestrating Redis instances looks like:\n\n```python\n@pytest.fixture(scope=\"session\")\ndef redis_auth():\n    # omitted docker-compose invokation setup here ...\n    subprocess.check_call(args + [\"up\", \"-d\"], env=env)\n    yield\n    subprocess.check_call(args + [\"down\"], env=env)\n```\n\nthe basic concept is that `docker-compose up` is run right after the fixture\nis made available to the test function (it blocks on `yield`). When the test\nhas done, `yield` unblocks and `docker-compose down` is called. Notice the\n`scope=session` argument passed to the fixture decorator, it allows the\n`yield` to block only once for **all the tests** , unblocking only after the\nlast test: this is useful to avoid having `docker-compose up` and `down`\ncalled at every test. One caveat with this approach is that if you have data\nin Redis, some test might operate on a dirty database - this is not an issue\nin this case but something to keep in mind when using `scope=session`.\n\n### Running the tests locally\n\n**Note**: you need `docker` and `docker-compose` to be installed on your system\nin order to run the tests locally.\n\nDuring development, tests can be locally run with tox, same as in the CI. In the case of Redis, there might be no need to test the whole matrix all the times, so for example if you want to run only the unit/mocked tests:\n\n```shell\ntox -e unit\n```\n\nif you want to run integration tests but against one Redis version only:\n\n```shell\ntox -e redis40\n```\n\ntox is great because it creates a virtual Python environment for each tox env but if you don't need this level of isolation you can speed up the development iterations using `pytest` directly (which is what tox does under the hood):\n\n```shell\nREDIS_VERSION=4.0 pytest\n```\n\nor if you don't want to run integration tests:\n\n```shell\npytest -m\"not integration\"\n```\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\nprocess monitor throws warnings on postgresql:  Warning: Process 123 disappeared while scanning\n\n process\n    -------\n      - instance #0 [OK]\n      - instance DataDog/dd-agent#1 [WARNING]\n          Warning: Process 16039 disappeared while scanning\n          Warning: Process 16177 disappeared while scanning\n          Warning: Process 16178 disappeared while scanning\n          Warning: Process 16193 disappeared while scanning\n          Warning: Process 16194 disappeared while scanning\n          Warning: Process 16198 disappeared while scanning\n\n```\n      Warning: Process 15830 disappeared while scanning\n      Warning: Process 15844 disappeared while scanning\n  - instance DataDog/dd-agent#2 [OK]\n  - instance DataDog/dd-agent#3 [OK]\n  - instance DataDog/dd-agent#4 [OK]\n  - instance DataDog/dd-agent#5 [OK]\n  - instance DataDog/dd-agent#6 [OK]\n  - instance DataDog/dd-agent#7 [OK]\n  - instance DataDog/dd-agent#8 [OK]\n  - instance DataDog/dd-agent#9 [OK]\n  - Collected 43 metrics, 0 events & 11 service checks\n```\n\nIs is perfectly normal for postgresql to start and stop processes, and I see no reason why datadog would have to complain about that.\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/tooling/manifest_validator/v2/validator.py\n## context:\n#  (C) Datadog, Inc. 2020-present\n#  All rights reserved\n#  Licensed under a 3-clause BSD style license (see LICENSE)\nimport json\nimport os\n\nimport jsonschema\nimport requests\n\nimport datadog_checks.dev.tooling.manifest_validator.common.validator as common\nfrom datadog_checks.dev.tooling.manifest_validator.common.validator import BaseManifestValidator\n\nfrom ...constants import get_root\nfrom ..constants import V2\n\nMETRIC_TO_CHECK_EXCLUDE_LIST = {\n    'openstack.controller',  # \"Artificial\" metric, shouldn't be listed in metadata file.\n    'riakcs.bucket_list_pool.workers',  # RiakCS 2.1 metric, but metadata.csv lists RiakCS 2.0 metrics only.\n}\n\n\nclass DisplayOnPublicValidator(BaseManifestValidator):\n    def validate(self, check_name, decoded, fix):\n        correct_is_public = True\n        path = '/display_on_public_website'\n        is_public = decoded.get_path(path)\n        if not isinstance(is_public, bool):\n            output = '  required boolean: display_on_public_website'\n\n            if fix:\n                decoded.set_path(path, correct_is_public)\n                self.fix(output, f'  new `display_on_public_website`: {correct_is_public}')\n            else:\n                self.fail(output)\n\n\nclass SchemaValidator(BaseManifestValidator):\n    def validate(self, check_name, decoded, fix):\n        if not self.should_validate():\n            return\n\n        # Get API and APP keys which are needed to call Datadog API\n        org_name = self.ctx.obj.get('org')\n        if not org_name:\n            self.fail('No `org` has been set')\n            return\n\n        if org_name not in self.ctx.obj.get('orgs'):\n            self.fail(f'Selected org {org_name} is not in `orgs`')\n            return\n\n        org = self.ctx.obj['orgs'][org_name]\n\n        dd_url = org.get('dd_url')\n        if not dd_url:\n            self.fail(f'No `dd_url` has been set for org `{org_name}`')\n            return\n\n        url = f\"{dd_url}/api/beta/apps/manifest/validate\"\n\n        # prep for upload\n        payload = {\"data\": {\"type\": \"app_manifest\", \"attributes\": decoded}}\n\n        try:\n            payload_json = json.dumps(payload)\n            r = requests.post(url, data=payload_json)\n\n            if r.status_code == 400:\n                # parse the errors\n                errors = \"\\n\".join(r.json()[\"errors\"])\n                message = f\"Error validating manifest schema:\\n{errors}\"\n                self.fail(message)\n            else:\n                r.raise_for_status()\n        except Exception as e:\n            self.fail(str(e))\n\n\nclass MediaGalleryValidator(BaseManifestValidator):\n    VIDEO_MEDIA_ATTRIBUTES = ('media_type', 'caption', 'image_url', 'vimeo_id')\n    IMAGE_MEDIA_ATTRIBUTES = ('media_type', 'caption', 'image_url')\n    MEDIA_PATH = '/tile/media'\n    MAX_MEDIA_ELEMENTS = 8\n\n    IMAGE_SCHEMA = jsonschema.Draft7Validator(\n        {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"title\": \"V2 Manifest Image Media Element Validator\",\n            \"description\": \"Defines the various components of an image media element\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"media_type\": {\n                    \"description\": \"The type of media (image or video)\",\n                    \"type\": \"string\",\n                    \"enum\": [\"image\"],\n                },\n                \"caption\": {\n                    \"description\": \"The caption for this image media\",\n                    \"type\": \"string\",\n                },\n                \"image_url\": {\n                    \"description\": \"The relative path to the image from integration root\",\n                    \"type\": \"string\",\n                },\n            },\n            \"required\": [\"media_type\", \"caption\", \"image_url\"],\n        }\n    )\n    VIDEO_SCHEMA = jsonschema.Draft7Validator(\n        {\n            \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n            \"title\": \"V2 Manifest Video Media Element Validator\",\n            \"description\": \"Defines the various components of a video media element\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"media_type\": {\n                    \"description\": \"The type of media (image or video)\",\n                    \"type\": \"string\",\n                    \"enum\": [\"video\"],\n                },\n                \"caption\": {\n                    \"description\": \"The caption for this video media\",\n                    \"type\": \"string\",\n                },\n                \"image_url\": {\n                    \"description\": \"The relative path to the image from integration root\",\n                    \"type\": \"string\",\n                },\n                \"vimeo_id\": {\n                    \"description\": \"The vimeo id (9 digits) corresponding to this video\",\n                    \"type\": \"integer\",\n                },\n            },\n            \"required\": [\"media_type\", \"caption\", \"image_url\", \"vimeo_id\"],\n        }\n    )\n\n    def validate(self, check_name, decoded, fix):\n        if not self.should_validate():\n            return\n\n        media_array = decoded.get_path(self.MEDIA_PATH)\n        # Skip validations if no media is included in the manifest\n        if not media_array:\n            return\n\n        # Length must be between 1-8\n        num_media_elements = len(media_array)\n        if num_media_elements > self.MAX_MEDIA_ELEMENTS:\n            output = f'  The maximum number of media elements is 8, there are currently {num_media_elements}.'\n            self.fail(output)\n\n        # Validate each media object\n        video_count = 0\n        for i, media in enumerate(media_array, 1):\n            # Ensure each media contains valid keys\n            try:\n                media_type = media['media_type']\n                if media_type == 'image':\n                    attribute_schema = self.IMAGE_SCHEMA\n                elif media_type == 'video':\n                    attribute_schema = self.VIDEO_SCHEMA\n                else:\n                    output = f'  Media #{i} `media_type` attribute must be \"video\" or \"image\"'\n                    self.fail(output)\n                    continue\n\n                # Validate with the correct schema\n                errors = sorted(attribute_schema.iter_errors(media), key=lambda e: e.path)\n                if errors:\n                    for error in errors:\n                        self.fail(f'  Media #{i}: {error.message}')\n                    continue\n            except KeyError:\n                output = f'  Media #{i}: \\'media_type\\' is a required property'\n                self.fail(output)\n                continue\n\n            caption = media['caption']\n            image_url = media['image_url']\n\n            # Image_url must lead to png or jpg\n            if '.png' not in image_url.lower() and '.jpg' not in image_url.lower():\n                output = f'  The filetype for media #{i} must be either `.jpg` or `.png`.'\n                self.fail(output)\n\n            # Caption must be smaller than 300 chars\n            if len(caption) > 300:\n                output = f'  The `caption` for media #{i} cannot contain more than 300 characters.'\n                self.fail(output)\n\n            # Keep track of video count (only 1 is allowed)\n            if media_type == 'video':\n                video_count += 1\n\n            try:\n                # Check if file is found in directory\n                cur_path = os.path.join(get_root(), check_name)\n                file_size = os.path.getsize(f'{cur_path}/{image_url}')\n                if file_size > 1000000:  # If file size greater than 1 megabyte, fail\n                    output = f'  File size for media #{i} must be smaller than 1 mb, currently {file_size} bytes.'\n                    self.fail(output)\n            except OSError:\n                output = f'  File not found for media #{i} at `{image_url}`, please fix the path.'\n                self.fail(output)\n\n        if video_count > 1:\n            output = f'  There cannot be more than 1 video in the list of media, currently there are {video_count}'\n            self.fail(output)\n\n\ndef get_v2_validators(ctx, is_extras, is_marketplace):\n    return [\n        common.MaintainerValidator(\n            is_extras, is_marketplace, check_in_extras=False, check_in_marketplace=False, version=V2\n        ),\n        common.MetricsMetadataValidator(version=V2),\n        common.MetricToCheckValidator(version=V2),\n        common.ImmutableAttributesValidator(version=V2),\n        common.LogsCategoryValidator(version=V2),\n        DisplayOnPublicValidator(version=V2),\n        MediaGalleryValidator(is_marketplace, is_extras, version=V2),\n        # keep SchemaValidator last, and avoid running this validation if errors already found\n        SchemaValidator(ctx=ctx, version=V2, skip_if_errors=True),\n    ]\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncisco_aci/tests/fixtures/fabric/26bfabd76a3c7b74961718e820150181.txt\n## context:\n{\"totalCount\":\"3900\",\"imdata\":[{\"eqptMacsectxpkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptMacsectxpkts5min\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesBase\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesLast\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateLast\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesRateTrBase\":\"0.000000\",\"encryptedPacktesRateTtl\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"encryptedPacktesTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsBase\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsLast\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateLast\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsRateTrBase\":\"0.000000\",\"protectedPacketsRateTtl\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"protectedPacketsTrBase\":\"0\",\"repIntvEnd\":\"2018-05-30T12:49:28.251-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptMacsectxbytes5min\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsBase\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsLast\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateLast\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsRateTrBase\":\"0.000000\",\"encryptedOctetsRateTtl\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"encryptedOctetsTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsBase\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsLast\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateLast\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsRateTrBase\":\"0.000000\",\"protectedOctetsRateTtl\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"protectedOctetsTrBase\":\"0\",\"repIntvEnd\":\"2018-05-30T12:49:28.251-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsecrxpkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesBase\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesLast\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateLast\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesRateTrBase\":\"0.000000\",\"decryptedPacktesRateTtl\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"decryptedPacktesTrBase\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptMacsecrxpkts5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.248-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsBase\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsLast\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateLast\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsRateTrBase\":\"0.000000\",\"validatedPacketsRateTtl\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\",\"validatedPacketsTrBase\":\"0\"}}},{\"eqptMacsecrxbytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"decryptedOctetsAvg\":\"0\",\"decryptedOctetsBase\":\"0\",\"decryptedOctetsCum\":\"0\",\"decryptedOctetsLast\":\"0\",\"decryptedOctetsMax\":\"0\",\"decryptedOctetsMin\":\"0\",\"decryptedOctetsPer\":\"0\",\"decryptedOctetsRate\":\"0.000000\",\"decryptedOctetsRateAvg\":\"0.000000\",\"decryptedOctetsRateLast\":\"0.000000\",\"decryptedOctetsRateMax\":\"0.000000\",\"decryptedOctetsRateMin\":\"0.000000\",\"decryptedOctetsRateSpct\":\"0\",\"decryptedOctetsRateThr\":\"\",\"decryptedOctetsRateTr\":\"0.000000\",\"decryptedOctetsRateTrBase\":\"0.000000\",\"decryptedOctetsRateTtl\":\"0.000000\",\"decryptedOctetsSpct\":\"0\",\"decryptedOctetsThr\":\"\",\"decryptedOctetsTr\":\"0\",\"decryptedOctetsTrBase\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptMacsecrxbytes5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.248-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.248-07:00\",\"status\":\"\",\"validatedOctetsAvg\":\"0\",\"validatedOctetsBase\":\"0\",\"validatedOctetsCum\":\"0\",\"validatedOctetsLast\":\"0\",\"validatedOctetsMax\":\"0\",\"validatedOctetsMin\":\"0\",\"validatedOctetsPer\":\"0\",\"validatedOctetsRate\":\"0.000000\",\"validatedOctetsRateAvg\":\"0.000000\",\"validatedOctetsRateLast\":\"0.000000\",\"validatedOctetsRateMax\":\"0.000000\",\"validatedOctetsRateMin\":\"0.000000\",\"validatedOctetsRateSpct\":\"0\",\"validatedOctetsRateThr\":\"\",\"validatedOctetsRateTr\":\"0.000000\",\"validatedOctetsRateTrBase\":\"0.000000\",\"validatedOctetsRateTtl\":\"0.000000\",\"validatedOctetsSpct\":\"0\",\"validatedOctetsThr\":\"\",\"validatedOctetsTr\":\"0\",\"validatedOctetsTrBase\":\"0\"}}},{\"eqptIngrStormMc5min\":{\"attributes\":{\"DropBytesAvg\":\"0\",\"DropBytesBase\":\"0\",\"DropBytesCum\":\"0\",\"DropBytesLast\":\"0\",\"DropBytesMax\":\"0\",\"DropBytesMin\":\"0\",\"DropBytesPer\":\"0\",\"DropBytesRate\":\"0.000000\",\"DropBytesRateAvg\":\"0.000000\",\"DropBytesRateLast\":\"0.000000\",\"DropBytesRateMax\":\"0.000000\",\"DropBytesRateMin\":\"0.000000\",\"DropBytesRateSpct\":\"0\",\"DropBytesRateThr\":\"\",\"DropBytesRateTr\":\"0.000000\",\"DropBytesRateTrBase\":\"0.000000\",\"DropBytesRateTtl\":\"0.000000\",\"DropBytesSpct\":\"0\",\"DropBytesThr\":\"\",\"DropBytesTr\":\"0\",\"DropBytesTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrStormMc5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\"}}},{\"eqptIngrStormBc5min\":{\"attributes\":{\"DropBytesAvg\":\"0\",\"DropBytesBase\":\"0\",\"DropBytesCum\":\"0\",\"DropBytesLast\":\"0\",\"DropBytesMax\":\"0\",\"DropBytesMin\":\"0\",\"DropBytesPer\":\"0\",\"DropBytesRate\":\"0.000000\",\"DropBytesRateAvg\":\"0.000000\",\"DropBytesRateLast\":\"0.000000\",\"DropBytesRateMax\":\"0.000000\",\"DropBytesRateMin\":\"0.000000\",\"DropBytesRateSpct\":\"0\",\"DropBytesRateThr\":\"\",\"DropBytesRateTr\":\"0.000000\",\"DropBytesRateTrBase\":\"0.000000\",\"DropBytesRateTtl\":\"0.000000\",\"DropBytesSpct\":\"0\",\"DropBytesThr\":\"\",\"DropBytesTr\":\"0\",\"DropBytesTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrStormBc5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\"}}},{\"eqptIngrStormUc5min\":{\"attributes\":{\"DropBytesAvg\":\"0\",\"DropBytesBase\":\"0\",\"DropBytesCum\":\"0\",\"DropBytesLast\":\"0\",\"DropBytesMax\":\"0\",\"DropBytesMin\":\"0\",\"DropBytesPer\":\"0\",\"DropBytesRate\":\"0.000000\",\"DropBytesRateAvg\":\"0.000000\",\"DropBytesRateLast\":\"0.000000\",\"DropBytesRateMax\":\"0.000000\",\"DropBytesRateMin\":\"0.000000\",\"DropBytesRateSpct\":\"0\",\"DropBytesRateThr\":\"\",\"DropBytesRateTr\":\"0.000000\",\"DropBytesRateTrBase\":\"0.000000\",\"DropBytesRateTtl\":\"0.000000\",\"DropBytesSpct\":\"0\",\"DropBytesThr\":\"\",\"DropBytesTr\":\"0\",\"DropBytesTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrStormUc5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\"}}},{\"fvFltCounter5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"critcountAvg\":\"0\",\"critcountLast\":\"0\",\"critcountMax\":\"0\",\"critcountMin\":\"0\",\"critcountSpct\":\"0\",\"critcountThr\":\"\",\"critcountTr\":\"0\",\"critcountTrBase\":\"0\",\"critcountTtl\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDfvFltCounter5min\",\"lastCollOffset\":\"280\",\"majcountAvg\":\"0\",\"majcountLast\":\"0\",\"majcountMax\":\"0\",\"majcountMin\":\"0\",\"majcountSpct\":\"0\",\"majcountThr\":\"\",\"majcountTr\":\"0\",\"majcountTrBase\":\"0\",\"majcountTtl\":\"0\",\"mincountAvg\":\"0\",\"mincountLast\":\"0\",\"mincountMax\":\"0\",\"mincountMin\":\"0\",\"mincountSpct\":\"0\",\"mincountThr\":\"\",\"mincountTr\":\"0\",\"mincountTrBase\":\"0\",\"mincountTtl\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:37.015-07:00\",\"repIntvStart\":\"2018-05-30T12:44:56.967-07:00\",\"status\":\"\",\"warncountAvg\":\"0\",\"warncountLast\":\"0\",\"warncountMax\":\"0\",\"warncountMin\":\"0\",\"warncountSpct\":\"0\",\"warncountThr\":\"\",\"warncountTr\":\"0\",\"warncountTrBase\":\"0\",\"warncountTtl\":\"0\"}}},{\"eqptIngrStorm5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"56\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrStorm5min\",\"dropBytesAvg\":\"0\",\"dropBytesBase\":\"0\",\"dropBytesCum\":\"0\",\"dropBytesLast\":\"0\",\"dropBytesMax\":\"0\",\"dropBytesMin\":\"0\",\"dropBytesPer\":\"0\",\"dropBytesRate\":\"0.000000\",\"dropBytesRateAvg\":\"0.000000\",\"dropBytesRateLast\":\"0.000000\",\"dropBytesRateMax\":\"0.000000\",\"dropBytesRateMin\":\"0.000000\",\"dropBytesRateSpct\":\"0\",\"dropBytesRateThr\":\"\",\"dropBytesRateTr\":\"0.000000\",\"dropBytesRateTrBase\":\"0.000000\",\"dropBytesRateTtl\":\"0.000000\",\"dropBytesSpct\":\"0\",\"dropBytesThr\":\"\",\"dropBytesTr\":\"0\",\"dropBytesTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.247-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.247-07:00\",\"status\":\"\"}}},{\"eqptEgrTotal5min\":{\"attributes\":{\"bytesAvg\":\"7975\",\"bytesBase\":\"0\",\"bytesCum\":\"172762765311\",\"bytesLast\":\"0\",\"bytesMax\":\"17208\",\"bytesMin\":\"0\",\"bytesPer\":\"223320\",\"bytesRate\":\"797.571429\",\"bytesRateAvg\":\"797.574823\",\"bytesRateLast\":\"0.000000\",\"bytesRateMax\":\"1720.972097\",\"bytesRateMin\":\"0.000000\",\"bytesRateSpct\":\"0\",\"bytesRateThr\":\"\",\"bytesRateTr\":\"0.000000\",\"bytesRateTrBase\":\"806.782399\",\"bytesRateTtl\":\"22332.095049\",\"bytesSpct\":\"0\",\"bytesThr\":\"\",\"bytesTr\":\"0\",\"bytesTrBase\":\"242039\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptEgrTotal5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"pktsAvg\":\"10\",\"pktsBase\":\"0\",\"pktsCum\":\"346585592\",\"pktsLast\":\"0\",\"pktsMax\":\"27\",\"pktsMin\":\"0\",\"pktsPer\":\"287\",\"pktsRate\":\"1.025000\",\"pktsRateAvg\":\"1.025012\",\"pktsRateLast\":\"0.000000\",\"pktsRateMax\":\"2.700270\",\"pktsRateMin\":\"0.000000\",\"pktsRateSpct\":\"0\",\"pktsRateThr\":\"\",\"pktsRateTr\":\"0.000000\",\"pktsRateTrBase\":\"1.053318\",\"pktsRateTtl\":\"28.700330\",\"pktsSpct\":\"0\",\"pktsThr\":\"\",\"pktsTr\":\"0\",\"pktsTrBase\":\"316\",\"repIntvEnd\":\"2018-05-30T12:49:28.244-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.244-07:00\",\"status\":\"\",\"utilAvg\":\"0\",\"utilLast\":\"0\",\"utilMax\":\"0\",\"utilMin\":\"0\",\"utilSpct\":\"0\",\"utilThr\":\"\",\"utilTr\":\"0\",\"utilTrBase\":\"0\",\"utilTtl\":\"0\"}}},{\"eqptIngrTotal5min\":{\"attributes\":{\"bytesAvg\":\"3649\",\"bytesBase\":\"0\",\"bytesCum\":\"56557060354\",\"bytesLast\":\"1318\",\"bytesMax\":\"12477\",\"bytesMin\":\"0\",\"bytesPer\":\"102198\",\"bytesRate\":\"364.992857\",\"bytesRateAvg\":\"364.991836\",\"bytesRateLast\":\"131.800000\",\"bytesRateMax\":\"1247.700000\",\"bytesRateMin\":\"0.000000\",\"bytesRateSpct\":\"0\",\"bytesRateThr\":\"\",\"bytesRateTr\":\"0.000000\",\"bytesRateTrBase\":\"409.612848\",\"bytesRateTtl\":\"10219.771401\",\"bytesSpct\":\"0\",\"bytesThr\":\"\",\"bytesTr\":\"0\",\"bytesTrBase\":\"122885\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrTotal5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"pktsAvg\":\"5\",\"pktsBase\":\"0\",\"pktsCum\":\"302298061\",\"pktsLast\":\"9\",\"pktsMax\":\"15\",\"pktsMin\":\"0\",\"pktsPer\":\"160\",\"pktsRate\":\"0.571429\",\"pktsRateAvg\":\"0.571428\",\"pktsRateLast\":\"0.900000\",\"pktsRateMax\":\"1.500000\",\"pktsRateMin\":\"0.000000\",\"pktsRateSpct\":\"0\",\"pktsRateThr\":\"\",\"pktsRateTr\":\"0.000000\",\"pktsRateTrBase\":\"0.713329\",\"pktsRateTtl\":\"15.999980\",\"pktsSpct\":\"0\",\"pktsThr\":\"\",\"pktsTr\":\"0\",\"pktsTrBase\":\"214\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"utilAvg\":\"0\",\"utilLast\":\"0\",\"utilMax\":\"0\",\"utilMin\":\"0\",\"utilSpct\":\"0\",\"utilThr\":\"\",\"utilTr\":\"0\",\"utilTrBase\":\"0\",\"utilTtl\":\"0\"}}},{\"eqptEgrDropPkts5min\":{\"attributes\":{\"afdWredAvg\":\"0\",\"afdWredBase\":\"0\",\"afdWredCum\":\"0\",\"afdWredLast\":\"0\",\"afdWredMax\":\"0\",\"afdWredMin\":\"0\",\"afdWredPer\":\"0\",\"afdWredRate\":\"0.000000\",\"afdWredSpct\":\"0\",\"afdWredThr\":\"\",\"afdWredTr\":\"0\",\"afdWredTrBase\":\"0\",\"bufferAvg\":\"0\",\"bufferBase\":\"0\",\"bufferCum\":\"0\",\"bufferLast\":\"0\",\"bufferMax\":\"0\",\"bufferMin\":\"0\",\"bufferPer\":\"0\",\"bufferRate\":\"0.000000\",\"bufferSpct\":\"0\",\"bufferThr\":\"\",\"bufferTr\":\"0\",\"bufferTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptEgrDropPkts5min\",\"errorAvg\":\"0\",\"errorBase\":\"0\",\"errorCum\":\"0\",\"errorLast\":\"0\",\"errorMax\":\"0\",\"errorMin\":\"0\",\"errorPer\":\"0\",\"errorRate\":\"0.000000\",\"errorSpct\":\"0\",\"errorThr\":\"\",\"errorTr\":\"0\",\"errorTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.244-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.244-07:00\",\"status\":\"\"}}},{\"eqptEgrBytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptEgrBytes5min\",\"floodAvg\":\"0\",\"floodBase\":\"0\",\"floodCum\":\"0\",\"floodLast\":\"0\",\"floodMax\":\"0\",\"floodMin\":\"0\",\"floodPer\":\"0\",\"floodRate\":\"0.000000\",\"floodSpct\":\"0\",\"floodThr\":\"\",\"floodTr\":\"0\",\"floodTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"multicastAvg\":\"64\",\"multicastBase\":\"0\",\"multicastCum\":\"278551439\",\"multicastLast\":\"0\",\"multicastMax\":\"896\",\"multicastMin\":\"0\",\"multicastPer\":\"1792\",\"multicastRate\":\"6.400000\",\"multicastRateAvg\":\"6.400320\",\"multicastRateLast\":\"0.000000\",\"multicastRateMax\":\"89.608961\",\"multicastRateMin\":\"0.000000\",\"multicastRateSpct\":\"0\",\"multicastRateThr\":\"\",\"multicastRateTr\":\"0.000000\",\"multicastRateTrBase\":\"10.683305\",\"multicastRateTtl\":\"179.208961\",\"multicastSpct\":\"0\",\"multicastThr\":\"\",\"multicastTr\":\"0\",\"multicastTrBase\":\"3205\",\"repIntvEnd\":\"2018-05-30T12:49:28.244-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.244-07:00\",\"status\":\"\",\"unicastAvg\":\"7911\",\"unicastBase\":\"0\",\"unicastCum\":\"172484213872\",\"unicastLast\":\"0\",\"unicastMax\":\"17097\",\"unicastMin\":\"0\",\"unicastPer\":\"221528\",\"unicastRate\":\"791.171429\",\"unicastRateAvg\":\"791.174503\",\"unicastRateLast\":\"0.000000\",\"unicastRateMax\":\"1709.870987\",\"unicastRateMin\":\"0.000000\",\"unicastRateSpct\":\"0\",\"unicastRateThr\":\"\",\"unicastRateTr\":\"0.000000\",\"unicastRateTrBase\":\"796.099094\",\"unicastRateTtl\":\"22152.886088\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"238834\"}}},{\"eqptEgrPkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptEgrPkts5min\",\"floodAvg\":\"0\",\"floodBase\":\"0\",\"floodCum\":\"0\",\"floodLast\":\"0\",\"floodMax\":\"0\",\"floodMin\":\"0\",\"floodPer\":\"0\",\"floodRate\":\"0.000000\",\"floodSpct\":\"0\",\"floodThr\":\"\",\"floodTr\":\"0\",\"floodTrBase\":\"0\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"multicastAvg\":\"0\",\"multicastBase\":\"0\",\"multicastCum\":\"3419798\",\"multicastLast\":\"0\",\"multicastMax\":\"4\",\"multicastMin\":\"0\",\"multicastPer\":\"8\",\"multicastRate\":\"0.028571\",\"multicastSpct\":\"0\",\"multicastThr\":\"\",\"multicastTr\":\"0\",\"multicastTrBase\":\"16\",\"repIntvEnd\":\"2018-05-30T12:49:28.244-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.244-07:00\",\"status\":\"\",\"unicastAvg\":\"9\",\"unicastBase\":\"0\",\"unicastCum\":\"343165794\",\"unicastLast\":\"0\",\"unicastMax\":\"24\",\"unicastMin\":\"0\",\"unicastPer\":\"279\",\"unicastRate\":\"0.996429\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"300\"}}},{\"eqptIngrDropPkts5min\":{\"attributes\":{\"bufferAvg\":\"0\",\"bufferBase\":\"0\",\"bufferCum\":\"0\",\"bufferLast\":\"0\",\"bufferMax\":\"0\",\"bufferMin\":\"0\",\"bufferPer\":\"0\",\"bufferRate\":\"0.000000\",\"bufferSpct\":\"0\",\"bufferThr\":\"\",\"bufferTr\":\"0\",\"bufferTrBase\":\"0\",\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrDropPkts5min\",\"errorAvg\":\"0\",\"errorBase\":\"0\",\"errorCum\":\"0\",\"errorLast\":\"0\",\"errorMax\":\"0\",\"errorMin\":\"0\",\"errorPer\":\"0\",\"errorRate\":\"0.000000\",\"errorSpct\":\"0\",\"errorThr\":\"\",\"errorTr\":\"0\",\"errorTrBase\":\"0\",\"forwardingAvg\":\"0\",\"forwardingBase\":\"0\",\"forwardingCum\":\"0\",\"forwardingLast\":\"0\",\"forwardingMax\":\"0\",\"forwardingMin\":\"0\",\"forwardingPer\":\"0\",\"forwardingRate\":\"0.000000\",\"forwardingSpct\":\"0\",\"forwardingThr\":\"\",\"forwardingTr\":\"0\",\"forwardingTrBase\":\"0\",\"lastCollOffset\":\"280\",\"lbAvg\":\"0\",\"lbBase\":\"0\",\"lbCum\":\"0\",\"lbLast\":\"0\",\"lbMax\":\"0\",\"lbMin\":\"0\",\"lbPer\":\"0\",\"lbRate\":\"0.000000\",\"lbSpct\":\"0\",\"lbThr\":\"\",\"lbTr\":\"0\",\"lbTrBase\":\"0\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\"}}},{\"eqptIngrUnkBytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrUnkBytes5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"unclassifiedAvg\":\"0\",\"unclassifiedBase\":\"0\",\"unclassifiedCum\":\"0\",\"unclassifiedLast\":\"0\",\"unclassifiedMax\":\"0\",\"unclassifiedMin\":\"0\",\"unclassifiedPer\":\"0\",\"unclassifiedRate\":\"0.000000\",\"unclassifiedSpct\":\"0\",\"unclassifiedThr\":\"\",\"unclassifiedTr\":\"0\",\"unclassifiedTrBase\":\"0\",\"unicastAvg\":\"0\",\"unicastBase\":\"0\",\"unicastCum\":\"0\",\"unicastLast\":\"0\",\"unicastMax\":\"0\",\"unicastMin\":\"0\",\"unicastPer\":\"0\",\"unicastRate\":\"0.000000\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"0\"}}},{\"eqptIngrBytes5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrBytes5min\",\"floodAvg\":\"47\",\"floodBase\":\"0\",\"floodCum\":\"39593148\",\"floodLast\":\"1318\",\"floodMax\":\"1318\",\"floodMin\":\"0\",\"floodPer\":\"1318\",\"floodRate\":\"4.707143\",\"floodSpct\":\"0\",\"floodThr\":\"\",\"floodTr\":\"0\",\"floodTrBase\":\"9052\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"multicastAvg\":\"0\",\"multicastBase\":\"0\",\"multicastCum\":\"0\",\"multicastLast\":\"0\",\"multicastMax\":\"0\",\"multicastMin\":\"0\",\"multicastPer\":\"0\",\"multicastRate\":\"0.000000\",\"multicastRateAvg\":\"0.000000\",\"multicastRateLast\":\"0.000000\",\"multicastRateMax\":\"0.000000\",\"multicastRateMin\":\"0.000000\",\"multicastRateSpct\":\"0\",\"multicastRateThr\":\"\",\"multicastRateTr\":\"0.000000\",\"multicastRateTrBase\":\"0.000000\",\"multicastRateTtl\":\"0.000000\",\"multicastSpct\":\"0\",\"multicastThr\":\"\",\"multicastTr\":\"0\",\"multicastTrBase\":\"0\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"unicastAvg\":\"3602\",\"unicastBase\":\"0\",\"unicastCum\":\"56517467206\",\"unicastLast\":\"0\",\"unicastMax\":\"12477\",\"unicastMin\":\"0\",\"unicastPer\":\"100880\",\"unicastRate\":\"360.285714\",\"unicastRateAvg\":\"360.284693\",\"unicastRateLast\":\"0.000000\",\"unicastRateMax\":\"1247.700000\",\"unicastRateMin\":\"0.000000\",\"unicastRateSpct\":\"0\",\"unicastRateThr\":\"\",\"unicastRateTr\":\"0.000000\",\"unicastRateTrBase\":\"379.439515\",\"unicastRateTtl\":\"10087.971401\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"113833\"}}},{\"eqptIngrUnkPkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrUnkPkts5min\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"unclassifiedAvg\":\"0\",\"unclassifiedBase\":\"0\",\"unclassifiedCum\":\"0\",\"unclassifiedLast\":\"0\",\"unclassifiedMax\":\"0\",\"unclassifiedMin\":\"0\",\"unclassifiedPer\":\"0\",\"unclassifiedRate\":\"0.000000\",\"unclassifiedSpct\":\"0\",\"unclassifiedThr\":\"\",\"unclassifiedTr\":\"0\",\"unclassifiedTrBase\":\"0\",\"unicastAvg\":\"0\",\"unicastBase\":\"0\",\"unicastCum\":\"0\",\"unicastLast\":\"0\",\"unicastMax\":\"0\",\"unicastMin\":\"0\",\"unicastPer\":\"0\",\"unicastRate\":\"0.000000\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"0\"}}},{\"eqptIngrPkts5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"28\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/CDeqptIngrPkts5min\",\"floodAvg\":\"0\",\"floodBase\":\"0\",\"floodCum\":\"213604\",\"floodLast\":\"9\",\"floodMax\":\"9\",\"floodMin\":\"0\",\"floodPer\":\"9\",\"floodRate\":\"0.032143\",\"floodSpct\":\"0\",\"floodThr\":\"\",\"floodTr\":\"0\",\"floodTrBase\":\"50\",\"lastCollOffset\":\"280\",\"modTs\":\"never\",\"multicastAvg\":\"0\",\"multicastBase\":\"0\",\"multicastCum\":\"0\",\"multicastLast\":\"0\",\"multicastMax\":\"0\",\"multicastMin\":\"0\",\"multicastPer\":\"0\",\"multicastRate\":\"0.000000\",\"multicastSpct\":\"0\",\"multicastThr\":\"\",\"multicastTr\":\"0\",\"multicastTrBase\":\"0\",\"repIntvEnd\":\"2018-05-30T12:49:28.242-07:00\",\"repIntvStart\":\"2018-05-30T12:44:48.242-07:00\",\"status\":\"\",\"unicastAvg\":\"5\",\"unicastBase\":\"0\",\"unicastCum\":\"302084457\",\"unicastLast\":\"0\",\"unicastMax\":\"15\",\"unicastMin\":\"0\",\"unicastPer\":\"151\",\"unicastRate\":\"0.539286\",\"unicastSpct\":\"0\",\"unicastThr\":\"\",\"unicastTr\":\"0\",\"unicastTrBase\":\"164\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-8\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"8\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:04:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:59:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-7\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"7\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:09:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:04:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-6\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:14:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:09:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-5\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:19:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:14:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-4\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"4\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:24:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:19:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-3\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"3\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:29:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:24:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-2\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:34:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:29:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-1\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"1\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:39:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:34:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-0\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"0\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:44:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:39:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-11\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"11\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:49:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:44:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-10\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"10\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:54:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:49:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxpkts5min-9\",\"encryptedPacktesAvg\":\"0\",\"encryptedPacktesCum\":\"0\",\"encryptedPacktesMax\":\"0\",\"encryptedPacktesMin\":\"0\",\"encryptedPacktesPer\":\"0\",\"encryptedPacktesRate\":\"0.000000\",\"encryptedPacktesRateAvg\":\"0.000000\",\"encryptedPacktesRateMax\":\"0.000000\",\"encryptedPacktesRateMin\":\"0.000000\",\"encryptedPacktesRateSpct\":\"0\",\"encryptedPacktesRateThr\":\"\",\"encryptedPacktesRateTr\":\"0.000000\",\"encryptedPacktesSpct\":\"0\",\"encryptedPacktesThr\":\"\",\"encryptedPacktesTr\":\"0\",\"index\":\"9\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedPacketsAvg\":\"0\",\"protectedPacketsCum\":\"0\",\"protectedPacketsMax\":\"0\",\"protectedPacketsMin\":\"0\",\"protectedPacketsPer\":\"0\",\"protectedPacketsRate\":\"0.000000\",\"protectedPacketsRateAvg\":\"0.000000\",\"protectedPacketsRateMax\":\"0.000000\",\"protectedPacketsRateMin\":\"0.000000\",\"protectedPacketsRateSpct\":\"0\",\"protectedPacketsRateThr\":\"\",\"protectedPacketsRateTr\":\"0.000000\",\"protectedPacketsSpct\":\"0\",\"protectedPacketsThr\":\"\",\"protectedPacketsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:59:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:54:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-8\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"8\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:04:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:59:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-7\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"7\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:09:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:04:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-6\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:14:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:09:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-5\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:19:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:14:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-4\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"4\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:24:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:19:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-3\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"3\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:29:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:24:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-2\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:34:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:29:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-1\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"1\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:39:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:34:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-0\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"0\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T12:44:48.251-07:00\",\"repIntvStart\":\"2018-05-30T12:39:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-11\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"11\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:49:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:44:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-10\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"10\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:54:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:49:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsectxbytesHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsectxbytes5min-9\",\"encryptedOctetsAvg\":\"0\",\"encryptedOctetsCum\":\"0\",\"encryptedOctetsMax\":\"0\",\"encryptedOctetsMin\":\"0\",\"encryptedOctetsPer\":\"0\",\"encryptedOctetsRate\":\"0.000000\",\"encryptedOctetsRateAvg\":\"0.000000\",\"encryptedOctetsRateMax\":\"0.000000\",\"encryptedOctetsRateMin\":\"0.000000\",\"encryptedOctetsRateSpct\":\"0\",\"encryptedOctetsRateThr\":\"\",\"encryptedOctetsRateTr\":\"0.000000\",\"encryptedOctetsSpct\":\"0\",\"encryptedOctetsThr\":\"\",\"encryptedOctetsTr\":\"0\",\"index\":\"9\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"protectedOctetsAvg\":\"0\",\"protectedOctetsCum\":\"0\",\"protectedOctetsMax\":\"0\",\"protectedOctetsMin\":\"0\",\"protectedOctetsPer\":\"0\",\"protectedOctetsRate\":\"0.000000\",\"protectedOctetsRateAvg\":\"0.000000\",\"protectedOctetsRateMax\":\"0.000000\",\"protectedOctetsRateMin\":\"0.000000\",\"protectedOctetsRateSpct\":\"0\",\"protectedOctetsRateThr\":\"\",\"protectedOctetsRateTr\":\"0.000000\",\"protectedOctetsSpct\":\"0\",\"protectedOctetsThr\":\"\",\"protectedOctetsTr\":\"0\",\"repIntvEnd\":\"2018-05-30T11:59:48.251-07:00\",\"repIntvStart\":\"2018-05-30T11:54:48.251-07:00\",\"status\":\"\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-8\",\"index\":\"8\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:04:48.248-07:00\",\"repIntvStart\":\"2018-05-30T11:59:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-7\",\"index\":\"7\",\"lastCollOffset\":\"299\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:09:48.247-07:00\",\"repIntvStart\":\"2018-05-30T12:04:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-6\",\"index\":\"6\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:14:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:09:48.247-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-5\",\"index\":\"5\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:19:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:14:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-4\",\"index\":\"4\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:24:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:19:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-3\",\"index\":\"3\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:29:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:24:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}},{\"eqptMacsecrxpktsHist5min\":{\"attributes\":{\"childAction\":\"deleteNonPresent\",\"cnt\":\"30\",\"decryptedPacktesAvg\":\"0\",\"decryptedPacktesCum\":\"0\",\"decryptedPacktesMax\":\"0\",\"decryptedPacktesMin\":\"0\",\"decryptedPacktesPer\":\"0\",\"decryptedPacktesRate\":\"0.000000\",\"decryptedPacktesRateAvg\":\"0.000000\",\"decryptedPacktesRateMax\":\"0.000000\",\"decryptedPacktesRateMin\":\"0.000000\",\"decryptedPacktesRateSpct\":\"0\",\"decryptedPacktesRateThr\":\"\",\"decryptedPacktesRateTr\":\"0.000000\",\"decryptedPacktesSpct\":\"0\",\"decryptedPacktesThr\":\"\",\"decryptedPacktesTr\":\"0\",\"dn\":\"topology/pod-1/node-102/sys/phys-[eth1/8]/HDeqptMacsecrxpkts5min-2\",\"index\":\"2\",\"lastCollOffset\":\"300\",\"modTs\":\"never\",\"repIntvEnd\":\"2018-05-30T12:34:48.248-07:00\",\"repIntvStart\":\"2018-05-30T12:29:48.248-07:00\",\"status\":\"\",\"validatedPacketsAvg\":\"0\",\"validatedPacketsCum\":\"0\",\"validatedPacketsMax\":\"0\",\"validatedPacketsMin\":\"0\",\"validatedPacketsPer\":\"0\",\"validatedPacketsRate\":\"0.000000\",\"validatedPacketsRateAvg\":\"0.000000\",\"validatedPacketsRateMax\":\"0.000000\",\"validatedPacketsRateMin\":\"0.000000\",\"validatedPacketsRateSpct\":\"0\",\"validatedPacketsRateThr\":\"\",\"validatedPacketsRateTr\":\"0.000000\",\"validatedPacketsSpct\":\"0\",\"validatedPacketsThr\":\"\",\"validatedPacketsTr\":\"0\"}}}]}"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmongo/assets/saved_views/queries.json\n## context:\n{ \n  \"name\": \"Mongo queries\",\n  \"type\": \"logs\",\n  \"page\": \"stream\",\n  \"query\": \"source:mongodb @mongo.query.type:*\",\n  \"timerange\": {\n    \"interval_ms\": 3600000\n  },\n  \"visible_facets\": [\"source\", \"host\", \"service\", \"status\", \"@db.instance\", \"@db.operation\", \"@mongo.collection\", \"@mongo.planSummary.type\", \"@mongo.query.type\", \"@mongo.context\", \"@duration\"],\n  \"options\": {\n    \"columns\": [\"status\", \"host\", \"@db.operation\", \"@mongo.query.type\"],\n    \"show_date_column\": true,\n    \"show_message_column\": true,\n    \"message_display\": \"inline\",\n    \"show_timeline\": true\n  }\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkube_controller_manager/assets/dashboards/overview.json\n## context:\n{\n  \"title\": \"Kubernetes Controller Manager - Overview\",\n  \"description\": \"\",\n  \"widgets\": [\n    {\n      \"id\": 0,\n      \"definition\": {\n        \"type\": \"check_status\",\n        \"title\": \"Replicas up\",\n        \"title_size\": \"16\",\n        \"title_align\": \"center\",\n        \"check\": \"kube_controller_manager.prometheus.health\",\n        \"grouping\": \"cluster\",\n        \"group_by\": [],\n        \"tags\": [\n          \"$scope\",\n          \"$cluster_name\"\n        ]\n      },\n      \"layout\": {\n        \"x\": 1,\n        \"y\": 1,\n        \"width\": 15,\n        \"height\": 8\n      }\n    },\n    {\n      \"id\": 1,\n      \"definition\": {\n        \"type\": \"check_status\",\n        \"title\": \"Leader election\",\n        \"title_size\": \"16\",\n        \"title_align\": \"center\",\n        \"check\": \"kube_controller_manager.leader_election.status\",\n        \"grouping\": \"cluster\",\n        \"group_by\": [],\n        \"tags\": [\n          \"$scope\",\n          \"$cluster_name\"\n        ]\n      },\n      \"layout\": {\n        \"x\": 1,\n        \"y\": 10,\n        \"width\": 15,\n        \"height\": 8\n      }\n    },\n    {\n      \"id\": 2,\n      \"definition\": {\n        \"type\": \"query_value\",\n        \"requests\": [\n          {\n            \"q\": \"max:kube_controller_manager.goroutines{$scope,$cluster_name}\",\n            \"aggregator\": \"last\"\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Active goroutines\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\",\n        \"autoscale\": true,\n        \"precision\": 0\n      },\n      \"layout\": {\n        \"x\": 1,\n        \"y\": 19,\n        \"width\": 15,\n        \"height\": 8\n      }\n    },\n    {\n      \"id\": 3,\n      \"definition\": {\n        \"type\": \"query_value\",\n        \"requests\": [\n          {\n            \"q\": \"max:kube_controller_manager.threads{$scope,$cluster_name}\",\n            \"aggregator\": \"last\"\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Active threads\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\",\n        \"autoscale\": true,\n        \"precision\": 0\n      },\n      \"layout\": {\n        \"x\": 1,\n        \"y\": 28,\n        \"width\": 15,\n        \"height\": 9\n      }\n    },\n    {\n      \"id\": 4,\n      \"definition\": {\n        \"type\": \"toplist\",\n        \"requests\": [\n          {\n            \"q\": \"top(avg:kube_controller_manager.queue.latency.quantile{$scope,$quantile,$cluster_name} by {queue}, 10, 'mean', 'desc')\",\n            \"style\": {\n              \"palette\": \"dog_classic\"\n            }\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Processing latency per queue ($quantile)\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\"\n      },\n      \"layout\": {\n        \"x\": 18,\n        \"y\": 1,\n        \"width\": 47,\n        \"height\": 15\n      }\n    },\n    {\n      \"id\": 5,\n      \"definition\": {\n        \"type\": \"toplist\",\n        \"requests\": [\n          {\n            \"q\": \"top(avg:kube_controller_manager.queue.work_duration.quantile{$scope,$quantile,$cluster_name} by {queue}, 10, 'mean', 'desc')\",\n            \"style\": {\n              \"palette\": \"dog_classic\"\n            }\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Work duration per queue ($quantile)\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\"\n      },\n      \"layout\": {\n        \"x\": 18,\n        \"y\": 17,\n        \"width\": 47,\n        \"height\": 15\n      }\n    },\n    {\n      \"id\": 6,\n      \"definition\": {\n        \"type\": \"change\",\n        \"requests\": [\n          {\n            \"q\": \"avg:kube_controller_manager.queue.latency.quantile{$scope,$quantile,$cluster_name} by {queue}\",\n            \"change_type\": \"relative\",\n            \"compare_to\": \"hour_before\",\n            \"increase_good\": false,\n            \"order_by\": \"change\",\n            \"order_dir\": \"desc\"\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Latency change ($quantile), past hour\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\"\n      },\n      \"layout\": {\n        \"x\": 18,\n        \"y\": 33,\n        \"width\": 47,\n        \"height\": 15\n      }\n    },\n    {\n      \"id\": 7,\n      \"definition\": {\n        \"type\": \"timeseries\",\n        \"requests\": [\n          {\n            \"q\": \"sum:kube_controller_manager.client.http.requests{$scope,$cluster_name} by {method,code}.as_count()\",\n            \"display_type\": \"bars\",\n            \"style\": {\n              \"palette\": \"dog_classic\",\n              \"line_type\": \"solid\",\n              \"line_width\": \"normal\"\n            }\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"HTTP requests to apiserver\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\",\n        \"show_legend\": true,\n        \"legend_size\": \"0\"\n      },\n      \"layout\": {\n        \"x\": 18,\n        \"y\": 49,\n        \"width\": 47,\n        \"height\": 23\n      }\n    },\n    {\n      \"id\": 8,\n      \"definition\": {\n        \"type\": \"timeseries\",\n        \"requests\": [\n          {\n            \"q\": \"avg:kube_controller_manager.queue.adds{$scope,$cluster_name} by {queue}.as_count()\",\n            \"display_type\": \"bars\",\n            \"style\": {\n              \"palette\": \"dog_classic\",\n              \"line_type\": \"solid\",\n              \"line_width\": \"normal\"\n            }\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Work elements added per queue\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\",\n        \"show_legend\": false,\n        \"legend_size\": \"0\"\n      },\n      \"layout\": {\n        \"x\": 66,\n        \"y\": 1,\n        \"width\": 47,\n        \"height\": 15\n      }\n    },\n    {\n      \"id\": 9,\n      \"definition\": {\n        \"type\": \"timeseries\",\n        \"requests\": [\n          {\n            \"q\": \"avg:kube_controller_manager.queue.retries{$scope,$cluster_name} by {queue}.as_count()\",\n            \"display_type\": \"bars\",\n            \"style\": {\n              \"palette\": \"dog_classic\",\n              \"line_type\": \"solid\",\n              \"line_width\": \"normal\"\n            }\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Retries per queue\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\",\n        \"show_legend\": false,\n        \"legend_size\": \"0\"\n      },\n      \"layout\": {\n        \"x\": 66,\n        \"y\": 17,\n        \"width\": 47,\n        \"height\": 15\n      }\n    },\n    {\n      \"id\": 10,\n      \"definition\": {\n        \"type\": \"timeseries\",\n        \"requests\": [\n          {\n            \"q\": \"avg:kube_controller_manager.rate_limiter.use{$scope,$cluster_name} by {limiter}\",\n            \"display_type\": \"bars\",\n            \"style\": {\n              \"palette\": \"dog_classic\",\n              \"line_type\": \"solid\",\n              \"line_width\": \"normal\"\n            }\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Rate limiter uses\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\",\n        \"show_legend\": false,\n        \"legend_size\": \"0\"\n      },\n      \"layout\": {\n        \"x\": 66,\n        \"y\": 33,\n        \"width\": 47,\n        \"height\": 15\n      }\n    },\n    {\n      \"id\": 11,\n      \"definition\": {\n        \"type\": \"timeseries\",\n        \"requests\": [\n          {\n            \"q\": \"avg:kube_controller_manager.queue.depth{$scope,$cluster_name} by {queue}\",\n            \"display_type\": \"line\",\n            \"style\": {\n              \"palette\": \"dog_classic\",\n              \"line_type\": \"solid\",\n              \"line_width\": \"normal\"\n            }\n          }\n        ],\n        \"custom_links\": [],\n        \"title\": \"Queue depth\",\n        \"title_size\": \"16\",\n        \"title_align\": \"left\",\n        \"show_legend\": true,\n        \"legend_size\": \"0\"\n      },\n      \"layout\": {\n        \"x\": 66,\n        \"y\": 49,\n        \"width\": 47,\n        \"height\": 23\n      }\n    }\n  ],\n  \"template_variables\": [\n    {\n      \"name\": \"scope\",\n      \"default\": \"*\",\n      \"prefix\": null\n    },\n    {\n      \"name\": \"cluster_name\",\n      \"default\": \"*\",\n      \"prefix\": \"kube_cluster_name\"\n    },\n    {\n      \"name\": \"quantile\",\n      \"default\": \"*\",\n      \"prefix\": \"quantile\"\n    }\n  ],\n  \"layout_type\": \"free\",\n  \"is_read_only\": true,\n  \"notify_list\": [],\n  \"id\": 30271\n}\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsinglestore/tests/fixtures/mv_sysinfo_net.csv\n## context:\n1,\"node-memsql-cluster-master-0.svc-memsql-cluster\",3306,\"MA\",\"eth0\",1160728672,2138338090\n1,\"node-memsql-cluster-master-0.svc-memsql-cluster\",3306,\"MA\",\"lo\",60076418,60076418\n2,\"node-memsql-cluster-aggregator-0.svc-memsql-cluster\",3306,\"CA\",\"lo\",57520492,57520492\n2,\"node-memsql-cluster-aggregator-0.svc-memsql-cluster\",3306,\"CA\",\"eth0\",584031188,358899313\n3,\"node-memsql-cluster-aggregator-1.svc-memsql-cluster\",3306,\"CA\",\"lo\",58075611,58075611\n3,\"node-memsql-cluster-aggregator-1.svc-memsql-cluster\",3306,\"CA\",\"eth0\",588931505,361404763\n4,\"node-memsql-cluster-leaf-ag1-0.svc-memsql-cluster\",3306,\"LEAF\",\"lo\",40808237,40808237\n4,\"node-memsql-cluster-leaf-ag1-0.svc-memsql-cluster\",3306,\"LEAF\",\"eth0\",978287586,716505115\n5,\"node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster\",3306,\"LEAF\",\"eth0\",971954487,712119621\n5,\"node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster\",3306,\"LEAF\",\"lo\",40557063,40557063"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nbtrfs/datadog_checks/btrfs/__about__.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\n__version__ = '1.12.1'\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ngo-metro/datadog_checks/go-metro/data/conf.yaml.example\n## context:\n## All options defined here are available to all instances.\n#\ninit_config:\n\n    ## @param snaplen - integer - required\n    ## should be >=104 (to accommodate for the largest possible TCP header)\n    #\n    snaplen: 512\n\n    ## @param idle_ttl - integer - required\n    ## Time after which an idle flow (no traffic received) is flushed.\n    #\n    idle_ttl: 300\n\n    ## @param exp_ttl - integer - required\n    ## Time after which a finished flow is flushed.\n    #\n    exp_ttl: 60\n\n    ## @param statsd_ip - string - required\n    ## StatsD IP.\n    #\n    statsd_ip: 127.0.0.1\n\n    ## @param statsd_port - integer - required\n    ## StatsD Port.\n    #\n    statsd_port: 8125\n\n    ## @param log_to_file - boolean - required\n    ## Whether or not this check should log in the Agent log file.\n    #\n    log_to_file: true\n\n    ## @param log_level - string - required\n    ## Minimum level of logs logged by this check.\n    ## available levels: trace, debug, info, warning, error, critical\n    #\n    log_level: info\n\n    ## @param service - string - optional\n    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.\n    ##\n    ## Additionally, this sets the default `service` for every log source.\n    #\n    # service: <SERVICE>\n\n## Every instance is scheduled independent of the others.\n#\ninstances:\n\n    ## @param interface - string - required\n    ## Name of the interface to sniff from.\n    #\n  - interface: eth0\n\n    ## @param ips - list of strings - required\n    ## Include by IP - The check performs name lookup and tags with hostname if available.\n    ## Which avoids having go-metro inspect every incoming/outgoing packet through the interface.\n    #\n    ips:\n      - <IP>\n\n    ## @param hosts - list of strings - required\n    ## Include by hostname - The check performs ip lookup and filter by hosts IP's\n    ## which avoids having go-metro inspect every incoming/outgoing packet through the interface.\n    #\n    hosts:\n      - <HOSTNAME>\n\n    ## @param tags - list of strings - optional\n    ## A list of tags to attach to every metric and service check emitted by this instance.\n    ##\n    ## Learn more about tagging at https://docs.datadoghq.com/tagging\n    #\n    # tags:\n    #   - <KEY_1>:<VALUE_1>\n    #   - <KEY_2>:<VALUE_2>\n\n    ## @param service - string - optional\n    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.\n    ##\n    ## Overrides any `service` defined in the `init_config` section.\n    #\n    # service: <SERVICE>\n\n    ## @param min_collection_interval - number - optional - default: 15\n    ## This changes the collection interval of the check. For more information, see:\n    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval\n    #\n    # min_collection_interval: 15\n\n    ## @param empty_default_hostname - boolean - optional - default: false\n    ## This forces the check to send metrics with no hostname.\n    ##\n    ## This is useful for cluster-level checks.\n    #\n    # empty_default_hostname: false\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_base/tests/base/checks/windows/perf_counters/transformers/test_temporal_percent.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nimport pytest\n\nfrom datadog_checks.dev.testing import requires_py3, requires_windows\n\nfrom ..utils import GLOBAL_TAGS, get_check\n\npytestmark = [requires_py3, requires_windows, pytest.mark.perf_counters]\n\n\ndef test_named(aggregator, dd_run_check, mock_performance_objects):\n    mock_performance_objects({'Foo': (['instance1'], {'Bar': [5.2]})})\n    check = get_check(\n        {\n            'metrics': {\n                'Foo': {\n                    'name': 'foo',\n                    'tag_name': 'baz',\n                    'counters': [{'Bar': {'name': 'bar', 'type': 'temporal_percent', 'scale': 'second'}}],\n                }\n            }\n        }\n    )\n    dd_run_check(check)\n\n    tags = ['baz:instance1']\n    tags.extend(GLOBAL_TAGS)\n    aggregator.assert_metric('test.foo.bar', 520, metric_type=aggregator.RATE, tags=tags)\n\n    aggregator.assert_all_metrics_covered()\n\n\ndef test_integer(aggregator, dd_run_check, mock_performance_objects):\n    mock_performance_objects({'Foo': (['instance1'], {'Bar': [5.2]})})\n    check = get_check(\n        {\n            'metrics': {\n                'Foo': {\n                    'name': 'foo',\n                    'tag_name': 'baz',\n                    'counters': [{'Bar': {'name': 'bar', 'type': 'temporal_percent', 'scale': 1}}],\n                }\n            }\n        }\n    )\n    dd_run_check(check)\n\n    tags = ['baz:instance1']\n    tags.extend(GLOBAL_TAGS)\n    aggregator.assert_metric('test.foo.bar', 520, metric_type=aggregator.RATE, tags=tags)\n\n    aggregator.assert_all_metrics_covered()\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsinglestore/tests/fixtures/mv_sysinfo_net.csv\n## context:\n1,\"node-memsql-cluster-master-0.svc-memsql-cluster\",3306,\"MA\",\"eth0\",1160728672,2138338090\n1,\"node-memsql-cluster-master-0.svc-memsql-cluster\",3306,\"MA\",\"lo\",60076418,60076418\n2,\"node-memsql-cluster-aggregator-0.svc-memsql-cluster\",3306,\"CA\",\"lo\",57520492,57520492\n2,\"node-memsql-cluster-aggregator-0.svc-memsql-cluster\",3306,\"CA\",\"eth0\",584031188,358899313\n3,\"node-memsql-cluster-aggregator-1.svc-memsql-cluster\",3306,\"CA\",\"lo\",58075611,58075611\n3,\"node-memsql-cluster-aggregator-1.svc-memsql-cluster\",3306,\"CA\",\"eth0\",588931505,361404763\n4,\"node-memsql-cluster-leaf-ag1-0.svc-memsql-cluster\",3306,\"LEAF\",\"lo\",40808237,40808237\n4,\"node-memsql-cluster-leaf-ag1-0.svc-memsql-cluster\",3306,\"LEAF\",\"eth0\",978287586,716505115\n5,\"node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster\",3306,\"LEAF\",\"eth0\",971954487,712119621\n5,\"node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster\",3306,\"LEAF\",\"lo\",40557063,40557063"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncassandra/tests/compose/resources/cassandra-init.sh\n## context:\nCQL=\"DROP keyspace trek;\nCREATE KEYSPACE trek WITH replication = {'class': 'SimpleStrategy', 'replication_factor': '1'} AND durable_writes = true;\nCREATE TABLE trek.crew (search_hash text, PRIMARY KEY (search_hash));\"\n\nuntil echo $CQL | cqlsh; do\n  echo \"cqlsh: Cassandra is unavailable to initialize - will retry later\"\n  sleep 2\ndone &\n\nexec /docker-entrypoint.sh \"$@\""
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\noracle/tests/docker/client/listener.ora\n## context:\nLISTENER =\n   (DESCRIPTION_LIST =\n     (DESCRIPTION =\n       (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))\n       (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))\n       (ADDRESS = (PROTOCOL = TCPS)(HOST = 0.0.0.0)(PORT = 2484))\n     )\n   ) \nDIAG_ADR_ENABLED = off\nSSL_VERSION = 1.2\n\n\nSSL_CLIENT_AUTHENTICATION = FALSE\n\nWALLET_LOCATION =\n  (SOURCE =\n    (METHOD = FILE)\n    (METHOD_DATA =\n      (DIRECTORY = /opt/oracle/instantclient_19_3/client_wallet))\n    )\n  )\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsinglestore/tests/fixtures/mv_sysinfo_net.csv\n## context:\n1,\"node-memsql-cluster-master-0.svc-memsql-cluster\",3306,\"MA\",\"eth0\",1160728672,2138338090\n1,\"node-memsql-cluster-master-0.svc-memsql-cluster\",3306,\"MA\",\"lo\",60076418,60076418\n2,\"node-memsql-cluster-aggregator-0.svc-memsql-cluster\",3306,\"CA\",\"lo\",57520492,57520492\n2,\"node-memsql-cluster-aggregator-0.svc-memsql-cluster\",3306,\"CA\",\"eth0\",584031188,358899313\n3,\"node-memsql-cluster-aggregator-1.svc-memsql-cluster\",3306,\"CA\",\"lo\",58075611,58075611\n3,\"node-memsql-cluster-aggregator-1.svc-memsql-cluster\",3306,\"CA\",\"eth0\",588931505,361404763\n4,\"node-memsql-cluster-leaf-ag1-0.svc-memsql-cluster\",3306,\"LEAF\",\"lo\",40808237,40808237\n4,\"node-memsql-cluster-leaf-ag1-0.svc-memsql-cluster\",3306,\"LEAF\",\"eth0\",978287586,716505115\n5,\"node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster\",3306,\"LEAF\",\"eth0\",971954487,712119621\n5,\"node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster\",3306,\"LEAF\",\"lo\",40557063,40557063"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ngo-metro/datadog_checks/go-metro/data/conf.yaml.example\n## context:\n## All options defined here are available to all instances.\n#\ninit_config:\n\n    ## @param snaplen - integer - required\n    ## should be >=104 (to accommodate for the largest possible TCP header)\n    #\n    snaplen: 512\n\n    ## @param idle_ttl - integer - required\n    ## Time after which an idle flow (no traffic received) is flushed.\n    #\n    idle_ttl: 300\n\n    ## @param exp_ttl - integer - required\n    ## Time after which a finished flow is flushed.\n    #\n    exp_ttl: 60\n\n    ## @param statsd_ip - string - required\n    ## StatsD IP.\n    #\n    statsd_ip: 127.0.0.1\n\n    ## @param statsd_port - integer - required\n    ## StatsD Port.\n    #\n    statsd_port: 8125\n\n    ## @param log_to_file - boolean - required\n    ## Whether or not this check should log in the Agent log file.\n    #\n    log_to_file: true\n\n    ## @param log_level - string - required\n    ## Minimum level of logs logged by this check.\n    ## available levels: trace, debug, info, warning, error, critical\n    #\n    log_level: info\n\n    ## @param service - string - optional\n    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.\n    ##\n    ## Additionally, this sets the default `service` for every log source.\n    #\n    # service: <SERVICE>\n\n## Every instance is scheduled independent of the others.\n#\ninstances:\n\n    ## @param interface - string - required\n    ## Name of the interface to sniff from.\n    #\n  - interface: eth0\n\n    ## @param ips - list of strings - required\n    ## Include by IP - The check performs name lookup and tags with hostname if available.\n    ## Which avoids having go-metro inspect every incoming/outgoing packet through the interface.\n    #\n    ips:\n      - <IP>\n\n    ## @param hosts - list of strings - required\n    ## Include by hostname - The check performs ip lookup and filter by hosts IP's\n    ## which avoids having go-metro inspect every incoming/outgoing packet through the interface.\n    #\n    hosts:\n      - <HOSTNAME>\n\n    ## @param tags - list of strings - optional\n    ## A list of tags to attach to every metric and service check emitted by this instance.\n    ##\n    ## Learn more about tagging at https://docs.datadoghq.com/tagging\n    #\n    # tags:\n    #   - <KEY_1>:<VALUE_1>\n    #   - <KEY_2>:<VALUE_2>\n\n    ## @param service - string - optional\n    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.\n    ##\n    ## Overrides any `service` defined in the `init_config` section.\n    #\n    # service: <SERVICE>\n\n    ## @param min_collection_interval - number - optional - default: 15\n    ## This changes the collection interval of the check. For more information, see:\n    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval\n    #\n    # min_collection_interval: 15\n\n    ## @param empty_default_hostname - boolean - optional - default: false\n    ## This forces the check to send metrics with no hostname.\n    ##\n    ## This is useful for cluster-level checks.\n    #\n    # empty_default_hostname: false\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndocker_daemon/metadata.csv\n## context:\nmetric_name,metric_type,interval,unit_name,per_unit_name,description,orientation,integration,short_name\ndocker.cpu.limit,gauge,,percent,,\"Limit on CPU available to the container, expressed as percentage of a core\",0,docker,docker.cpu.limit\ndocker.cpu.system,gauge,,percent,,\"The percent of time the CPU is executing system calls on behalf of processes of this container, unnormalized\",0,docker,cpu system\ndocker.cpu.system.95percentile,gauge,,percent,,95th percentile of docker.cpu.system,0,docker,cpu system 95%\ndocker.cpu.system.avg,gauge,,percent,,Average value of docker.cpu.system,0,docker,cpu system avg\ndocker.cpu.system.count,rate,,sample,second,The rate that the value of docker.cpu.system was sampled,0,docker,cpu system count\ndocker.cpu.system.max,gauge,,percent,,Max value of docker.cpu.system,0,docker,cpu system max\ndocker.cpu.system.median,gauge,,percent,,Median value of docker.cpu.system,0,docker,cpu system median\ndocker.cpu.user,gauge,,percent,,\"The percent of time the CPU is under direct control of processes of this container, unnormalized\",0,docker,cpu user\ndocker.cpu.user.95percentile,gauge,,percent,,95th percentile of docker.cpu.user,0,docker,cpu user 95%\ndocker.cpu.user.avg,gauge,,percent,,Average value of docker.cpu.user,0,docker,cpu user avg\ndocker.cpu.user.count,rate,,sample,second,The rate that the value of docker.cpu.user was sampled,0,docker,cpu user count\ndocker.cpu.user.max,gauge,,percent,,Max value of docker.cpu.user,0,docker,cpu user max\ndocker.cpu.user.median,gauge,,percent,,Median value of docker.cpu.user,0,docker,cpu user median\ndocker.cpu.usage,gauge,,percent,,The percent of CPU time obtained by this container,0,docker,docker.cpu.usage\ndocker.cpu.throttled,gauge,,,,Number of times the cgroup has been throttled,-1,docker,cpu throttled\ndocker.cpu.shares,gauge,,,,Shares of CPU usage allocated to the container,0,docker,cpu shares\ndocker.kmem.usage,gauge,,byte,,\"The amount of kernel memory that belongs to the container's processes.\",0,docker,kmem usage\ndocker.mem.cache,gauge,,byte,,The amount of memory that is being used to cache data from disk (e.g. memory contents that can be associated precisely with a block on a block device),0,docker,mem cache\ndocker.mem.cache.95percentile,gauge,,byte,,95th percentile value of docker.mem.cache,0,docker,mem cache 95%\ndocker.mem.cache.avg,gauge,,byte,,Average value of docker.mem.cache,0,docker,mem cache avg\ndocker.mem.cache.count,rate,,sample,second,The rate that the value of docker.mem.cache was sampled,0,docker,mem cache count\ndocker.mem.cache.max,gauge,,byte,,Max value of docker.mem.cache,0,docker,mem cache max\ndocker.mem.cache.median,gauge,,byte,,Median value of docker.mem.cache,0,docker,mem cache median\ndocker.mem.rss,gauge,,byte,,\"The amount of non-cache memory that belongs to the container's processes. Used for stacks, heaps, etc.\",0,docker,mem rss\ndocker.mem.rss.95percentile,gauge,,byte,,95th percentile value of docker.mem.rss,0,docker,mem rss 95%\ndocker.mem.rss.avg,gauge,,byte,,Average value of docker.mem.rss,0,docker,mem rss avg\ndocker.mem.rss.count,rate,,sample,second,The rate that the value of docker.mem.rss was sampled,0,docker,mem rss count\ndocker.mem.rss.max,gauge,,byte,,Max value of docker.mem.rss,0,docker,mem rss max\ndocker.mem.rss.median,gauge,,byte,,Median value of docker.mem.rss,0,docker,mem rss median\ndocker.mem.swap,gauge,,byte,,The amount of swap currently used by the container,0,docker,mem swap\ndocker.mem.swap.95percentile,gauge,,byte,,95th percentile value of docker.mem.swap,0,docker,mem swap 95%\ndocker.mem.swap.avg,gauge,,byte,,Average value of docker.mem.swap,0,docker,mem swap avg\ndocker.mem.swap.count,rate,,sample,second,The rate that the value of docker.mem.swap was sampled,0,docker,mem swap count\ndocker.mem.swap.max,gauge,,byte,,Max value of docker.mem.swap,0,docker,mem swap max\ndocker.mem.swap.median,gauge,,byte,,Median value of docker.mem.swap,0,docker,mem swap median\ndocker.container.open_fds,gauge,,file,,The number of open file descriptors,0,docker,open_fds\ndocker.container.size_rw,gauge,,byte,,Total size of all the files in the container which have been created or changed by processes running in the container,0,docker,changed files size\ndocker.container.size_rw.95percentile,gauge,,byte,,95th percentile of docker.container.size_rw,0,docker,changed files size 95%\ndocker.container.size_rw.avg,gauge,,byte,,Average value of docker.container.size_rw,0,docker,changed files size avg\ndocker.container.size_rw.count,rate,,sample,second,The rate that the value of docker.container.size_rw was sampled,0,docker,changed files size count\ndocker.container.size_rw.max,gauge,,byte,,Max value of docker.container.size_rw,0,docker,changed files size max\ndocker.container.size_rw.median,gauge,,byte,,Median value of docker.container.size_rw,0,docker,changed files size median\ndocker.container.size_rootfs,gauge,,byte,,Total size of all the files in the container,0,docker,filesystem size\ndocker.container.size_rootfs.95percentile,gauge,,byte,,95th percentile of docker.container.size_rootfs,0,docker,filesystem size 95%\ndocker.container.size_rootfs.avg,gauge,,byte,,Average value of docker.container.size_rootfs,0,docker,filesystem size avg\ndocker.container.size_rootfs.count,rate,,sample,second,The rate that the value of docker.container.size_rw was sampled,0,docker,filesystem size count\ndocker.container.size_rootfs.max,gauge,,byte,,Max value of docker.container.size_rootfs,0,docker,filesystem size max\ndocker.container.size_rootfs.median,gauge,,byte,,Median value of docker.container.size_rootfs,0,docker,filesystem size median\ndocker.containers.running,gauge,,,,The number of containers running on this host tagged by image,0,docker,containers running\ndocker.containers.stopped,gauge,,,,The number of containers stopped on this host tagged by image,0,docker,containers stopped\ndocker.containers.running.total,gauge,,,,The total number of containers running on this host,0,docker,total containers running\ndocker.containers.stopped.total,gauge,,,,The total number of containers stopped on this host,0,docker,total containers stopped\ndocker.images.available,gauge,,,,The number of top-level images,0,docker,images avail\ndocker.images.intermediate,gauge,,,,\"The number of intermediate images, which are intermediate layers that make up other images\",0,docker,images intermediate\ndocker.mem.limit,gauge,,byte,,\"The memory limit for the container, if set\",0,docker,mem limit\ndocker.mem.limit.95percentile,gauge,,byte,,95th percentile of docker.mem.limit. Ordinarily this value will not change,0,docker,mem limit 95%\ndocker.mem.limit.avg,gauge,,byte,,Average value of docker.mem.limit. Ordinarily this value will not change,0,docker,mem limit avg\ndocker.mem.limit.count,rate,,sample,second,The rate that the value of docker.mem.limit was sampled,0,docker,mem limit count\ndocker.mem.limit.max,gauge,,byte,,Max value of docker.mem.limit. Ordinarily this value will not change,0,docker,mem limit max\ndocker.mem.limit.median,gauge,,byte,,Median value of docker.mem.limit. Ordinarily this value will not change,0,docker,mem limit median\ndocker.mem.sw_limit,gauge,,byte,,\"The swap + memory limit for the container, if set\",0,docker,mem + sw limit\ndocker.mem.sw_limit.95percentile,gauge,,byte,,95th percentile of docker.mem.sw_limit. Ordinarily this value will not change,0,docker,mem + sw limit 95%\ndocker.mem.sw_limit.avg,gauge,,byte,,Average value of docker.mem.sw_limit. Ordinarily this value will not change,0,docker,mem + sw limit avg\ndocker.mem.sw_limit.count,rate,,sample,second,The rate that the value of docker.mem.sw_limit was sampled,0,docker,mem + sw limit count\ndocker.mem.sw_limit.max,gauge,,byte,,Max value of docker.mem.sw_limit. Ordinarily this value will not change,0,docker,mem + sw limit max\ndocker.mem.sw_limit.median,gauge,,byte,,Median value of docker.mem.sw_limit. Ordinarily this value will not change,0,docker,mem + sw limit median\ndocker.mem.soft_limit,gauge,,byte,,\"The memory reservation limit for the container, if set\",0,docker,mem soft limit\ndocker.mem.soft_limit.95percentile,gauge,,byte,,95th percentile of docker.mem.soft_limit. Ordinarily this value will not change,0,docker,soft limit 95%\ndocker.mem.soft_limit.avg,gauge,,byte,,Average value of docker.mem.soft_limit. Ordinarily this value will not change,0,docker,soft limit avg\ndocker.mem.soft_limit.count,rate,,sample,second,The rate that the value of docker.mem.soft_limit was sampled,0,docker,soft limit count\ndocker.mem.soft_limit.max,gauge,,byte,,Max value of docker.mem.soft_limit. Ordinarily this value will not change,0,docker,soft limit max\ndocker.mem.soft_limit.median,gauge,,byte,,Median value of docker.mem.soft_limit. Ordinarily this value will not change,0,docker,soft limit median\ndocker.mem.in_use,gauge,,fraction,,\"The fraction of used memory to available memory, IF THE LIMIT IS SET\",0,docker,mem in use\ndocker.mem.in_use.95percentile,gauge,,fraction,,95th percentile of docker.mem.in_use,0,docker,mem in use 95%\ndocker.mem.in_use.avg,gauge,,fraction,,Average value of docker.mem.in_use,0,docker,mem in use avg\ndocker.mem.in_use.count,rate,,sample,second,The rate that the value of docker.mem.in_use was sampled,0,docker,mem in use count\ndocker.mem.in_use.max,gauge,,fraction,,Max value of docker.container.mem.in_use,0,docker,mem in use max\ndocker.mem.in_use.median,gauge,,fraction,,Median value of docker.container.mem.in_use,0,docker,mem in use median\ndocker.mem.sw_in_use,gauge,,fraction,,\"The fraction of used swap + memory to available swap + memory, if the limit is set\",0,docker,mem + sw in use\ndocker.mem.sw_in_use.95percentile,gauge,,fraction,,95th percentile of docker.mem.sw_in_use,0,docker,mem + sw in use 95%\ndocker.mem.sw_in_use.avg,gauge,,fraction,,Average value of docker.mem.sw_in_use,0,docker,mem + sw in use avg\ndocker.mem.sw_in_use.count,rate,,sample,second,The rate that the value of docker.mem.sw_in_use was sampled,0,docker,mem + sw in use count\ndocker.mem.sw_in_use.max,gauge,,fraction,,Max value of docker.container.mem.sw_in_use,0,docker,mem + sw in use max\ndocker.mem.sw_in_use.median,gauge,,fraction,,Median value of docker.container.mem.sw_in_use,0,docker,mem + sw in use median\ndocker.io.read_bytes,gauge,,byte,second,Bytes read per second from disk by the processes of the container,0,docker,io read\ndocker.io.read_bytes.95percentile,gauge,,byte,second,95th percentile of docker.io.read_bytes,0,docker,io read 95%\ndocker.io.read_bytes.avg,gauge,,byte,second,Average value of docker.io.read_bytes,0,docker,io read avg\ndocker.io.read_bytes.count,rate,,sample,second,The rate that the value of docker.io.read_bytes was sampled,0,docker,io read count\ndocker.io.read_bytes.max,gauge,,byte,second,Max value of docker.container.io.read_bytes,0,docker,io read max\ndocker.io.read_bytes.median,gauge,,byte,second,Median value of docker.container.io.read_bytes,0,docker,io read median\ndocker.io.write_bytes,gauge,,byte,second,Bytes written per second to disk by the processes of the container,0,docker,io write\ndocker.io.write_bytes.95percentile,gauge,,byte,second,95th percentile of docker.io.write_bytes,0,docker,io write 95%\ndocker.io.write_bytes.avg,gauge,,byte,second,Average value of docker.io.write_bytes,0,docker,io write avg\ndocker.io.write_bytes.count,rate,,sample,second,The rate that the value of docker.io.write_bytes was sampled,0,docker,io write count\ndocker.io.write_bytes.max,gauge,,byte,second,Max value of docker.container.io.write_bytes,0,docker,io write max\ndocker.io.write_bytes.median,gauge,,byte,second,Median value of docker.container.io.write_bytes,0,docker,io write median\ndocker.image.virtual_size,gauge,,byte,,Size of all layers of the image on disk,0,docker,image v size\ndocker.image.size,gauge,,byte,,Size of all layers of the image on disk,0,docker,image size\ndocker.net.bytes_rcvd,gauge,,byte,second,Bytes received per second from the network,0,docker,net received\ndocker.net.bytes_rcvd.95percentile,gauge,,byte,second,95th percentile of docker.net.bytes_rcvd,0,docker,net received 95%\ndocker.net.bytes_rcvd.avg,gauge,,byte,second,Average value of docker.net.bytes_rcvd,0,docker,net received avg\ndocker.net.bytes_rcvd.count,rate,,sample,second,The rate that the value of docker.net.bytes_rcvd was sampled,0,docker,net received count\ndocker.net.bytes_rcvd.max,gauge,,byte,second,Max value of docker.container.net.bytes_rcvd,0,docker,net received max\ndocker.net.bytes_rcvd.median,gauge,,byte,second,Median value of docker.container.net.bytes_rcvd,0,docker,net received median\ndocker.net.bytes_sent,gauge,,byte,second,Bytes sent per second to the network,0,docker,net sent\ndocker.net.bytes_sent_bytes.95percentile,gauge,,byte,second,95th percentile of docker.net.bytes_sent_bytes,0,docker,net sent 95%\ndocker.net.bytes_sent_bytes.avg,gauge,,byte,second,Average value of docker.net.bytes_sent_bytes,0,docker,net sent avg\ndocker.net.bytes_sent_bytes.count,rate,,sample,second,The rate that the value of docker.net.bytes_sent_bytes was sampled,0,docker,net sent count\ndocker.net.bytes_sent_bytes.max,gauge,,byte,second,Max value of docker.container.net.bytes_sent_bytes,0,docker,net sent max\ndocker.net.bytes_sent_bytes.median,gauge,,byte,second,Median value of docker.container.net.bytes_sent_bytes,0,docker,net sent median\ndocker.data.used,gauge,,byte,,Storage pool disk space used,0,docker,used disk space\ndocker.data.free,gauge,,byte,,Storage pool disk space free,0,docker,free disk space\ndocker.data.total,gauge,,byte,,Storage pool disk space total,0,docker,total disk space\ndocker.data.percent,gauge,,percent,,The percent of storage pool used,0,docker,percent of used disk space\ndocker.metadata.used,gauge,,byte,,Storage pool metadata space used,0,docker,metadata space used\ndocker.metadata.free,gauge,,byte,,Storage pool metadata space free,0,docker,metadata space free\ndocker.metadata.total,gauge,,byte,,Storage pool metadata space total,0,docker,metadata space total\ndocker.metadata.percent,gauge,,percent,,The percent of storage pool metadata used,0,docker,percent of metadata space total\ndocker.thread.count,gauge,,thread,,\"Current thread count for the container\",0,docker,thread.count\ndocker.thread.limit,gauge,,thread,,\"Thread count limit for the container, if set\",0,docker,thread.limit\ndocker.uptime,gauge,,second,,Time since the container was started,0,docker,uptime\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ngo-metro/datadog_checks/go-metro/data/conf.yaml.example\n## context:\n## All options defined here are available to all instances.\n#\ninit_config:\n\n    ## @param snaplen - integer - required\n    ## should be >=104 (to accommodate for the largest possible TCP header)\n    #\n    snaplen: 512\n\n    ## @param idle_ttl - integer - required\n    ## Time after which an idle flow (no traffic received) is flushed.\n    #\n    idle_ttl: 300\n\n    ## @param exp_ttl - integer - required\n    ## Time after which a finished flow is flushed.\n    #\n    exp_ttl: 60\n\n    ## @param statsd_ip - string - required\n    ## StatsD IP.\n    #\n    statsd_ip: 127.0.0.1\n\n    ## @param statsd_port - integer - required\n    ## StatsD Port.\n    #\n    statsd_port: 8125\n\n    ## @param log_to_file - boolean - required\n    ## Whether or not this check should log in the Agent log file.\n    #\n    log_to_file: true\n\n    ## @param log_level - string - required\n    ## Minimum level of logs logged by this check.\n    ## available levels: trace, debug, info, warning, error, critical\n    #\n    log_level: info\n\n    ## @param service - string - optional\n    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.\n    ##\n    ## Additionally, this sets the default `service` for every log source.\n    #\n    # service: <SERVICE>\n\n## Every instance is scheduled independent of the others.\n#\ninstances:\n\n    ## @param interface - string - required\n    ## Name of the interface to sniff from.\n    #\n  - interface: eth0\n\n    ## @param ips - list of strings - required\n    ## Include by IP - The check performs name lookup and tags with hostname if available.\n    ## Which avoids having go-metro inspect every incoming/outgoing packet through the interface.\n    #\n    ips:\n      - <IP>\n\n    ## @param hosts - list of strings - required\n    ## Include by hostname - The check performs ip lookup and filter by hosts IP's\n    ## which avoids having go-metro inspect every incoming/outgoing packet through the interface.\n    #\n    hosts:\n      - <HOSTNAME>\n\n    ## @param tags - list of strings - optional\n    ## A list of tags to attach to every metric and service check emitted by this instance.\n    ##\n    ## Learn more about tagging at https://docs.datadoghq.com/tagging\n    #\n    # tags:\n    #   - <KEY_1>:<VALUE_1>\n    #   - <KEY_2>:<VALUE_2>\n\n    ## @param service - string - optional\n    ## Attach the tag `service:<SERVICE>` to every metric, event, and service check emitted by this integration.\n    ##\n    ## Overrides any `service` defined in the `init_config` section.\n    #\n    # service: <SERVICE>\n\n    ## @param min_collection_interval - number - optional - default: 15\n    ## This changes the collection interval of the check. For more information, see:\n    ## https://docs.datadoghq.com/developers/write_agent_check/#collection-interval\n    #\n    # min_collection_interval: 15\n\n    ## @param empty_default_hostname - boolean - optional - default: false\n    ## This forces the check to send metrics with no hostname.\n    ##\n    ## This is useful for cluster-level checks.\n    #\n    # empty_default_hostname: false\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nignite/tests/compose/config.xml\n## context:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"ignite.cfg\" class=\"org.apache.ignite.configuration.IgniteConfiguration\">\n        <!-- Enabling Apache Ignite Persistent Store. -->\n        <property name=\"dataStorageConfiguration\">\n            <bean class=\"org.apache.ignite.configuration.DataStorageConfiguration\">\n                <property name=\"defaultDataRegionConfiguration\">\n                    <bean class=\"org.apache.ignite.configuration.DataRegionConfiguration\">\n                        <property name=\"persistenceEnabled\" value=\"true\"/>\n                    </bean>\n                </property>\n            </bean>\n        </property>\n\n\t<property name=\"cacheConfiguration\">\n            <list>\n                <!-- Partitioned cache example configuration (Atomic mode). -->\n                <bean class=\"org.apache.ignite.configuration.CacheConfiguration\">\n                    <property name=\"name\" value=\"default\"/>\n                    <property name=\"atomicityMode\" value=\"ATOMIC\"/>\n                    <property name=\"backups\" value=\"1\"/>\n                </bean>\n            </list>\n        </property>\n\n        <!-- Explicitly configure TCP discovery SPI to provide a list of initial nodes. -->\n        <property name=\"discoverySpi\">\n            <bean class=\"org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi\">\n                <property name=\"ipFinder\">\n                    <!-- Uncomment static IP finder to enable static-based discovery of initial nodes. -->\n                    <!--<bean class=\"org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder\">-->\n                    <bean class=\"org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder\">\n                        <property name=\"addresses\">\n                            <list>\n                                <!-- In distributed environment, replace with actual host IP address. -->\n                                <value>127.0.0.1:47500..47502</value>\n                            </list>\n                        </property>\n                    </bean>\n                </property>\n            </bean>\n        </property>\n    </bean>\n</beans>\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\noracle/tests/docker/client/listener.ora\n## context:\nLISTENER =\n   (DESCRIPTION_LIST =\n     (DESCRIPTION =\n       (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))\n       (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))\n       (ADDRESS = (PROTOCOL = TCPS)(HOST = 0.0.0.0)(PORT = 2484))\n     )\n   ) \nDIAG_ADR_ENABLED = off\nSSL_VERSION = 1.2\n\n\nSSL_CLIENT_AUTHENTICATION = FALSE\n\nWALLET_LOCATION =\n  (SOURCE =\n    (METHOD = FILE)\n    (METHOD_DATA =\n      (DIRECTORY = /opt/oracle/instantclient_19_3/client_wallet))\n    )\n  )\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmongo/assets/saved_views/queries.json\n## context:\n{ \n  \"name\": \"Mongo queries\",\n  \"type\": \"logs\",\n  \"page\": \"stream\",\n  \"query\": \"source:mongodb @mongo.query.type:*\",\n  \"timerange\": {\n    \"interval_ms\": 3600000\n  },\n  \"visible_facets\": [\"source\", \"host\", \"service\", \"status\", \"@db.instance\", \"@db.operation\", \"@mongo.collection\", \"@mongo.planSummary.type\", \"@mongo.query.type\", \"@mongo.context\", \"@duration\"],\n  \"options\": {\n    \"columns\": [\"status\", \"host\", \"@db.operation\", \"@mongo.query.type\"],\n    \"show_date_column\": true,\n    \"show_message_column\": true,\n    \"message_display\": \"inline\",\n    \"show_timeline\": true\n  }\n}\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[sqlserver] Add 'recovery model' tag to database metrics\nAdd the `recovery_model_desc` column from `sys.databases` to `SqlBaseStats` as a tag. This would be a useful addition to be able to filter off of for alerts, and since the data is already being queried it should be a minor update.\r\n\r\nhttps://github.com/DataDog/integrations-core/blob/01b9aaa746ca94f0b233b41b357cc61b58f3f7ae/sqlserver/datadog_checks/sqlserver/metrics.py#L687-L715\r\n\r\nHappy to make the PR if the suggestion is accepted.\r\n\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\noracle/tests/docker/client/listener.ora\n## context:\nLISTENER =\n   (DESCRIPTION_LIST =\n     (DESCRIPTION =\n       (ADDRESS = (PROTOCOL = TCP)(HOST = 0.0.0.0)(PORT = 1521))\n       (ADDRESS = (PROTOCOL = IPC)(KEY = EXTPROC1521))\n       (ADDRESS = (PROTOCOL = TCPS)(HOST = 0.0.0.0)(PORT = 2484))\n     )\n   ) \nDIAG_ADR_ENABLED = off\nSSL_VERSION = 1.2\n\n\nSSL_CLIENT_AUTHENTICATION = FALSE\n\nWALLET_LOCATION =\n  (SOURCE =\n    (METHOD = FILE)\n    (METHOD_DATA =\n      (DIRECTORY = /opt/oracle/instantclient_19_3/client_wallet))\n    )\n  )\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nignite/tests/compose/config.xml\n## context:\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<!--\n  Licensed to the Apache Software Foundation (ASF) under one or more\n  contributor license agreements.  See the NOTICE file distributed with\n  this work for additional information regarding copyright ownership.\n  The ASF licenses this file to You under the Apache License, Version 2.0\n  (the \"License\"); you may not use this file except in compliance with\n  the License.  You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n-->\n\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\">\n    <bean id=\"ignite.cfg\" class=\"org.apache.ignite.configuration.IgniteConfiguration\">\n        <!-- Enabling Apache Ignite Persistent Store. -->\n        <property name=\"dataStorageConfiguration\">\n            <bean class=\"org.apache.ignite.configuration.DataStorageConfiguration\">\n                <property name=\"defaultDataRegionConfiguration\">\n                    <bean class=\"org.apache.ignite.configuration.DataRegionConfiguration\">\n                        <property name=\"persistenceEnabled\" value=\"true\"/>\n                    </bean>\n                </property>\n            </bean>\n        </property>\n\n\t<property name=\"cacheConfiguration\">\n            <list>\n                <!-- Partitioned cache example configuration (Atomic mode). -->\n                <bean class=\"org.apache.ignite.configuration.CacheConfiguration\">\n                    <property name=\"name\" value=\"default\"/>\n                    <property name=\"atomicityMode\" value=\"ATOMIC\"/>\n                    <property name=\"backups\" value=\"1\"/>\n                </bean>\n            </list>\n        </property>\n\n        <!-- Explicitly configure TCP discovery SPI to provide a list of initial nodes. -->\n        <property name=\"discoverySpi\">\n            <bean class=\"org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi\">\n                <property name=\"ipFinder\">\n                    <!-- Uncomment static IP finder to enable static-based discovery of initial nodes. -->\n                    <!--<bean class=\"org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder\">-->\n                    <bean class=\"org.apache.ignite.spi.discovery.tcp.ipfinder.multicast.TcpDiscoveryMulticastIpFinder\">\n                        <property name=\"addresses\">\n                            <list>\n                                <!-- In distributed environment, replace with actual host IP address. -->\n                                <value>127.0.0.1:47500..47502</value>\n                            </list>\n                        </property>\n                    </bean>\n                </property>\n            </bean>\n        </property>\n    </bean>\n</beans>\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nyarn/datadog_checks/yarn/__init__.py\n## context:\nfrom . import yarn\n\nYarnCheck = yarn.YarnCheck\n\n__version__ = \"1.1.0\"\n\n__all__ = ['yarn']\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nvsphere/requirements.in\n## context:\n# integration pip requirements\npyvmomi==6.0.0\nsix==1.11.0\nrequests==2.11.1\ncertifi==2017.11.5\nchardet==3.0.4\nidna==2.6\nurllib3==1.22\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nactivemq/conf.yaml.example\n## context:\n##########\n# WARNING\n##########\n# This sample works only for ActiveMQ >= 5.8.0\n# If you are running a version older than that, you can refer to agent 5.10.x released\n# sample files, https://raw.githubusercontent.com/DataDog/dd-agent/5.10.1/conf.d/activemq.yaml.example\n\ninstances:\n  - host: localhost\n    port: 1099\n  #   user: username\n  #   password: password\n  #   process_name_regex: .*process_name.* # Instead of specifying a host, and port. The agent can connect using the attach api.\n  #                                        # This requires the JDK to be installed and the path to tools.jar to be set below.\n  #   tools_jar_path: /usr/lib/jvm/java-7-openjdk-amd64/lib/tools.jar # To be set when process_name_regex is set\n  #   name: activemq_instance\n  #   # java_bin_path: /path/to/java # Optional, should be set if the agent cannot find your java executable\n  #   # java_options: \"-Xmx200m -Xms50m\" # Optional, Java JVM options\n  #   # trust_store_path: /path/to/trustStore.jks # Optional, should be set if ssl is enabled\n  #   # trust_store_password: password\n  #   tags:\n  #     env: stage\n  #     newTag: test\n\ninit_config:\n  is_jmx: true\n  collect_default_metrics: true\n\n  # List of metrics to be collected by the integration\n  # Read http://docs.datadoghq.com/integrations/java/ to learn how to customize it\n  # Agent 5: Customize all your metrics below\n  # Agent 6: The default metrics to be collected are kept in metrics.yaml, but you can still add your own metrics here\n  conf:\n    - include:\n        destinationType: Queue\n        attribute:\n          AverageEnqueueTime:\n            alias: activemq.queue.avg_enqueue_time\n            metric_type: gauge\n          ConsumerCount:\n            alias: activemq.queue.consumer_count\n            metric_type: gauge\n          ProducerCount:\n            alias: activemq.queue.producer_count\n            metric_type: gauge\n          MaxEnqueueTime:\n            alias: activemq.queue.max_enqueue_time\n            metric_type: gauge\n          MinEnqueueTime:\n            alias: activemq.queue.min_enqueue_time\n            metric_type: gauge\n          MemoryPercentUsage:\n            alias: activemq.queue.memory_pct\n            metric_type: gauge\n          QueueSize:\n            alias: activemq.queue.size\n            metric_type: gauge\n          DequeueCount:\n            alias: activemq.queue.dequeue_count\n            metric_type: counter\n          DispatchCount:\n            alias: activemq.queue.dispatch_count\n            metric_type: counter\n          EnqueueCount:\n            alias: activemq.queue.enqueue_count\n            metric_type: counter\n          ExpiredCount:\n            alias: activemq.queue.expired_count\n            metric_type: counter\n          InFlightCount:\n            alias: activemq.queue.in_flight_count\n            metric_type: counter\n\n    - include:\n        type: Broker\n        attribute:\n          StorePercentUsage:\n            alias: activemq.broker.store_pct\n            metric_type: gauge\n          TempPercentUsage:\n            alias: activemq.broker.temp_pct\n            metric_type: gauge\n          MemoryPercentUsage:\n            alias: activemq.broker.memory_pct\n            metric_type: gauge\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsqlserver/notes.txt\n## context:\nsimple_metrics\nfraction_metrics"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nlighttpd/requirements.txt\n## context:\n# integration pip requirements\nrequests==2.11.1 \\\n    --hash=sha256:545c4855cd9d7c12671444326337013766f4eea6068c3f0307fb2dc2696d580e \\\n    --hash=sha256:5acf980358283faba0b897c73959cecf8b841205bb4b2ad3ef545f46eae1a133\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nconsul/test/ci/consul.rake\n## context:\nrequire 'ci/common'\n\ndef consul_version\n  ENV['FLAVOR_VERSION'] || '0.7.2'\nend\n\ndef consul_config\n  \"server-#{consul_version}.json\"\nend\n\ndef consul_rootdir\n  \"#{ENV['INTEGRATIONS_DIR']}/consul_#{consul_version}\"\nend\n\ncontainer_name_1 = 'dd-test-consul-1'\ncontainer_name_2 = 'dd-test-consul-2'\ncontainer_name_3 = 'dd-test-consul-3'\n\nnamespace :ci do\n  namespace :consul do |flavor|\n    task before_install: ['ci:common:before_install'] do\n      sh %(docker stop dd-test-consul-1 dd-test-consul-2 dd-test-consul-3 2>/dev/null || true)\n      sh %(docker rm  dd-test-consul-1 dd-test-consul-2 dd-test-consul-3 2>/dev/null || true)\n    end\n\n    task :install do\n      Rake::Task['ci:common:install'].invoke('consul')\n      # sample docker usage\n      sh %( docker run -d --expose 8301 --expose 8500 -p 8500:8500 --name #{container_name_1} \\\n            --volume #{__dir__}/#{consul_config}:/consul/config/server.json:ro \\\n            consul:#{consul_version} agent -dev -bind=0.0.0.0 -client=0.0.0.0 )\n      Wait.for 8500\n      wait_on_docker_logs(container_name_1, 30, 'agent: Node info in sync', \"agent: Synced service 'consul'\", 'agent: Synced node info')\n\n      consul_first_ip = `docker inspect #{container_name_1} | grep '\"IPAddress\"'`[/([0-9\\.]+)/]\n      sh %( docker run -d --expose 8301 --name #{container_name_2} --volume #{__dir__}/#{consul_config}:/consul/config/server.json:ro \\\n            consul:#{consul_version} agent -dev -join=#{consul_first_ip} -bind=0.0.0.0 )\n      wait_on_docker_logs(container_name_2, 30, 'agent: Node info in sync', \"agent: Synced service 'consul'\", 'agent: Synced node info')\n\n      sh %( docker run -d --expose 8301 --name #{container_name_3} --volume #{__dir__}/#{consul_config}:/consul/config/server.json:ro \\\n            consul:#{consul_version} agent -dev -join=#{consul_first_ip} -bind=0.0.0.0)\n      wait_on_docker_logs(container_name_3, 30, 'agent: Node info in sync', \"agent: Synced service 'consul'\", 'agent: Synced node info')\n    end\n\n    task before_script: ['ci:common:before_script']\n\n    task script: ['ci:common:script'] do\n      this_provides = [\n        'consul'\n      ]\n      Rake::Task['ci:common:run_tests'].invoke(this_provides)\n    end\n\n    task before_cache: ['ci:common:before_cache']\n\n    task cleanup: ['ci:common:cleanup'] do\n      sh %(docker stop dd-test-consul-1 dd-test-consul-2 dd-test-consul-3 2>/dev/null || true)\n      sh %(docker rm  dd-test-consul-1 dd-test-consul-2 dd-test-consul-3 2>/dev/null || true)\n    end\n\n    task :execute do\n      exception = nil\n      begin\n        %w(before_install install before_script).each do |u|\n          Rake::Task[\"#{flavor.scope.path}:#{u}\"].invoke\n        end\n        if !ENV['SKIP_TEST']\n          Rake::Task[\"#{flavor.scope.path}:script\"].invoke\n        else\n          puts 'Skipping tests'.yellow\n        end\n        Rake::Task[\"#{flavor.scope.path}:before_cache\"].invoke\n      rescue => e\n        exception = e\n        puts \"Failed task: #{e.class} #{e.message}\".red\n      end\n      if ENV['SKIP_CLEANUP']\n        puts 'Skipping cleanup, disposable environments are great'.yellow\n      else\n        puts 'Cleaning up'\n        Rake::Task[\"#{flavor.scope.path}:cleanup\"].invoke\n      end\n      raise exception if exception\n    end\n  end\nend\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkubernetes_state/manifest.json\n## context:\n{\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"0.1.1\",\n  \"max_agent_version\": \"6.0.0\",\n  \"min_agent_version\": \"5.20.0\",\n  \"name\": \"kubernetes_state\",\n  \"short_description\": \"Capture Pod scheduling events, track the status of your Kubelets, and more.\",\n  \"guid\": \"fa0e4395-3eae-4df8-88f2-9d7075c21a2d\",\n  \"support\": \"contrib\",\n  \"supported_os\": [\n    \"linux\",\n    \"mac_os\"\n  ],\n  \"version\": \"2.3.0\",\n  \"use_omnibus_reqs\": true,\n  \"public_title\": \"Datadog-Kubernetes State Integration\",\n  \"categories\":[\"orchestration\", \"containers\"],\n  \"type\":\"check\",\n  \"doc_link\": \"https://docs.datadoghq.com/integrations/kubernetes_state/\",\n  \"is_public\": true,\n  \"has_logo\": true\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nnginx/test/ci/testing.crt\n## context:\n-----BEGIN CERTIFICATE-----\nMIIDGzCCAgOgAwIBAgIJANPtTQnZmjnPMA0GCSqGSIb3DQEBBQUAMCQxEDAOBgNV\nBAoMB1Rlc3RpbmcxEDAOBgNVBAMMB1Rlc3RpbmcwHhcNMTUwNzIzMTg0MzAzWhcN\nMTYwNzIyMTg0MzAzWjAkMRAwDgYDVQQKDAdUZXN0aW5nMRAwDgYDVQQDDAdUZXN0\naW5nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA9EXrQeJEeuqIzdVP\nNlrglH1E2RiPh5pALrprJTYVZTbGRcubB0wkEMED8TdQTIuZIt56DWFcz6/e9L8v\nqexR9Vwa8u0vH9L4gJ4vOdSfiaPh66aRoGhlRaWzaqmbSjGN+06am0EWoLVqCS2+\n9jQ4lva+atCVFMkOenX3niBsKIVI4euEwU7rtQ+0PUJVmEjo6krWukdBEhozpCq6\nZm2B5sqAEYz8hWQpAM6hM58xYL41lSGAV0Cmh37mXMMdIOcK1DY3/pUpCTS5TcSp\nxCce61MEZhAHbfJlwJzHem5MSXgxoCzymT7/Ik08GYItAIo0Y0xg3Vhw8Je5pvHW\noz4fhQIDAQABo1AwTjAdBgNVHQ4EFgQUek/ZgsnuBl4acJ/srxIIkJDaUQ0wHwYD\nVR0jBBgwFoAUek/ZgsnuBl4acJ/srxIIkJDaUQ0wDAYDVR0TBAUwAwEB/zANBgkq\nhkiG9w0BAQUFAAOCAQEASugib099pwRa3nNFwBslQIRFItk6M1izC3SKaTlhrgQl\ncxI6Z7RrgpWVC7MEi4Spy+UICdpJh+b8o75XgZPrPgcL6wT0/UYXBGCGTed54RMH\nX0OYIkvRQBVk8pm4IteWeQxMyCG+kGc9QTQ1M3KW+Rk2t5KP23bKBiZB986tBQgf\n7uAyJdYU8gtrjJfPkxpWRoltDO53GG1GJOcVZrnIgSzzwP9TLW9PoiyLkBKcZWDJ\n37y6Hq73qaPcTk8RV6Zayxbrc2CoxMTd9J09p1CTDBCpYTKBqwD+9wYykBdVHRr4\nBhuJBJNVqBflrncOUKkF+mQjUHc3fb2AiYjvyr2n4w==\n-----END CERTIFICATE-----\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nvsphere/requirements.in\n## context:\n# integration pip requirements\npyvmomi==6.0.0\nsix==1.11.0\nrequests==2.11.1\ncertifi==2017.11.5\nchardet==3.0.4\nidna==2.6\nurllib3==1.22\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nconsul/test/ci/consul.rake\n## context:\nrequire 'ci/common'\n\ndef consul_version\n  ENV['FLAVOR_VERSION'] || '0.7.2'\nend\n\ndef consul_config\n  \"server-#{consul_version}.json\"\nend\n\ndef consul_rootdir\n  \"#{ENV['INTEGRATIONS_DIR']}/consul_#{consul_version}\"\nend\n\ncontainer_name_1 = 'dd-test-consul-1'\ncontainer_name_2 = 'dd-test-consul-2'\ncontainer_name_3 = 'dd-test-consul-3'\n\nnamespace :ci do\n  namespace :consul do |flavor|\n    task before_install: ['ci:common:before_install'] do\n      sh %(docker stop dd-test-consul-1 dd-test-consul-2 dd-test-consul-3 2>/dev/null || true)\n      sh %(docker rm  dd-test-consul-1 dd-test-consul-2 dd-test-consul-3 2>/dev/null || true)\n    end\n\n    task :install do\n      Rake::Task['ci:common:install'].invoke('consul')\n      # sample docker usage\n      sh %( docker run -d --expose 8301 --expose 8500 -p 8500:8500 --name #{container_name_1} \\\n            --volume #{__dir__}/#{consul_config}:/consul/config/server.json:ro \\\n            consul:#{consul_version} agent -dev -bind=0.0.0.0 -client=0.0.0.0 )\n      Wait.for 8500\n      wait_on_docker_logs(container_name_1, 30, 'agent: Node info in sync', \"agent: Synced service 'consul'\", 'agent: Synced node info')\n\n      consul_first_ip = `docker inspect #{container_name_1} | grep '\"IPAddress\"'`[/([0-9\\.]+)/]\n      sh %( docker run -d --expose 8301 --name #{container_name_2} --volume #{__dir__}/#{consul_config}:/consul/config/server.json:ro \\\n            consul:#{consul_version} agent -dev -join=#{consul_first_ip} -bind=0.0.0.0 )\n      wait_on_docker_logs(container_name_2, 30, 'agent: Node info in sync', \"agent: Synced service 'consul'\", 'agent: Synced node info')\n\n      sh %( docker run -d --expose 8301 --name #{container_name_3} --volume #{__dir__}/#{consul_config}:/consul/config/server.json:ro \\\n            consul:#{consul_version} agent -dev -join=#{consul_first_ip} -bind=0.0.0.0)\n      wait_on_docker_logs(container_name_3, 30, 'agent: Node info in sync', \"agent: Synced service 'consul'\", 'agent: Synced node info')\n    end\n\n    task before_script: ['ci:common:before_script']\n\n    task script: ['ci:common:script'] do\n      this_provides = [\n        'consul'\n      ]\n      Rake::Task['ci:common:run_tests'].invoke(this_provides)\n    end\n\n    task before_cache: ['ci:common:before_cache']\n\n    task cleanup: ['ci:common:cleanup'] do\n      sh %(docker stop dd-test-consul-1 dd-test-consul-2 dd-test-consul-3 2>/dev/null || true)\n      sh %(docker rm  dd-test-consul-1 dd-test-consul-2 dd-test-consul-3 2>/dev/null || true)\n    end\n\n    task :execute do\n      exception = nil\n      begin\n        %w(before_install install before_script).each do |u|\n          Rake::Task[\"#{flavor.scope.path}:#{u}\"].invoke\n        end\n        if !ENV['SKIP_TEST']\n          Rake::Task[\"#{flavor.scope.path}:script\"].invoke\n        else\n          puts 'Skipping tests'.yellow\n        end\n        Rake::Task[\"#{flavor.scope.path}:before_cache\"].invoke\n      rescue => e\n        exception = e\n        puts \"Failed task: #{e.class} #{e.message}\".red\n      end\n      if ENV['SKIP_CLEANUP']\n        puts 'Skipping cleanup, disposable environments are great'.yellow\n      else\n        puts 'Cleaning up'\n        Rake::Task[\"#{flavor.scope.path}:cleanup\"].invoke\n      end\n      raise exception if exception\n    end\n  end\nend\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmongo/test/test_mongo.py\n## context:\n# (C) Datadog, Inc. 2010-2017\n# All rights reserved\n# Licensed under Simplified BSD License (see LICENSE)\n\n# stdlib\nfrom types import ListType\nimport time\nimport unittest\n\n# 3p\nfrom mock import Mock\nfrom nose.plugins.attrib import attr\nimport pymongo\n\n# project\nfrom checks import AgentCheck\nfrom tests.checks.common import AgentCheckTest, load_check\n\nPORT1 = 47017\nPORT2 = 47018\nMAX_WAIT = 150\n\nGAUGE = AgentCheck.gauge\nRATE = AgentCheck.rate\n\nclass TestMongoUnit(AgentCheckTest):\n    \"\"\"\n    Unit tests for MongoDB AgentCheck.\n    \"\"\"\n    CHECK_NAME = 'mongo'\n\n    MONGODB_CONFIG = {\n        'server': \"mongodb://localhost:%s/test\" % PORT1\n    }\n\n    def test_build_metric_list(self):\n        \"\"\"\n        Build the metric list according to the user configuration.\n        Print a warning when an option has no match.\n        \"\"\"\n        # Initialize check\n        config = {\n            'instances': [self.MONGODB_CONFIG]\n        }\n\n        self.load_check(config)\n        setattr(self.check, \"log\", Mock())\n\n        build_metric_list = self.check._build_metric_list_to_collect\n\n        # Default metric list\n        DEFAULT_METRICS = {\n            m_name: m_type for d in [\n                self.check.BASE_METRICS, self.check.DURABILITY_METRICS,\n                self.check.LOCKS_METRICS, self.check.WIREDTIGER_METRICS,]\n            for m_name, m_type in d.iteritems()\n        }\n\n        # No option\n        no_additional_metrics = build_metric_list([])\n        self.assertEquals(len(no_additional_metrics), len(DEFAULT_METRICS))\n\n        # Deprecate option, i.e. collected by default\n        default_metrics = build_metric_list(['wiredtiger'])\n        self.assertEquals(len(default_metrics), len(DEFAULT_METRICS))\n        self.assertEquals(self.check.log.warning.call_count, 1)\n\n        # One correct option\n        default_and_tcmalloc_metrics = build_metric_list(['tcmalloc'])\n        self.assertEquals(\n            len(default_and_tcmalloc_metrics),\n            len(DEFAULT_METRICS) + len(self.check.TCMALLOC_METRICS)\n        )\n\n        # One wrong and correct option\n        default_and_tcmalloc_metrics = build_metric_list(['foobar', 'top'])\n        self.assertEquals(\n            len(default_and_tcmalloc_metrics),\n            len(DEFAULT_METRICS) + len(self.check.TOP_METRICS)\n        )\n        self.assertEquals(self.check.log.warning.call_count, 2)\n\n    def test_metric_resolution(self):\n        \"\"\"\n        Resolve metric names and types.\n        \"\"\"\n        # Initialize check and tests\n        config = {\n            'instances': [self.MONGODB_CONFIG]\n        }\n        metrics_to_collect = {\n            'foobar': (GAUGE, 'barfoo'),\n            'foo.bar': (RATE, 'bar.foo'),\n            'fOoBaR': GAUGE,\n            'fOo.baR': RATE,\n        }\n        self.load_check(config)\n        resolve_metric = self.check._resolve_metric\n\n        # Assert\n\n        # Priority to aliases when defined\n        self.assertEquals((GAUGE, 'mongodb.barfoo'), resolve_metric('foobar', metrics_to_collect))\n        self.assertEquals((RATE, 'mongodb.bar.foops'), resolve_metric('foo.bar', metrics_to_collect))  # noqa\n        self.assertEquals((GAUGE, 'mongodb.qux.barfoo'), resolve_metric('foobar', metrics_to_collect, prefix=\"qux\"))  # noqa\n\n        #  Resolve an alias when not defined\n        self.assertEquals((GAUGE, 'mongodb.foobar'), resolve_metric('fOoBaR', metrics_to_collect))\n        self.assertEquals((RATE, 'mongodb.foo.barps'), resolve_metric('fOo.baR', metrics_to_collect))  # noqa\n        self.assertEquals((GAUGE, 'mongodb.qux.foobar'), resolve_metric('fOoBaR', metrics_to_collect, prefix=\"qux\"))  # noqa\n\n    def test_metric_normalization(self):\n        \"\"\"\n        Metric names suffixed with `.R`, `.r`, `.W`, `.w` are renamed.\n        \"\"\"\n        # Initialize check and tests\n        config = {\n            'instances': [self.MONGODB_CONFIG]\n        }\n        metrics_to_collect = {\n            'foo.bar': GAUGE,\n            'foobar.r': GAUGE,\n            'foobar.R': RATE,\n            'foobar.w': RATE,\n            'foobar.W': GAUGE,\n        }\n        self.load_check(config)\n        resolve_metric = self.check._resolve_metric\n\n        # Assert\n        self.assertEquals((GAUGE, 'mongodb.foo.bar'), resolve_metric('foo.bar', metrics_to_collect))  # noqa\n\n        self.assertEquals((RATE, 'mongodb.foobar.sharedps'), resolve_metric('foobar.R', metrics_to_collect))  # noqa\n        self.assertEquals((GAUGE, 'mongodb.foobar.intent_shared'), resolve_metric('foobar.r', metrics_to_collect))  # noqa\n        self.assertEquals((RATE, 'mongodb.foobar.intent_exclusiveps'), resolve_metric('foobar.w', metrics_to_collect))  # noqa\n        self.assertEquals((GAUGE, 'mongodb.foobar.exclusive'), resolve_metric('foobar.W', metrics_to_collect))  # noqa\n\n    def test_state_translation(self):\n        \"\"\"\n        Check that resolving replset member state IDs match to names and descriptions properly.\n        \"\"\"\n        # Initialize check\n        config = {\n            'instances': [self.MONGODB_CONFIG]\n        }\n        self.load_check(config)\n\n        self.assertEquals('STARTUP2', self.check.get_state_name(5))\n        self.assertEquals('PRIMARY', self.check.get_state_name(1))\n\n        self.assertEquals('Starting Up', self.check.get_state_description(0))\n        self.assertEquals('Recovering', self.check.get_state_description(3))\n\n        # Unknown states:\n        self.assertEquals('UNKNOWN', self.check.get_state_name(500))\n        unknown_desc = self.check.get_state_description(500)\n        self.assertTrue(unknown_desc.find('500') != -1)\n\n    def test_server_uri_sanitization(self):\n        # Initialize check\n        config = {\n            'instances': [self.MONGODB_CONFIG]\n        }\n        self.load_check(config)\n\n        _parse_uri = self.check._parse_uri\n\n        # Batch with `sanitize_username` set to False\n        server_names = (\n            (\"mongodb://localhost:27017/admin\", \"mongodb://localhost:27017/admin\"),\n            (\"mongodb://user:pass@localhost:27017/admin\", \"mongodb://user:*****@localhost:27017/admin\"),\n            (\"mongodb://user:pass_%2@localhost:27017/admin\", \"mongodb://user:*****@localhost:27017/admin\"), # pymongo parses the password as `pass_%2`\n            (\"mongodb://user:pass_%25@localhost:27017/admin\", \"mongodb://user:*****@localhost:27017/admin\"), # pymongo parses the password as `pass_%` (`%25` is url-decoded to `%`)\n            (\"mongodb://user%2@localhost:27017/admin\", \"mongodb://user%2@localhost:27017/admin\"), # same thing here, parsed username: `user%2`\n            (\"mongodb://user%25@localhost:27017/admin\", \"mongodb://user%@localhost:27017/admin\"), # with the current sanitization approach, we expect the username to be decoded in the clean name\n        )\n\n        for server, expected_clean_name in server_names:\n            _, _, _, _, clean_name, _ = _parse_uri(server, sanitize_username=False)\n            self.assertEquals(expected_clean_name, clean_name)\n\n        # Batch with `sanitize_username` set to True\n        server_names = (\n            (\"mongodb://localhost:27017/admin\", \"mongodb://localhost:27017/admin\"),\n            (\"mongodb://user:pass@localhost:27017/admin\", \"mongodb://*****@localhost:27017/admin\"),\n            (\"mongodb://user:pass_%2@localhost:27017/admin\", \"mongodb://*****@localhost:27017/admin\"),\n            (\"mongodb://user:pass_%25@localhost:27017/admin\", \"mongodb://*****@localhost:27017/admin\"),\n            (\"mongodb://user%2@localhost:27017/admin\", \"mongodb://localhost:27017/admin\"),\n            (\"mongodb://user%25@localhost:27017/admin\", \"mongodb://localhost:27017/admin\"),\n        )\n\n        for server, expected_clean_name in server_names:\n            _, _, _, _, clean_name, _ = _parse_uri(server, sanitize_username=True)\n            self.assertEquals(expected_clean_name, clean_name)\n\n@attr(requires='mongo')\nclass TestMongo(unittest.TestCase):\n    def setUp(self):\n        server = \"mongodb://localhost:%s/test\" % PORT1\n        cli = pymongo.mongo_client.MongoClient(\n            server,\n            socketTimeoutMS=30000,\n            read_preference=pymongo.ReadPreference.PRIMARY_PREFERRED,)\n\n        foos = []\n        for _ in range(70):\n            foos.append({'1': []})\n            foos.append({'1': []})\n            foos.append({})\n\n        bars = []\n        for _ in range(50):\n            bars.append({'1': []})\n            bars.append({})\n\n        db = cli['test']\n        db.foo.insert_many(foos)\n        db.bar.insert_many(bars)\n\n    def tearDown(self):\n        server = \"mongodb://localhost:%s/test\" % PORT1\n        cli = pymongo.mongo_client.MongoClient(\n            server,\n            socketTimeoutMS=30000,\n            read_preference=pymongo.ReadPreference.PRIMARY_PREFERRED,)\n\n        db = cli['test']\n        db.drop_collection(\"foo\")\n        db.drop_collection(\"bar\")\n\n    def testMongoCheck(self):\n        self.agentConfig = {\n            'version': '0.1',\n            'api_key': 'toto'\n        }\n        self.config = {\n            'instances': [{\n                'server': \"mongodb://testUser:testPass@localhost:%s/test?authSource=authDB\" % PORT1\n            }, {\n                'server': \"mongodb://testUser2:testPass2@localhost:%s/test\" % PORT2\n            }]\n        }\n\n        # Test mongodb with checks.d\n        self.check = load_check('mongo', self.config, self.agentConfig)\n\n        # Run the check against our running server\n        self.check.check(self.config['instances'][0])\n\n        # Sleep for 1 second so the rate interval >=1\n        time.sleep(1)\n\n        # Run the check again so we get the rates\n        self.check.check(self.config['instances'][0])\n\n        # Metric assertions\n        metrics = self.check.get_metrics()\n        assert metrics\n        self.assertTrue(isinstance(metrics, ListType))\n        self.assertTrue(len(metrics) > 0)\n\n        metric_val_checks = {\n            'mongodb.asserts.msgps': lambda x: x >= 0,\n            'mongodb.fsynclocked': lambda x: x >= 0,\n            'mongodb.globallock.activeclients.readers': lambda x: x >= 0,\n            'mongodb.metrics.cursor.open.notimeout': lambda x: x >= 0,\n            'mongodb.metrics.document.deletedps': lambda x: x >= 0,\n            'mongodb.metrics.getlasterror.wtime.numps': lambda x: x >= 0,\n            'mongodb.metrics.repl.apply.batches.numps': lambda x: x >= 0,\n            'mongodb.metrics.ttl.deleteddocumentsps': lambda x: x >= 0,\n            'mongodb.network.bytesinps': lambda x: x >= 1,\n            'mongodb.network.numrequestsps': lambda x: x >= 1,\n            'mongodb.opcounters.commandps': lambda x: x >= 1,\n            'mongodb.opcountersrepl.commandps': lambda x: x >= 0,\n            'mongodb.oplog.logsizemb': lambda x: x >= 1,\n            'mongodb.oplog.timediff': lambda x: x >= 1,\n            'mongodb.oplog.usedsizemb': lambda x: x >= 0,\n            'mongodb.replset.health': lambda x: x >= 1,\n            'mongodb.replset.state': lambda x: x >= 1,\n            'mongodb.stats.avgobjsize': lambda x: x >= 0,\n            'mongodb.stats.storagesize': lambda x: x >= 0,\n            'mongodb.connections.current': lambda x: x >= 1,\n            'mongodb.connections.available': lambda x: x >= 1,\n            'mongodb.uptime': lambda x: x >= 0,\n            'mongodb.mem.resident': lambda x: x > 0,\n            'mongodb.mem.virtual': lambda x: x > 0,\n        }\n\n        tested_metrics = set()\n        for m in metrics:\n            metric_name = m[0]\n            if metric_name in metric_val_checks:\n                self.assertTrue(metric_val_checks[metric_name](m[2]))\n                tested_metrics.add(metric_name)\n\n        if len(metric_val_checks) - len(tested_metrics) != 0:\n            print \"missing metrics: %s\" % (set(metric_val_checks.keys()) - tested_metrics)\n        self.assertTrue(len(metric_val_checks) - len(tested_metrics) == 0)\n\n        # Run the check against our running server\n        self.check.check(self.config['instances'][1])\n        # Sleep for 1 second so the rate interval >=1\n        time.sleep(1)\n        # Run the check again so we get the rates\n        self.check.check(self.config['instances'][1])\n\n        # Service checks\n        service_checks = self.check.get_service_checks()\n        print service_checks\n        service_checks_count = len(service_checks)\n        self.assertTrue(isinstance(service_checks, ListType))\n        self.assertTrue(service_checks_count > 0)\n        self.assertEquals(len([sc for sc in service_checks if sc['check'] == self.check.SERVICE_CHECK_NAME]), 4, service_checks)\n        # Assert that all service checks have the proper tags: host and port\n        self.assertEquals(len([sc for sc in service_checks if \"host:localhost\" in sc['tags']]), service_checks_count, service_checks)\n        self.assertEquals(len([sc for sc in service_checks if \"port:%s\" % PORT1 in sc['tags'] or \"port:%s\" % PORT2 in sc['tags']]), service_checks_count, service_checks)\n        self.assertEquals(len([sc for sc in service_checks if \"db:test\" in sc['tags']]), service_checks_count, service_checks)\n\n        # Metric assertions\n        metrics = self.check.get_metrics()\n        assert metrics\n        self.assertTrue(isinstance(metrics, ListType))\n        self.assertTrue(len(metrics) > 0)\n\n        for m in metrics:\n            metric_name = m[0]\n            if metric_name in metric_val_checks:\n                self.assertTrue(metric_val_checks[metric_name](m[2]))\n\n    def testMongoOldConfig(self):\n        conf = {\n            'init_config': {},\n            'instances': [\n                {'server': \"mongodb://localhost:%s/test\" % PORT1},\n                {'server': \"mongodb://localhost:%s/test\" % PORT2},\n            ]\n        }\n\n        # Test the first mongodb instance\n        self.check = load_check('mongo', conf, {})\n\n        # Run the check against our running server\n        self.check.check(conf['instances'][0])\n        # Sleep for 1 second so the rate interval >=1\n        time.sleep(1)\n        # Run the check again so we get the rates\n        self.check.check(conf['instances'][0])\n\n        # Metric assertions\n        metrics = self.check.get_metrics()\n        assert metrics\n        self.assertTrue(isinstance(metrics, ListType))\n        self.assertTrue(len(metrics) > 0)\n\n        metric_val_checks = {\n            'mongodb.connections.current': lambda x: x >= 1,\n            'mongodb.connections.available': lambda x: x >= 1,\n            'mongodb.uptime': lambda x: x >= 0,\n            'mongodb.mem.resident': lambda x: x > 0,\n            'mongodb.mem.virtual': lambda x: x > 0\n        }\n\n        for m in metrics:\n            metric_name = m[0]\n            if metric_name in metric_val_checks:\n                self.assertTrue(metric_val_checks[metric_name](m[2]))\n\n        # Run the check against our running server\n        self.check.check(conf['instances'][1])\n        # Sleep for 1 second so the rate interval >=1\n        time.sleep(1)\n        # Run the check again so we get the rates\n        self.check.check(conf['instances'][1])\n\n        # Metric assertions\n        metrics = self.check.get_metrics()\n        assert metrics\n        self.assertTrue(isinstance(metrics, ListType))\n        self.assertTrue(len(metrics) > 0)\n\n        for m in metrics:\n            metric_name = m[0]\n            if metric_name in metric_val_checks:\n                self.assertTrue(metric_val_checks[metric_name](m[2]))\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsqlserver/notes.txt\n## context:\nsimple_metrics\nfraction_metrics"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkubernetes_state/manifest.json\n## context:\n{\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"0.1.1\",\n  \"max_agent_version\": \"6.0.0\",\n  \"min_agent_version\": \"5.20.0\",\n  \"name\": \"kubernetes_state\",\n  \"short_description\": \"Capture Pod scheduling events, track the status of your Kubelets, and more.\",\n  \"guid\": \"fa0e4395-3eae-4df8-88f2-9d7075c21a2d\",\n  \"support\": \"contrib\",\n  \"supported_os\": [\n    \"linux\",\n    \"mac_os\"\n  ],\n  \"version\": \"2.3.0\",\n  \"use_omnibus_reqs\": true,\n  \"public_title\": \"Datadog-Kubernetes State Integration\",\n  \"categories\":[\"orchestration\", \"containers\"],\n  \"type\":\"check\",\n  \"doc_link\": \"https://docs.datadoghq.com/integrations/kubernetes_state/\",\n  \"is_public\": true,\n  \"has_logo\": true\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nntp/metadata.csv\n## context:\nmetric_name,metric_type,interval,unit_name,per_unit_name,description,orientation,integration,short_name\nntp.offset,gauge,,second,,The time difference between the local clock and the NTP reference clock.,-1,system,ntp offset\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkubernetes_state/manifest.json\n## context:\n{\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"0.1.1\",\n  \"max_agent_version\": \"6.0.0\",\n  \"min_agent_version\": \"5.20.0\",\n  \"name\": \"kubernetes_state\",\n  \"short_description\": \"Capture Pod scheduling events, track the status of your Kubelets, and more.\",\n  \"guid\": \"fa0e4395-3eae-4df8-88f2-9d7075c21a2d\",\n  \"support\": \"contrib\",\n  \"supported_os\": [\n    \"linux\",\n    \"mac_os\"\n  ],\n  \"version\": \"2.3.0\",\n  \"use_omnibus_reqs\": true,\n  \"public_title\": \"Datadog-Kubernetes State Integration\",\n  \"categories\":[\"orchestration\", \"containers\"],\n  \"type\":\"check\",\n  \"doc_link\": \"https://docs.datadoghq.com/integrations/kubernetes_state/\",\n  \"is_public\": true,\n  \"has_logo\": true\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nvsphere/requirements.in\n## context:\n# integration pip requirements\npyvmomi==6.0.0\nsix==1.11.0\nrequests==2.11.1\ncertifi==2017.11.5\nchardet==3.0.4\nidna==2.6\nurllib3==1.22\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[apache] fix metric collection\n### What does this PR do?\r\n\r\nThis collects the correct data for `apache.net.bytes_per_s` and `apache.net.request_per_s`.\r\n\r\nhttps://www.datadoghq.com/blog/collect-apache-performance-metrics\r\nhttps://wiki.opennms.org/wiki/Monitoring_Apache_with_the_HTTP_collector\r\nhttps://httpd.apache.org/docs/current/mod/mod_status.html\r\n\r\n### Motivation\r\n\r\nCustomer encountered bug\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nvsphere/requirements.in\n## context:\n# integration pip requirements\npyvmomi==6.0.0\nsix==1.11.0\nrequests==2.11.1\ncertifi==2017.11.5\nchardet==3.0.4\nidna==2.6\nurllib3==1.22\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsqlserver/notes.txt\n## context:\nsimple_metrics\nfraction_metrics"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncisco_aci/tests/fixtures/tenant/d0260e4832537b43b1acb38bcfa58063.txt\n## context:\n{\"totalCount\":\"0\",\"imdata\":[]}"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ntokumx/datadog_checks/tokumx/vendor/pymongo/common.py\n## context:\n# Copyright 2011-2015 MongoDB, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n# may not use this file except in compliance with the License.  You\n# may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.  See the License for the specific language governing\n# permissions and limitations under the License.\n\n\n\"\"\"Functions and classes common to multiple pymongo modules.\"\"\"\n\nimport collections\nimport datetime\nimport warnings\n\nfrom datadog_checks.tokumx.vendor.bson.binary import (STANDARD, PYTHON_LEGACY,\n                         JAVA_LEGACY, CSHARP_LEGACY)\nfrom datadog_checks.tokumx.vendor.bson.codec_options import CodecOptions\nfrom datadog_checks.tokumx.vendor.bson.py3compat import string_type, integer_types, iteritems\nfrom datadog_checks.tokumx.vendor.bson.raw_bson import RawBSONDocument\nfrom datadog_checks.tokumx.vendor.pymongo.auth import MECHANISMS\nfrom datadog_checks.tokumx.vendor.pymongo.errors import ConfigurationError\nfrom datadog_checks.tokumx.vendor.pymongo.monitoring import _validate_event_listeners\nfrom datadog_checks.tokumx.vendor.pymongo.read_concern import ReadConcern\nfrom datadog_checks.tokumx.vendor.pymongo.read_preferences import _MONGOS_MODES, _ServerMode\nfrom datadog_checks.tokumx.vendor.pymongo.ssl_support import validate_cert_reqs\nfrom datadog_checks.tokumx.vendor.pymongo.write_concern import WriteConcern\n\n# Defaults until we connect to a server and get updated limits.\nMAX_BSON_SIZE = 16 * (1024 ** 2)\nMAX_MESSAGE_SIZE = 2 * MAX_BSON_SIZE\nMIN_WIRE_VERSION = 0\nMAX_WIRE_VERSION = 0\nMAX_WRITE_BATCH_SIZE = 1000\n\n# What this version of PyMongo supports.\nMIN_SUPPORTED_WIRE_VERSION = 0\nMAX_SUPPORTED_WIRE_VERSION = 5\n\n# Frequency to call ismaster on servers, in seconds.\nHEARTBEAT_FREQUENCY = 10\n\n# Frequency to process kill-cursors, in seconds. See MongoClient.close_cursor.\nKILL_CURSOR_FREQUENCY = 1\n\n# Frequency to process events queue, in seconds.\nEVENTS_QUEUE_FREQUENCY = 1\n\n# How long to wait, in seconds, for a suitable server to be found before\n# aborting an operation. For example, if the client attempts an insert\n# during a replica set election, SERVER_SELECTION_TIMEOUT governs the\n# longest it is willing to wait for a new primary to be found.\nSERVER_SELECTION_TIMEOUT = 30\n\n# Spec requires at least 500ms between ismaster calls.\nMIN_HEARTBEAT_INTERVAL = 0.5\n\n# Default connectTimeout in seconds.\nCONNECT_TIMEOUT = 20.0\n\n# Default value for maxPoolSize.\nMAX_POOL_SIZE = 100\n\n# Default value for minPoolSize.\nMIN_POOL_SIZE = 0\n\n# Default value for maxIdleTimeMS.\nMAX_IDLE_TIME_MS = None\n\n# Default value for localThresholdMS.\nLOCAL_THRESHOLD_MS = 15\n\n# mongod/s 2.6 and above return code 59 when a\n# command doesn't exist. mongod versions previous\n# to 2.6 and mongos 2.4.x return no error code\n# when a command does exist. mongos versions previous\n# to 2.4.0 return code 13390 when a command does not\n# exist.\nCOMMAND_NOT_FOUND_CODES = (59, 13390, None)\n\n# Error codes to ignore if GridFS calls createIndex on a secondary\nUNAUTHORIZED_CODES = (13, 16547, 16548)\n\n\ndef partition_node(node):\n    \"\"\"Split a host:port string into (host, int(port)) pair.\"\"\"\n    host = node\n    port = 27017\n    idx = node.rfind(':')\n    if idx != -1:\n        host, port = node[:idx], int(node[idx + 1:])\n    if host.startswith('['):\n        host = host[1:-1]\n    return host, port\n\n\ndef clean_node(node):\n    \"\"\"Split and normalize a node name from an ismaster response.\"\"\"\n    host, port = partition_node(node)\n\n    # Normalize hostname to lowercase, since DNS is case-insensitive:\n    # http://tools.ietf.org/html/rfc4343\n    # This prevents useless rediscovery if \"foo.com\" is in the seed list but\n    # \"FOO.com\" is in the ismaster response.\n    return host.lower(), port\n\n\ndef raise_config_error(key, dummy):\n    \"\"\"Raise ConfigurationError with the given key name.\"\"\"\n    raise ConfigurationError(\"Unknown option %s\" % (key,))\n\n\n# Mapping of URI uuid representation options to valid subtypes.\n_UUID_REPRESENTATIONS = {\n    'standard': STANDARD,\n    'pythonLegacy': PYTHON_LEGACY,\n    'javaLegacy': JAVA_LEGACY,\n    'csharpLegacy': CSHARP_LEGACY\n}\n\n\ndef validate_boolean(option, value):\n    \"\"\"Validates that 'value' is True or False.\"\"\"\n    if isinstance(value, bool):\n        return value\n    raise TypeError(\"%s must be True or False\" % (option,))\n\n\ndef validate_boolean_or_string(option, value):\n    \"\"\"Validates that value is True, False, 'true', or 'false'.\"\"\"\n    if isinstance(value, string_type):\n        if value not in ('true', 'false'):\n            raise ValueError(\"The value of %s must be \"\n                             \"'true' or 'false'\" % (option,))\n        return value == 'true'\n    return validate_boolean(option, value)\n\n\ndef validate_integer(option, value):\n    \"\"\"Validates that 'value' is an integer (or basestring representation).\n    \"\"\"\n    if isinstance(value, integer_types):\n        return value\n    elif isinstance(value, string_type):\n        if not value.isdigit():\n            raise ValueError(\"The value of %s must be \"\n                             \"an integer\" % (option,))\n        return int(value)\n    raise TypeError(\"Wrong type for %s, value must be an integer\" % (option,))\n\n\ndef validate_positive_integer(option, value):\n    \"\"\"Validate that 'value' is a positive integer, which does not include 0.\n    \"\"\"\n    val = validate_integer(option, value)\n    if val <= 0:\n        raise ValueError(\"The value of %s must be \"\n                         \"a positive integer\" % (option,))\n    return val\n\n\ndef validate_non_negative_integer(option, value):\n    \"\"\"Validate that 'value' is a positive integer or 0.\n    \"\"\"\n    val = validate_integer(option, value)\n    if val < 0:\n        raise ValueError(\"The value of %s must be \"\n                         \"a non negative integer\" % (option,))\n    return val\n\n\ndef validate_readable(option, value):\n    \"\"\"Validates that 'value' is file-like and readable.\n    \"\"\"\n    if value is None:\n        return value\n    # First make sure its a string py3.3 open(True, 'r') succeeds\n    # Used in ssl cert checking due to poor ssl module error reporting\n    value = validate_string(option, value)\n    open(value, 'r').close()\n    return value\n\n\ndef validate_positive_integer_or_none(option, value):\n    \"\"\"Validate that 'value' is a positive integer or None.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_positive_integer(option, value)\n\n\ndef validate_non_negative_integer_or_none(option, value):\n    \"\"\"Validate that 'value' is a positive integer or 0 or None.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_non_negative_integer(option, value)\n\n\ndef validate_string(option, value):\n    \"\"\"Validates that 'value' is an instance of `basestring` for Python 2\n    or `str` for Python 3.\n    \"\"\"\n    if isinstance(value, string_type):\n        return value\n    raise TypeError(\"Wrong type for %s, value must be \"\n                    \"an instance of %s\" % (option, string_type.__name__))\n\n\ndef validate_string_or_none(option, value):\n    \"\"\"Validates that 'value' is an instance of `basestring` or `None`.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_string(option, value)\n\n\ndef validate_int_or_basestring(option, value):\n    \"\"\"Validates that 'value' is an integer or string.\n    \"\"\"\n    if isinstance(value, integer_types):\n        return value\n    elif isinstance(value, string_type):\n        if value.isdigit():\n            return int(value)\n        return value\n    raise TypeError(\"Wrong type for %s, value must be an \"\n                    \"integer or a string\" % (option,))\n\n\ndef validate_positive_float(option, value):\n    \"\"\"Validates that 'value' is a float, or can be converted to one, and is\n       positive.\n    \"\"\"\n    errmsg = \"%s must be an integer or float\" % (option,)\n    try:\n        value = float(value)\n    except ValueError:\n        raise ValueError(errmsg)\n    except TypeError:\n        raise TypeError(errmsg)\n\n    # float('inf') doesn't work in 2.4 or 2.5 on Windows, so just cap floats at\n    # one billion - this is a reasonable approximation for infinity\n    if not 0 < value < 1e9:\n        raise ValueError(\"%s must be greater than 0 and \"\n                         \"less than one billion\" % (option,))\n    return value\n\n\ndef validate_positive_float_or_zero(option, value):\n    \"\"\"Validates that 'value' is 0 or a positive float, or can be converted to\n    0 or a positive float.\n    \"\"\"\n    if value == 0 or value == \"0\":\n        return 0\n    return validate_positive_float(option, value)\n\n\ndef validate_timeout_or_none(option, value):\n    \"\"\"Validates a timeout specified in milliseconds returning\n    a value in floating point seconds.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_positive_float(option, value) / 1000.0\n\n\ndef validate_timeout_or_zero(option, value):\n    \"\"\"Validates a timeout specified in milliseconds returning\n    a value in floating point seconds for the case where None is an error\n    and 0 is valid. Setting the timeout to nothing in the URI string is a\n    config error.\n    \"\"\"\n    if value is None:\n        raise ConfigurationError(\"%s cannot be None\" % (option, ))\n    if value == 0 or value == \"0\":\n        return 0\n    return validate_positive_float(option, value) / 1000.0\n\n\ndef validate_max_staleness(option, value):\n    \"\"\"Validates maxStalenessSeconds according to the Max Staleness Spec.\"\"\"\n    if value == -1 or value == \"-1\":\n        # Default: No maximum staleness.\n        return -1\n    return validate_positive_integer(option, value)\n\n\ndef validate_read_preference(dummy, value):\n    \"\"\"Validate a read preference.\n    \"\"\"\n    if not isinstance(value, _ServerMode):\n        raise TypeError(\"%r is not a read preference.\" % (value,))\n    return value\n\n\ndef validate_read_preference_mode(dummy, value):\n    \"\"\"Validate read preference mode for a MongoReplicaSetClient.\n\n    .. versionchanged:: 3.5\n       Returns the original ``value`` instead of the validated read preference\n       mode.\n    \"\"\"\n    if value not in _MONGOS_MODES:\n        raise ValueError(\"%s is not a valid read preference\" % (value,))\n    return value\n\n\ndef validate_auth_mechanism(option, value):\n    \"\"\"Validate the authMechanism URI option.\n    \"\"\"\n    # CRAM-MD5 is for server testing only. Undocumented,\n    # unsupported, may be removed at any time. You have\n    # been warned.\n    if value not in MECHANISMS and value != 'CRAM-MD5':\n        raise ValueError(\"%s must be in %s\" % (option, tuple(MECHANISMS)))\n    return value\n\n\ndef validate_uuid_representation(dummy, value):\n    \"\"\"Validate the uuid representation option selected in the URI.\n    \"\"\"\n    try:\n        return _UUID_REPRESENTATIONS[value]\n    except KeyError:\n        raise ValueError(\"%s is an invalid UUID representation. \"\n                         \"Must be one of \"\n                         \"%s\" % (value, tuple(_UUID_REPRESENTATIONS)))\n\n\ndef validate_read_preference_tags(name, value):\n    \"\"\"Parse readPreferenceTags if passed as a client kwarg.\n    \"\"\"\n    if not isinstance(value, list):\n        value = [value]\n\n    tag_sets = []\n    for tag_set in value:\n        if tag_set == '':\n            tag_sets.append({})\n            continue\n        try:\n            tag_sets.append(dict([tag.split(\":\")\n                                  for tag in tag_set.split(\",\")]))\n        except Exception:\n            raise ValueError(\"%r not a valid \"\n                             \"value for %s\" % (tag_set, name))\n    return tag_sets\n\n\n_MECHANISM_PROPS = frozenset(['SERVICE_NAME',\n                              'CANONICALIZE_HOST_NAME',\n                              'SERVICE_REALM'])\n\n\ndef validate_auth_mechanism_properties(option, value):\n    \"\"\"Validate authMechanismProperties.\"\"\"\n    value = validate_string(option, value)\n    props = {}\n    for opt in value.split(','):\n        try:\n            key, val = opt.split(':')\n        except ValueError:\n            raise ValueError(\"auth mechanism properties must be \"\n                             \"key:value pairs like SERVICE_NAME:\"\n                             \"mongodb, not %s.\" % (opt,))\n        if key not in _MECHANISM_PROPS:\n            raise ValueError(\"%s is not a supported auth \"\n                             \"mechanism property. Must be one of \"\n                             \"%s.\" % (key, tuple(_MECHANISM_PROPS)))\n        if key == 'CANONICALIZE_HOST_NAME':\n            props[key] = validate_boolean_or_string(key, val)\n        else:\n            props[key] = val\n\n    return props\n\n\ndef validate_document_class(option, value):\n    \"\"\"Validate the document_class option.\"\"\"\n    if not issubclass(value, (collections.MutableMapping, RawBSONDocument)):\n        raise TypeError(\"%s must be dict, bson.son.SON, \"\n                        \"bson.raw_bson.RawBSONDocument, or a \"\n                        \"sublass of collections.MutableMapping\" % (option,))\n    return value\n\n\ndef validate_is_mapping(option, value):\n    \"\"\"Validate the type of method arguments that expect a document.\"\"\"\n    if not isinstance(value, collections.Mapping):\n        raise TypeError(\"%s must be an instance of dict, bson.son.SON, or \"\n                        \"other type that inherits from \"\n                        \"collections.Mapping\" % (option,))\n\n\ndef validate_is_document_type(option, value):\n    \"\"\"Validate the type of method arguments that expect a MongoDB document.\"\"\"\n    if not isinstance(value, (collections.MutableMapping, RawBSONDocument)):\n        raise TypeError(\"%s must be an instance of dict, bson.son.SON, \"\n                        \"bson.raw_bson.RawBSONDocument, or \"\n                        \"a type that inherits from \"\n                        \"collections.MutableMapping\" % (option,))\n\n\ndef validate_appname_or_none(option, value):\n    \"\"\"Validate the appname option.\"\"\"\n    if value is None:\n        return value\n    validate_string(option, value)\n    # We need length in bytes, so encode utf8 first.\n    if len(value.encode('utf-8')) > 128:\n        raise ValueError(\"%s must be <= 128 bytes\" % (option,))\n    return value\n\n\ndef validate_ok_for_replace(replacement):\n    \"\"\"Validate a replacement document.\"\"\"\n    validate_is_mapping(\"replacement\", replacement)\n    # Replacement can be {}\n    if replacement and not isinstance(replacement, RawBSONDocument):\n        first = next(iter(replacement))\n        if first.startswith('$'):\n            raise ValueError('replacement can not include $ operators')\n\n\ndef validate_ok_for_update(update):\n    \"\"\"Validate an update document.\"\"\"\n    validate_is_mapping(\"update\", update)\n    # Update can not be {}\n    if not update:\n        raise ValueError('update only works with $ operators')\n    first = next(iter(update))\n    if not first.startswith('$'):\n        raise ValueError('update only works with $ operators')\n\n\n_UNICODE_DECODE_ERROR_HANDLERS = frozenset(['strict', 'replace', 'ignore'])\n\n\ndef validate_unicode_decode_error_handler(dummy, value):\n    \"\"\"Validate the Unicode decode error handler option of CodecOptions.\n    \"\"\"\n    if value not in _UNICODE_DECODE_ERROR_HANDLERS:\n        raise ValueError(\"%s is an invalid Unicode decode error handler. \"\n                         \"Must be one of \"\n                         \"%s\" % (value, tuple(_UNICODE_DECODE_ERROR_HANDLERS)))\n    return value\n\n\ndef validate_tzinfo(dummy, value):\n    \"\"\"Validate the tzinfo option\n    \"\"\"\n    if value is not None and not isinstance(value, datetime.tzinfo):\n        raise TypeError(\"%s must be an instance of datetime.tzinfo\" % value)\n    return value\n\n\n# journal is an alias for j,\n# wtimeoutms is an alias for wtimeout,\nURI_VALIDATORS = {\n    'replicaset': validate_string_or_none,\n    'w': validate_int_or_basestring,\n    'wtimeout': validate_integer,\n    'wtimeoutms': validate_integer,\n    'fsync': validate_boolean_or_string,\n    'j': validate_boolean_or_string,\n    'journal': validate_boolean_or_string,\n    'maxpoolsize': validate_positive_integer_or_none,\n    'socketkeepalive': validate_boolean_or_string,\n    'waitqueuemultiple': validate_non_negative_integer_or_none,\n    'ssl': validate_boolean_or_string,\n    'ssl_keyfile': validate_readable,\n    'ssl_certfile': validate_readable,\n    'ssl_pem_passphrase': validate_string_or_none,\n    'ssl_cert_reqs': validate_cert_reqs,\n    'ssl_ca_certs': validate_readable,\n    'ssl_match_hostname': validate_boolean_or_string,\n    'ssl_crlfile': validate_readable,\n    'readconcernlevel': validate_string_or_none,\n    'readpreference': validate_read_preference_mode,\n    'readpreferencetags': validate_read_preference_tags,\n    'localthresholdms': validate_positive_float_or_zero,\n    'authmechanism': validate_auth_mechanism,\n    'authsource': validate_string,\n    'authmechanismproperties': validate_auth_mechanism_properties,\n    'tz_aware': validate_boolean_or_string,\n    'uuidrepresentation': validate_uuid_representation,\n    'connect': validate_boolean_or_string,\n    'minpoolsize': validate_non_negative_integer,\n    'appname': validate_appname_or_none,\n    'unicode_decode_error_handler': validate_unicode_decode_error_handler\n}\n\nTIMEOUT_VALIDATORS = {\n    'connecttimeoutms': validate_timeout_or_none,\n    'sockettimeoutms': validate_timeout_or_none,\n    'waitqueuetimeoutms': validate_timeout_or_none,\n    'serverselectiontimeoutms': validate_timeout_or_zero,\n    'heartbeatfrequencyms': validate_timeout_or_none,\n    'maxidletimems': validate_timeout_or_none,\n    'maxstalenessseconds': validate_max_staleness,\n}\n\nKW_VALIDATORS = {\n    'document_class': validate_document_class,\n    'read_preference': validate_read_preference,\n    'event_listeners': _validate_event_listeners,\n    'tzinfo': validate_tzinfo,\n    'username': validate_string_or_none,\n    'password': validate_string_or_none,\n}\n\nURI_VALIDATORS.update(TIMEOUT_VALIDATORS)\nVALIDATORS = URI_VALIDATORS.copy()\nVALIDATORS.update(KW_VALIDATORS)\n\n\n_AUTH_OPTIONS = frozenset(['authmechanismproperties'])\n\n\ndef validate_auth_option(option, value):\n    \"\"\"Validate optional authentication parameters.\n    \"\"\"\n    lower, value = validate(option, value)\n    if lower not in _AUTH_OPTIONS:\n        raise ConfigurationError('Unknown '\n                                 'authentication option: %s' % (option,))\n    return lower, value\n\n\ndef validate(option, value):\n    \"\"\"Generic validation function.\n    \"\"\"\n    lower = option.lower()\n    validator = VALIDATORS.get(lower, raise_config_error)\n    value = validator(option, value)\n    return lower, value\n\n\ndef get_validated_options(options, warn=True):\n    \"\"\"Validate each entry in options and raise a warning if it is not valid.\n    Returns a copy of options with invalid entries removed\n    \"\"\"\n    validated_options = {}\n    for opt, value in iteritems(options):\n        lower = opt.lower()\n        try:\n            validator = URI_VALIDATORS.get(lower, raise_config_error)\n            value = validator(opt, value)\n        except (ValueError, ConfigurationError) as exc:\n            if warn:\n                warnings.warn(str(exc))\n            else:\n                raise\n        else:\n            validated_options[lower] = value\n    return validated_options\n\n\nWRITE_CONCERN_OPTIONS = frozenset([\n    'w',\n    'wtimeout',\n    'wtimeoutms',\n    'fsync',\n    'j',\n    'journal'\n])\n\n\nclass BaseObject(object):\n    \"\"\"A base class that provides attributes and methods common\n    to multiple pymongo classes.\n\n    SHOULD NOT BE USED BY DEVELOPERS EXTERNAL TO MONGODB.\n    \"\"\"\n\n    def __init__(self, codec_options, read_preference, write_concern,\n                 read_concern):\n\n        if not isinstance(codec_options, CodecOptions):\n            raise TypeError(\"codec_options must be an instance of \"\n                            \"bson.codec_options.CodecOptions\")\n        self.__codec_options = codec_options\n\n        if not isinstance(read_preference, _ServerMode):\n            raise TypeError(\"%r is not valid for read_preference. See \"\n                            \"pymongo.read_preferences for valid \"\n                            \"options.\" % (read_preference,))\n        self.__read_preference = read_preference\n\n        if not isinstance(write_concern, WriteConcern):\n            raise TypeError(\"write_concern must be an instance of \"\n                            \"pymongo.write_concern.WriteConcern\")\n        self.__write_concern = write_concern\n\n        if not isinstance(read_concern, ReadConcern):\n            raise TypeError(\"read_concern must be an instance of \"\n                            \"pymongo.read_concern.ReadConcern\")\n        self.__read_concern = read_concern\n\n    @property\n    def codec_options(self):\n        \"\"\"Read only access to the :class:`~bson.codec_options.CodecOptions`\n        of this instance.\n        \"\"\"\n        return self.__codec_options\n\n    @property\n    def write_concern(self):\n        \"\"\"Read only access to the :class:`~pymongo.write_concern.WriteConcern`\n        of this instance.\n\n        .. versionchanged:: 3.0\n          The :attr:`write_concern` attribute is now read only.\n        \"\"\"\n        return self.__write_concern\n\n    @property\n    def read_preference(self):\n        \"\"\"Read only access to the read preference of this instance.\n\n        .. versionchanged:: 3.0\n          The :attr:`read_preference` attribute is now read only.\n        \"\"\"\n        return self.__read_preference\n\n    @property\n    def read_concern(self):\n        \"\"\"Read only access to the read concern of this instance.\n\n        .. versionadded:: 3.2\n        \"\"\"\n        return self.__read_concern\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\netcd/datadog_checks/__init__.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n__path__ = __import__('pkgutil').extend_path(__path__, __name__)  # type: ignore\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/tooling/templates/integration/tile/{check_name}/metadata.csv\n## context:\nmetric_name,metric_type,interval,unit_name,per_unit_name,description,orientation,integration,short_name,curated_metric\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkyototycoon/tests/conftest.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\nimport os\n\nimport pytest\nimport requests\n\nfrom datadog_checks.dev import docker_run\n\nfrom .common import DEFAULT_INSTANCE, HERE, URL\n\n\n@pytest.fixture(scope=\"session\")\ndef dd_environment():\n    \"\"\"\n    Spin up a kyototycoon docker image\n    \"\"\"\n\n    with docker_run(\n        compose_file=os.path.join(HERE, 'compose', 'compose_kyototycoon.yaml'),\n        endpoints='{}/rpc/report'.format(URL),\n        mount_logs=True,\n    ):\n\n        # Generate a test database\n        data = {'dddd': 'dddd'}\n        headers = {'X-Kt-Mode': 'set'}\n\n        for _ in range(100):\n            requests.put(URL, data=data, headers=headers)\n            requests.get(URL)\n\n        yield DEFAULT_INSTANCE\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/docker.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nimport os\nfrom contextlib import contextmanager\nfrom typing import Iterator\n\nfrom six import string_types\nfrom six.moves.urllib.parse import urlparse\n\nfrom .conditions import CheckDockerLogs\nfrom .env import environment_run, get_state, save_state\nfrom .fs import create_file, file_exists\nfrom .spec import load_spec\nfrom .structures import EnvVars, LazyFunction, TempDir\nfrom .subprocess import run_command\nfrom .utils import find_check_root, using_legacy_docker_compose\n\ntry:\n    from contextlib import ExitStack\nexcept ImportError:\n    from contextlib2 import ExitStack\n\n\ndef get_docker_hostname():\n    \"\"\"\n    Determine the hostname Docker uses based on the environment, defaulting to `localhost`.\n    \"\"\"\n    return urlparse(os.getenv('DOCKER_HOST', '')).hostname or 'localhost'\n\n\ndef get_container_ip(container_id_or_name):\n    \"\"\"\n    Get a Docker container's IP address from its ID or name.\n    \"\"\"\n    command = [\n        'docker',\n        'inspect',\n        '-f',\n        '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}',\n        container_id_or_name,\n    ]\n\n    return run_command(command, capture='out', check=True).stdout.strip()\n\n\ndef compose_file_active(compose_file):\n    \"\"\"\n    Returns a `bool` indicating whether or not a compose file has any active services.\n    \"\"\"\n    if using_legacy_docker_compose():\n        command = ['docker-compose', '-f', compose_file, 'ps']\n        lines = run_command(command, capture='out', check=True).stdout.splitlines()\n\n        for i, line in enumerate(lines, 1):\n            if set(line.strip()) == {'-'}:\n                return len(lines[i:]) >= 1\n\n        return False\n    else:\n        command = ['docker', 'compose', '--compatibility', '-f', compose_file, 'ps']\n        lines = run_command(command, capture='out', check=True).stdout.strip().splitlines()\n\n        return len(lines) > 1\n\n\ndef using_windows_containers():\n    \"\"\"\n    Returns a `bool` indicating whether or not Docker is configured to use Windows containers.\n    \"\"\"\n    os_type = run_command(['docker', 'info', '--format', '{{.OSType}}'], capture=True, check=True).stdout.strip()\n    return os_type == 'windows'\n\n\n@contextmanager\ndef shared_logs(example_log_configs, mount_whitelist=None):\n    log_source = example_log_configs[0].get('source', 'check')\n\n    if mount_whitelist is None:\n        # Default to all\n        mount_whitelist = range(1, len(example_log_configs) + 1)\n\n    env_vars = {}\n    docker_volumes = get_state('docker_volumes', [])\n\n    with ExitStack() as stack:\n        for i, example_log_config in enumerate(example_log_configs, 1):\n            if i not in mount_whitelist:\n                continue\n\n            log_name = 'dd_log_{}'.format(i)\n            d = stack.enter_context(TempDir(log_name))\n\n            # Create the file that will ultimately be shared by containers\n            shared_log_file = os.path.join(d, '{}_{}.log'.format(log_source, log_name))\n            if not file_exists(shared_log_file):\n                create_file(shared_log_file)\n\n            # Set config to the path in the Agent\n            agent_mount_path = '/var/log/{}/{}'.format(log_source, log_name)\n            example_log_config['path'] = agent_mount_path\n            docker_volumes.append('{}:{}'.format(shared_log_file, agent_mount_path))\n\n            # If service is the default, use the source\n            if example_log_config.get('service', '<SERVICE>') == '<SERVICE>':\n                example_log_config['service'] = log_source\n\n            # Make it available to reference for Docker volumes\n            env_vars[log_name.upper()] = shared_log_file\n\n        # Inject and persist this data for `env test` & `env stop`\n        save_state('logs_config', example_log_configs)\n        save_state('docker_volumes', docker_volumes)\n\n        with EnvVars(env_vars):\n            yield\n\n\n@contextmanager\ndef docker_run(\n    compose_file=None,\n    build=False,\n    service_name=None,\n    up=None,\n    down=None,\n    on_error=None,\n    sleep=None,\n    endpoints=None,\n    log_patterns=None,\n    mount_logs=False,\n    conditions=None,\n    env_vars=None,\n    wrappers=None,\n    attempts=None,\n    attempts_wait=1,\n):\n    \"\"\"\n    A convenient context manager for safely setting up and tearing down Docker environments.\n\n    - **compose_file** (_str_) - A path to a Docker compose file. A custom tear\n      down is not required when using this.\n    - **build** (_bool_) - Whether or not to build images for when `compose_file` is provided\n    - **service_name** (_str_) - Optional name for when ``compose_file`` is provided\n    - **up** (_callable_) - A custom setup callable\n    - **down** (_callable_) - A custom tear down callable. This is required when using a custom setup.\n    - **on_error** (_callable_) - A callable called in case of an unhandled exception\n    - **sleep** (_float_) - Number of seconds to wait before yielding. This occurs after all conditions are successful.\n    - **endpoints** (_List[str]_) - Endpoints to verify access for before yielding. Shorthand for adding\n      `CheckEndpoints(endpoints)` to the `conditions` argument.\n    - **log_patterns** (_List[str|re.Pattern]_) - Regular expression patterns to find in Docker logs before yielding.\n      This is only available when `compose_file` is provided. Shorthand for adding\n      `CheckDockerLogs(compose_file, log_patterns, 'all')` to the `conditions` argument.\n    - **mount_logs** (_bool_) - Whether or not to mount log files in Agent containers based on example logs\n      configuration\n    - **conditions** (_callable_) - A list of callable objects that will be executed before yielding to\n      check for errors\n    - **env_vars** (_dict_) - A dictionary to update `os.environ` with during execution\n    - **wrappers** (_List[callable]_) - A list of context managers to use during execution\n    - **attempts** (_int_) - Number of attempts to run `up` and the `conditions` successfully\n    - **attempts_wait** (_int_) - Time to wait between attempts\n    \"\"\"\n    if compose_file and up:\n        raise TypeError('You must select either a compose file or a custom setup callable, not both.')\n\n    if compose_file is not None:\n        if not isinstance(compose_file, string_types):\n            raise TypeError('The path to the compose file is not a string: {}'.format(repr(compose_file)))\n\n        set_up = ComposeFileUp(compose_file, build=build, service_name=service_name)\n        if down is not None:\n            tear_down = down\n        else:\n            tear_down = ComposeFileDown(compose_file)\n        if on_error is None:\n            on_error = ComposeFileLogs(compose_file)\n    else:\n        set_up = up\n        tear_down = down\n\n    docker_conditions = []\n\n    if log_patterns is not None:\n        if compose_file is None:\n            raise ValueError(\n                'The `log_patterns` convenience is unavailable when using '\n                'a custom setup. Please use a custom condition instead.'\n            )\n        docker_conditions.append(CheckDockerLogs(compose_file, log_patterns, 'all'))\n\n    if conditions is not None:\n        docker_conditions.extend(conditions)\n\n    wrappers = list(wrappers) if wrappers is not None else []\n\n    if mount_logs:\n        if isinstance(mount_logs, dict):\n            wrappers.append(shared_logs(mount_logs['logs']))\n        # Easy mode, read example config\n        else:\n            # An extra level deep because of the context manager\n            check_root = find_check_root(depth=2)\n\n            example_log_configs = _read_example_logs_config(check_root)\n            if mount_logs is True:\n                wrappers.append(shared_logs(example_log_configs))\n            elif isinstance(mount_logs, (list, set)):\n                wrappers.append(shared_logs(example_log_configs, mount_whitelist=mount_logs))\n            else:\n                raise TypeError(\n                    'mount_logs: expected True, a list or a set, but got {}'.format(type(mount_logs).__name__)\n                )\n\n    with environment_run(\n        up=set_up,\n        down=tear_down,\n        on_error=on_error,\n        sleep=sleep,\n        endpoints=endpoints,\n        conditions=docker_conditions,\n        env_vars=env_vars,\n        wrappers=wrappers,\n        attempts=attempts,\n        attempts_wait=attempts_wait,\n    ) as result:\n        yield result\n\n\nclass ComposeFileUp(LazyFunction):\n    def __init__(self, compose_file, build=False, service_name=None):\n        self.compose_file = compose_file\n        self.build = build\n        self.service_name = service_name\n        if using_legacy_docker_compose():\n            self.command = ['docker-compose', '-f', self.compose_file, 'up', '-d']\n        else:\n            self.command = ['docker', 'compose', '--compatibility', '-f', self.compose_file, 'up', '-d']\n\n        if self.build:\n            self.command.append('--build')\n\n        if self.service_name:\n            self.command.append(self.service_name)\n\n    def __call__(self):\n        return run_command(self.command, check=True)\n\n\nclass ComposeFileLogs(LazyFunction):\n    def __init__(self, compose_file, check=True):\n        self.compose_file = compose_file\n        self.check = check\n        if using_legacy_docker_compose():\n            self.command = ['docker-compose', '-f', self.compose_file, 'logs']\n        else:\n            self.command = ['docker', 'compose', '--compatibility', '-f', self.compose_file, 'logs']\n\n    def __call__(self, exception):\n        return run_command(self.command, capture=False, check=self.check)\n\n\nclass ComposeFileDown(LazyFunction):\n    def __init__(self, compose_file, check=True):\n        self.compose_file = compose_file\n        self.check = check\n        if using_legacy_docker_compose():\n            self.command = [\n                'docker-compose',\n                '-f',\n                self.compose_file,\n                'down',\n                '--volumes',\n                '--remove-orphans',\n                '-t',\n                '0',\n            ]\n        else:\n            self.command = [\n                'docker',\n                'compose',\n                '--compatibility',\n                '-f',\n                self.compose_file,\n                'down',\n                '--volumes',\n                '--remove-orphans',\n                '-t',\n                '0',\n            ]\n\n    def __call__(self):\n        return run_command(self.command, check=self.check)\n\n\ndef _read_example_logs_config(check_root):\n    spec = load_spec(check_root)\n\n    for f in spec['files']:\n        for option in f['options']:\n            if option.get('template') == 'logs':\n                return option['example']\n\n    raise ValueError('No logs example found')\n\n\n@contextmanager\ndef temporarily_stop_service(service, compose_file, check=True):\n    # type: (str, str, bool) -> Iterator[None]\n    if using_legacy_docker_compose():\n        stop_command = ['docker-compose', '-f', compose_file, 'stop', service]\n        start_command = ['docker-compose', '-f', compose_file, 'start', service]\n    else:\n        stop_command = ['docker', 'compose', '--compatibility', '-f', compose_file, 'stop', service]\n        start_command = ['docker', 'compose', '--compatibility', '-f', compose_file, 'start', service]\n\n    run_command(stop_command, capture=False, check=check)\n    yield\n    run_command(start_command, capture=False, check=check)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nazure_iot_edge/tests/conftest.py\n## context:\n# (C) Datadog, Inc. 2020-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nimport os\n\nimport pytest\n\nfrom datadog_checks.azure_iot_edge.types import Instance\nfrom datadog_checks.dev import docker_run\nfrom datadog_checks.dev.conditions import CheckDockerLogs, WaitFor\n\nfrom . import common, e2e_utils\n\n\n@pytest.fixture(scope='session')\ndef dd_environment(e2e_instance):\n    if not common.E2E_IOT_EDGE_CONNSTR:\n        raise RuntimeError(\"IOT_EDGE_CONNSTR must be set to start or stop the E2E environment.\")\n\n    if common.E2E_IOT_EDGE_TLS_ENABLED:\n        compose_filename = 'docker-compose-tls.yaml'\n    else:\n        compose_filename = 'docker-compose.yaml'\n\n    compose_file = os.path.join(common.HERE, 'compose', compose_filename)\n\n    conditions = [\n        CheckDockerLogs(compose_file, r'[mgmt] .* 200 OK', wait=5),  # Verify Security Manager boots.\n        CheckDockerLogs(compose_file, 'Successfully started module edgeAgent', wait=5),\n        CheckDockerLogs(compose_file, 'Successfully started module edgeHub', wait=5),\n        CheckDockerLogs(compose_file, 'Successfully started module SimulatedTemperatureSensor', wait=5),\n        WaitFor(e2e_utils.edge_hub_endpoint_ready),\n        WaitFor(e2e_utils.edge_agent_endpoint_ready),\n    ]\n\n    env_vars = {\n        \"E2E_LIBIOTHSM_STD_URL\": common.E2E_LIBIOTHSM_STD_URL,\n        \"E2E_IOTEDGE_URL\": common.E2E_IOTEDGE_URL,\n        \"E2E_IMAGE\": common.E2E_IMAGE,\n        \"E2E_IOT_EDGE_CONNSTR\": common.E2E_IOT_EDGE_CONNSTR,\n    }\n\n    if common.E2E_IOT_EDGE_TLS_ENABLED:\n        for path in (\n            common.E2E_IOT_EDGE_DEVICE_CA_CERT,\n            common.E2E_IOT_EDGE_DEVICE_CA_CERT,\n            common.E2E_IOT_EDGE_DEVICE_CA_PK,\n        ):\n            if not os.path.exists(path):\n                message = (\n                    \"Path {!r} does not exist. \"\n                    \"Please follow instructions in azure_iot_edge/tests/tls/README.md to \"\n                    \"configure test TLS certificates.\"\n                ).format(path)\n                raise RuntimeError(message)\n\n        env_vars.update(\n            {\n                \"E2E_IOT_EDGE_ROOT_CA_CERT\": common.E2E_IOT_EDGE_ROOT_CA_CERT,\n                \"E2E_IOT_EDGE_DEVICE_CA_CERT\": common.E2E_IOT_EDGE_DEVICE_CA_CERT,\n                \"E2E_IOT_EDGE_DEVICE_CA_PK\": common.E2E_IOT_EDGE_DEVICE_CA_PK,\n            }\n        )\n\n    up = e2e_utils.IoTEdgeUp(compose_file, network_name=common.E2E_NETWORK)\n    down = e2e_utils.IoTEdgeDown(compose_file, stop_extra_containers=common.E2E_EXTRA_SPAWNED_CONTAINERS)\n\n    with docker_run(conditions=conditions, env_vars=env_vars, up=up, down=down):\n        yield e2e_instance, common.E2E_METADATA\n\n\n@pytest.fixture(scope='session')\ndef e2e_instance():\n    # type: () -> Instance\n    return {\n        'edge_hub_prometheus_url': common.E2E_EDGE_HUB_PROMETHEUS_URL,\n        'edge_agent_prometheus_url': common.E2E_EDGE_AGENT_PROMETHEUS_URL,\n        'tags': common.CUSTOM_TAGS,\n    }\n\n\n@pytest.fixture(scope='session')\ndef mock_server():\n    compose_file = os.path.join(common.HERE, 'compose', 'mock_server', 'docker-compose.yaml')\n    env_vars = {\"MOCK_SERVER_PORT\": str(common.MOCK_SERVER_PORT)}\n\n    with docker_run(compose_file, env_vars=env_vars):\n        yield\n\n\n@pytest.fixture(scope='session')\ndef mock_instance():\n    # type: () -> Instance\n    return {\n        'edge_hub_prometheus_url': common.MOCK_EDGE_HUB_PROMETHEUS_URL,\n        'edge_agent_prometheus_url': common.MOCK_EDGE_AGENT_PROMETHEUS_URL,\n        'tags': common.CUSTOM_TAGS,\n    }\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nceph/tests/fixtures/raw2.json\n## context:\n{\n    \"df_detail\": {\n        \"pools\": [\n            {\n                \"id\": 0,\n                \"name\": \"rbd\",\n                \"stats\": {\n                    \"bytes_used\": 0,\n                    \"dirty\": 0,\n                    \"kb_used\": 0,\n                    \"max_avail\": 183768246939,\n                    \"objects\": 0,\n                    \"rd\": 0,\n                    \"rd_bytes\": 0,\n                    \"wr\": 0,\n                    \"wr_bytes\": 0\n                }\n            },\n            {\n                \"id\": 1,\n                \"name\": \"pool0\",\n                \"stats\": {\n                    \"bytes_used\": 36266725508,\n                    \"dirty\": 8872,\n                    \"kb_used\": 35416725,\n                    \"max_avail\": 275652370408,\n                    \"objects\": 8872,\n                    \"rd\": 250612,\n                    \"rd_bytes\": 30539931648,\n                    \"wr\": 588776,\n                    \"wr_bytes\": 62512706560\n                }\n            }\n        ],\n        \"stats\": {\n            \"total_avail_bytes\": 556422717440,\n            \"total_bytes\": 627829063680,\n            \"total_objects\": 8872,\n            \"total_used_bytes\": 71406346240\n        }\n    },\n    \"mon_status\": {\n        \"election_epoch\": 38,\n        \"extra_probe_peers\": [\n            \"10.240.0.9:6789/0\",\n            \"10.240.0.10:6789/0\"\n        ],\n        \"monmap\": {\n            \"created\": \"0.000000\",\n            \"epoch\": 1,\n            \"fsid\": \"e0efcf84-e8ed-4916-8ce1-9c70242d390a\",\n            \"modified\": \"0.000000\",\n            \"mons\": [\n                {\n                    \"addr\": \"10.240.0.9:6789/0\",\n                    \"name\": \"ceph1\",\n                    \"rank\": 0\n                },\n                {\n                    \"addr\": \"10.240.0.10:6789/0\",\n                    \"name\": \"ceph2\",\n                    \"rank\": 1\n                },\n                {\n                    \"addr\": \"10.240.0.11:6789/0\",\n                    \"name\": \"ceph3\",\n                    \"rank\": 2\n                }\n            ]\n        },\n        \"name\": \"ceph3\",\n        \"outside_quorum\": [],\n        \"quorum\": [\n            0,\n            1,\n            2\n        ],\n        \"rank\": 2,\n        \"state\": \"peon\",\n        \"sync_provider\": []\n    },\n    \"osd_perf\": {\n        \"osdstats\": {\n            \"osd_perf_infos\": [\n                {\n                    \"id\": 0,\n                    \"perf_stats\": {\n                        \"apply_latency_ms\": 195,\n                        \"commit_latency_ms\": 137\n                    }\n                },\n                {\n                    \"id\": 1,\n                    \"perf_stats\": {\n                        \"apply_latency_ms\": 107,\n                        \"commit_latency_ms\": 71\n                    }\n                },\n                {\n                    \"id\": 2,\n                    \"perf_stats\": {\n                        \"apply_latency_ms\": 125,\n                        \"commit_latency_ms\": 85\n                    }\n                }\n            ]\n        }\n    },\n    \"osd_pool_stats\": [\n        {\n            \"client_io_rate\": {},\n            \"pool_id\": 0,\n            \"pool_name\": \"rbd\",\n            \"recovery\": {},\n            \"recovery_rate\": {}\n        },\n        {\n            \"client_io_rate\": {\n                \"op_per_sec\": 996,\n                \"read_bytes_sec\": 259930926,\n                \"write_bytes_sec\": 378295\n            },\n            \"pool_id\": 1,\n            \"pool_name\": \"pool0\",\n            \"recovery\": {},\n            \"recovery_rate\": {}\n        }\n    ],\n    \"status\": {\n        \"election_epoch\": 38,\n        \"fsid\": \"e0efcf84-e8ed-4916-8ce1-9c70242d390a\",\n        \"health\": {\n            \"detail\": [],\n            \"health\": {\n                \"health_services\": [\n                    {\n                        \"mons\": [\n                            {\n                                \"avail_percent\": 67,\n                                \"health\": \"HEALTH_OK\",\n                                \"kb_avail\": 6903788,\n                                \"kb_total\": 10188088,\n                                \"kb_used\": 2743732,\n                                \"last_updated\": \"2016-01-21 21:13:41.222169\",\n                                \"name\": \"ceph1\",\n                                \"store_stats\": {\n                                    \"bytes_log\": 2817517,\n                                    \"bytes_misc\": 42214264,\n                                    \"bytes_sst\": 0,\n                                    \"bytes_total\": 45031781,\n                                    \"last_updated\": \"0.000000\"\n                                }\n                            },\n                            {\n                                \"avail_percent\": 81,\n                                \"health\": \"HEALTH_OK\",\n                                \"kb_avail\": 8254268,\n                                \"kb_total\": 10188088,\n                                \"kb_used\": 1393252,\n                                \"last_updated\": \"2016-01-21 21:12:51.513343\",\n                                \"name\": \"ceph2\",\n                                \"store_stats\": {\n                                    \"bytes_log\": 3712488,\n                                    \"bytes_misc\": 48652309,\n                                    \"bytes_sst\": 0,\n                                    \"bytes_total\": 52364797,\n                                    \"last_updated\": \"0.000000\"\n                                }\n                            },\n                            {\n                                \"avail_percent\": 81,\n                                \"health\": \"HEALTH_OK\",\n                                \"kb_avail\": 8338704,\n                                \"kb_total\": 10188088,\n                                \"kb_used\": 1308816,\n                                \"last_updated\": \"2016-01-21 21:13:39.924037\",\n                                \"name\": \"ceph3\",\n                                \"store_stats\": {\n                                    \"bytes_log\": 4221302,\n                                    \"bytes_misc\": 48642618,\n                                    \"bytes_sst\": 0,\n                                    \"bytes_total\": 52863920,\n                                    \"last_updated\": \"0.000000\"\n                                }\n                            }\n                        ]\n                    }\n                ]\n            },\n            \"overall_status\": \"HEALTH_OK\",\n            \"summary\": [],\n            \"timechecks\": {\n                \"epoch\": 38,\n                \"mons\": [\n                    {\n                        \"health\": \"HEALTH_OK\",\n                        \"latency\": 0.0,\n                        \"name\": \"ceph1\",\n                        \"skew\": 0.0\n                    },\n                    {\n                        \"health\": \"HEALTH_OK\",\n                        \"latency\": 0.000989,\n                        \"name\": \"ceph2\",\n                        \"skew\": -0.0\n                    },\n                    {\n                        \"health\": \"HEALTH_OK\",\n                        \"latency\": 0.003585,\n                        \"name\": \"ceph3\",\n                        \"skew\": -0.0\n                    }\n                ],\n                \"round\": 6258,\n                \"round_status\": \"finished\"\n            }\n        },\n        \"mdsmap\": {\n            \"by_rank\": [],\n            \"epoch\": 1,\n            \"in\": 0,\n            \"max\": 0,\n            \"up\": 0\n        },\n        \"monmap\": {\n            \"created\": \"0.000000\",\n            \"epoch\": 1,\n            \"fsid\": \"e0efcf84-e8ed-4916-8ce1-9c70242d390a\",\n            \"modified\": \"0.000000\",\n            \"mons\": [\n                {\n                    \"addr\": \"10.240.0.9:6789/0\",\n                    \"name\": \"ceph1\",\n                    \"rank\": 0\n                },\n                {\n                    \"addr\": \"10.240.0.10:6789/0\",\n                    \"name\": \"ceph2\",\n                    \"rank\": 1\n                },\n                {\n                    \"addr\": \"10.240.0.11:6789/0\",\n                    \"name\": \"ceph3\",\n                    \"rank\": 2\n                }\n            ]\n        },\n        \"osdmap\": {\n            \"osdmap\": {\n                \"epoch\": 30,\n                \"full\": false,\n                \"nearfull\": false,\n                \"num_in_osds\": 3,\n                \"num_osds\": 3,\n                \"num_remapped_pgs\": 0,\n                \"num_up_osds\": 3\n            }\n        },\n        \"pgmap\": {\n            \"bytes_avail\": 556422717440,\n            \"bytes_total\": 627829063680,\n            \"bytes_used\": 71406346240,\n            \"data_bytes\": 36266725508,\n            \"num_pgs\": 164,\n            \"pgs_by_state\": [\n                {\n                    \"count\": 164,\n                    \"state_name\": \"active+clean\"\n                }\n            ],\n            \"version\": 15055\n        },\n        \"quorum\": [\n            0,\n            1,\n            2\n        ],\n        \"quorum_names\": [\n            \"ceph1\",\n            \"ceph2\",\n            \"ceph3\"\n        ]\n    }\n}\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkyototycoon/tests/conftest.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\nimport os\n\nimport pytest\nimport requests\n\nfrom datadog_checks.dev import docker_run\n\nfrom .common import DEFAULT_INSTANCE, HERE, URL\n\n\n@pytest.fixture(scope=\"session\")\ndef dd_environment():\n    \"\"\"\n    Spin up a kyototycoon docker image\n    \"\"\"\n\n    with docker_run(\n        compose_file=os.path.join(HERE, 'compose', 'compose_kyototycoon.yaml'),\n        endpoints='{}/rpc/report'.format(URL),\n        mount_logs=True,\n    ):\n\n        # Generate a test database\n        data = {'dddd': 'dddd'}\n        headers = {'X-Kt-Mode': 'set'}\n\n        for _ in range(100):\n            requests.put(URL, data=data, headers=headers)\n            requests.get(URL)\n\n        yield DEFAULT_INSTANCE\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ntokumx/datadog_checks/tokumx/vendor/pymongo/common.py\n## context:\n# Copyright 2011-2015 MongoDB, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n# may not use this file except in compliance with the License.  You\n# may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.  See the License for the specific language governing\n# permissions and limitations under the License.\n\n\n\"\"\"Functions and classes common to multiple pymongo modules.\"\"\"\n\nimport collections\nimport datetime\nimport warnings\n\nfrom datadog_checks.tokumx.vendor.bson.binary import (STANDARD, PYTHON_LEGACY,\n                         JAVA_LEGACY, CSHARP_LEGACY)\nfrom datadog_checks.tokumx.vendor.bson.codec_options import CodecOptions\nfrom datadog_checks.tokumx.vendor.bson.py3compat import string_type, integer_types, iteritems\nfrom datadog_checks.tokumx.vendor.bson.raw_bson import RawBSONDocument\nfrom datadog_checks.tokumx.vendor.pymongo.auth import MECHANISMS\nfrom datadog_checks.tokumx.vendor.pymongo.errors import ConfigurationError\nfrom datadog_checks.tokumx.vendor.pymongo.monitoring import _validate_event_listeners\nfrom datadog_checks.tokumx.vendor.pymongo.read_concern import ReadConcern\nfrom datadog_checks.tokumx.vendor.pymongo.read_preferences import _MONGOS_MODES, _ServerMode\nfrom datadog_checks.tokumx.vendor.pymongo.ssl_support import validate_cert_reqs\nfrom datadog_checks.tokumx.vendor.pymongo.write_concern import WriteConcern\n\n# Defaults until we connect to a server and get updated limits.\nMAX_BSON_SIZE = 16 * (1024 ** 2)\nMAX_MESSAGE_SIZE = 2 * MAX_BSON_SIZE\nMIN_WIRE_VERSION = 0\nMAX_WIRE_VERSION = 0\nMAX_WRITE_BATCH_SIZE = 1000\n\n# What this version of PyMongo supports.\nMIN_SUPPORTED_WIRE_VERSION = 0\nMAX_SUPPORTED_WIRE_VERSION = 5\n\n# Frequency to call ismaster on servers, in seconds.\nHEARTBEAT_FREQUENCY = 10\n\n# Frequency to process kill-cursors, in seconds. See MongoClient.close_cursor.\nKILL_CURSOR_FREQUENCY = 1\n\n# Frequency to process events queue, in seconds.\nEVENTS_QUEUE_FREQUENCY = 1\n\n# How long to wait, in seconds, for a suitable server to be found before\n# aborting an operation. For example, if the client attempts an insert\n# during a replica set election, SERVER_SELECTION_TIMEOUT governs the\n# longest it is willing to wait for a new primary to be found.\nSERVER_SELECTION_TIMEOUT = 30\n\n# Spec requires at least 500ms between ismaster calls.\nMIN_HEARTBEAT_INTERVAL = 0.5\n\n# Default connectTimeout in seconds.\nCONNECT_TIMEOUT = 20.0\n\n# Default value for maxPoolSize.\nMAX_POOL_SIZE = 100\n\n# Default value for minPoolSize.\nMIN_POOL_SIZE = 0\n\n# Default value for maxIdleTimeMS.\nMAX_IDLE_TIME_MS = None\n\n# Default value for localThresholdMS.\nLOCAL_THRESHOLD_MS = 15\n\n# mongod/s 2.6 and above return code 59 when a\n# command doesn't exist. mongod versions previous\n# to 2.6 and mongos 2.4.x return no error code\n# when a command does exist. mongos versions previous\n# to 2.4.0 return code 13390 when a command does not\n# exist.\nCOMMAND_NOT_FOUND_CODES = (59, 13390, None)\n\n# Error codes to ignore if GridFS calls createIndex on a secondary\nUNAUTHORIZED_CODES = (13, 16547, 16548)\n\n\ndef partition_node(node):\n    \"\"\"Split a host:port string into (host, int(port)) pair.\"\"\"\n    host = node\n    port = 27017\n    idx = node.rfind(':')\n    if idx != -1:\n        host, port = node[:idx], int(node[idx + 1:])\n    if host.startswith('['):\n        host = host[1:-1]\n    return host, port\n\n\ndef clean_node(node):\n    \"\"\"Split and normalize a node name from an ismaster response.\"\"\"\n    host, port = partition_node(node)\n\n    # Normalize hostname to lowercase, since DNS is case-insensitive:\n    # http://tools.ietf.org/html/rfc4343\n    # This prevents useless rediscovery if \"foo.com\" is in the seed list but\n    # \"FOO.com\" is in the ismaster response.\n    return host.lower(), port\n\n\ndef raise_config_error(key, dummy):\n    \"\"\"Raise ConfigurationError with the given key name.\"\"\"\n    raise ConfigurationError(\"Unknown option %s\" % (key,))\n\n\n# Mapping of URI uuid representation options to valid subtypes.\n_UUID_REPRESENTATIONS = {\n    'standard': STANDARD,\n    'pythonLegacy': PYTHON_LEGACY,\n    'javaLegacy': JAVA_LEGACY,\n    'csharpLegacy': CSHARP_LEGACY\n}\n\n\ndef validate_boolean(option, value):\n    \"\"\"Validates that 'value' is True or False.\"\"\"\n    if isinstance(value, bool):\n        return value\n    raise TypeError(\"%s must be True or False\" % (option,))\n\n\ndef validate_boolean_or_string(option, value):\n    \"\"\"Validates that value is True, False, 'true', or 'false'.\"\"\"\n    if isinstance(value, string_type):\n        if value not in ('true', 'false'):\n            raise ValueError(\"The value of %s must be \"\n                             \"'true' or 'false'\" % (option,))\n        return value == 'true'\n    return validate_boolean(option, value)\n\n\ndef validate_integer(option, value):\n    \"\"\"Validates that 'value' is an integer (or basestring representation).\n    \"\"\"\n    if isinstance(value, integer_types):\n        return value\n    elif isinstance(value, string_type):\n        if not value.isdigit():\n            raise ValueError(\"The value of %s must be \"\n                             \"an integer\" % (option,))\n        return int(value)\n    raise TypeError(\"Wrong type for %s, value must be an integer\" % (option,))\n\n\ndef validate_positive_integer(option, value):\n    \"\"\"Validate that 'value' is a positive integer, which does not include 0.\n    \"\"\"\n    val = validate_integer(option, value)\n    if val <= 0:\n        raise ValueError(\"The value of %s must be \"\n                         \"a positive integer\" % (option,))\n    return val\n\n\ndef validate_non_negative_integer(option, value):\n    \"\"\"Validate that 'value' is a positive integer or 0.\n    \"\"\"\n    val = validate_integer(option, value)\n    if val < 0:\n        raise ValueError(\"The value of %s must be \"\n                         \"a non negative integer\" % (option,))\n    return val\n\n\ndef validate_readable(option, value):\n    \"\"\"Validates that 'value' is file-like and readable.\n    \"\"\"\n    if value is None:\n        return value\n    # First make sure its a string py3.3 open(True, 'r') succeeds\n    # Used in ssl cert checking due to poor ssl module error reporting\n    value = validate_string(option, value)\n    open(value, 'r').close()\n    return value\n\n\ndef validate_positive_integer_or_none(option, value):\n    \"\"\"Validate that 'value' is a positive integer or None.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_positive_integer(option, value)\n\n\ndef validate_non_negative_integer_or_none(option, value):\n    \"\"\"Validate that 'value' is a positive integer or 0 or None.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_non_negative_integer(option, value)\n\n\ndef validate_string(option, value):\n    \"\"\"Validates that 'value' is an instance of `basestring` for Python 2\n    or `str` for Python 3.\n    \"\"\"\n    if isinstance(value, string_type):\n        return value\n    raise TypeError(\"Wrong type for %s, value must be \"\n                    \"an instance of %s\" % (option, string_type.__name__))\n\n\ndef validate_string_or_none(option, value):\n    \"\"\"Validates that 'value' is an instance of `basestring` or `None`.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_string(option, value)\n\n\ndef validate_int_or_basestring(option, value):\n    \"\"\"Validates that 'value' is an integer or string.\n    \"\"\"\n    if isinstance(value, integer_types):\n        return value\n    elif isinstance(value, string_type):\n        if value.isdigit():\n            return int(value)\n        return value\n    raise TypeError(\"Wrong type for %s, value must be an \"\n                    \"integer or a string\" % (option,))\n\n\ndef validate_positive_float(option, value):\n    \"\"\"Validates that 'value' is a float, or can be converted to one, and is\n       positive.\n    \"\"\"\n    errmsg = \"%s must be an integer or float\" % (option,)\n    try:\n        value = float(value)\n    except ValueError:\n        raise ValueError(errmsg)\n    except TypeError:\n        raise TypeError(errmsg)\n\n    # float('inf') doesn't work in 2.4 or 2.5 on Windows, so just cap floats at\n    # one billion - this is a reasonable approximation for infinity\n    if not 0 < value < 1e9:\n        raise ValueError(\"%s must be greater than 0 and \"\n                         \"less than one billion\" % (option,))\n    return value\n\n\ndef validate_positive_float_or_zero(option, value):\n    \"\"\"Validates that 'value' is 0 or a positive float, or can be converted to\n    0 or a positive float.\n    \"\"\"\n    if value == 0 or value == \"0\":\n        return 0\n    return validate_positive_float(option, value)\n\n\ndef validate_timeout_or_none(option, value):\n    \"\"\"Validates a timeout specified in milliseconds returning\n    a value in floating point seconds.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_positive_float(option, value) / 1000.0\n\n\ndef validate_timeout_or_zero(option, value):\n    \"\"\"Validates a timeout specified in milliseconds returning\n    a value in floating point seconds for the case where None is an error\n    and 0 is valid. Setting the timeout to nothing in the URI string is a\n    config error.\n    \"\"\"\n    if value is None:\n        raise ConfigurationError(\"%s cannot be None\" % (option, ))\n    if value == 0 or value == \"0\":\n        return 0\n    return validate_positive_float(option, value) / 1000.0\n\n\ndef validate_max_staleness(option, value):\n    \"\"\"Validates maxStalenessSeconds according to the Max Staleness Spec.\"\"\"\n    if value == -1 or value == \"-1\":\n        # Default: No maximum staleness.\n        return -1\n    return validate_positive_integer(option, value)\n\n\ndef validate_read_preference(dummy, value):\n    \"\"\"Validate a read preference.\n    \"\"\"\n    if not isinstance(value, _ServerMode):\n        raise TypeError(\"%r is not a read preference.\" % (value,))\n    return value\n\n\ndef validate_read_preference_mode(dummy, value):\n    \"\"\"Validate read preference mode for a MongoReplicaSetClient.\n\n    .. versionchanged:: 3.5\n       Returns the original ``value`` instead of the validated read preference\n       mode.\n    \"\"\"\n    if value not in _MONGOS_MODES:\n        raise ValueError(\"%s is not a valid read preference\" % (value,))\n    return value\n\n\ndef validate_auth_mechanism(option, value):\n    \"\"\"Validate the authMechanism URI option.\n    \"\"\"\n    # CRAM-MD5 is for server testing only. Undocumented,\n    # unsupported, may be removed at any time. You have\n    # been warned.\n    if value not in MECHANISMS and value != 'CRAM-MD5':\n        raise ValueError(\"%s must be in %s\" % (option, tuple(MECHANISMS)))\n    return value\n\n\ndef validate_uuid_representation(dummy, value):\n    \"\"\"Validate the uuid representation option selected in the URI.\n    \"\"\"\n    try:\n        return _UUID_REPRESENTATIONS[value]\n    except KeyError:\n        raise ValueError(\"%s is an invalid UUID representation. \"\n                         \"Must be one of \"\n                         \"%s\" % (value, tuple(_UUID_REPRESENTATIONS)))\n\n\ndef validate_read_preference_tags(name, value):\n    \"\"\"Parse readPreferenceTags if passed as a client kwarg.\n    \"\"\"\n    if not isinstance(value, list):\n        value = [value]\n\n    tag_sets = []\n    for tag_set in value:\n        if tag_set == '':\n            tag_sets.append({})\n            continue\n        try:\n            tag_sets.append(dict([tag.split(\":\")\n                                  for tag in tag_set.split(\",\")]))\n        except Exception:\n            raise ValueError(\"%r not a valid \"\n                             \"value for %s\" % (tag_set, name))\n    return tag_sets\n\n\n_MECHANISM_PROPS = frozenset(['SERVICE_NAME',\n                              'CANONICALIZE_HOST_NAME',\n                              'SERVICE_REALM'])\n\n\ndef validate_auth_mechanism_properties(option, value):\n    \"\"\"Validate authMechanismProperties.\"\"\"\n    value = validate_string(option, value)\n    props = {}\n    for opt in value.split(','):\n        try:\n            key, val = opt.split(':')\n        except ValueError:\n            raise ValueError(\"auth mechanism properties must be \"\n                             \"key:value pairs like SERVICE_NAME:\"\n                             \"mongodb, not %s.\" % (opt,))\n        if key not in _MECHANISM_PROPS:\n            raise ValueError(\"%s is not a supported auth \"\n                             \"mechanism property. Must be one of \"\n                             \"%s.\" % (key, tuple(_MECHANISM_PROPS)))\n        if key == 'CANONICALIZE_HOST_NAME':\n            props[key] = validate_boolean_or_string(key, val)\n        else:\n            props[key] = val\n\n    return props\n\n\ndef validate_document_class(option, value):\n    \"\"\"Validate the document_class option.\"\"\"\n    if not issubclass(value, (collections.MutableMapping, RawBSONDocument)):\n        raise TypeError(\"%s must be dict, bson.son.SON, \"\n                        \"bson.raw_bson.RawBSONDocument, or a \"\n                        \"sublass of collections.MutableMapping\" % (option,))\n    return value\n\n\ndef validate_is_mapping(option, value):\n    \"\"\"Validate the type of method arguments that expect a document.\"\"\"\n    if not isinstance(value, collections.Mapping):\n        raise TypeError(\"%s must be an instance of dict, bson.son.SON, or \"\n                        \"other type that inherits from \"\n                        \"collections.Mapping\" % (option,))\n\n\ndef validate_is_document_type(option, value):\n    \"\"\"Validate the type of method arguments that expect a MongoDB document.\"\"\"\n    if not isinstance(value, (collections.MutableMapping, RawBSONDocument)):\n        raise TypeError(\"%s must be an instance of dict, bson.son.SON, \"\n                        \"bson.raw_bson.RawBSONDocument, or \"\n                        \"a type that inherits from \"\n                        \"collections.MutableMapping\" % (option,))\n\n\ndef validate_appname_or_none(option, value):\n    \"\"\"Validate the appname option.\"\"\"\n    if value is None:\n        return value\n    validate_string(option, value)\n    # We need length in bytes, so encode utf8 first.\n    if len(value.encode('utf-8')) > 128:\n        raise ValueError(\"%s must be <= 128 bytes\" % (option,))\n    return value\n\n\ndef validate_ok_for_replace(replacement):\n    \"\"\"Validate a replacement document.\"\"\"\n    validate_is_mapping(\"replacement\", replacement)\n    # Replacement can be {}\n    if replacement and not isinstance(replacement, RawBSONDocument):\n        first = next(iter(replacement))\n        if first.startswith('$'):\n            raise ValueError('replacement can not include $ operators')\n\n\ndef validate_ok_for_update(update):\n    \"\"\"Validate an update document.\"\"\"\n    validate_is_mapping(\"update\", update)\n    # Update can not be {}\n    if not update:\n        raise ValueError('update only works with $ operators')\n    first = next(iter(update))\n    if not first.startswith('$'):\n        raise ValueError('update only works with $ operators')\n\n\n_UNICODE_DECODE_ERROR_HANDLERS = frozenset(['strict', 'replace', 'ignore'])\n\n\ndef validate_unicode_decode_error_handler(dummy, value):\n    \"\"\"Validate the Unicode decode error handler option of CodecOptions.\n    \"\"\"\n    if value not in _UNICODE_DECODE_ERROR_HANDLERS:\n        raise ValueError(\"%s is an invalid Unicode decode error handler. \"\n                         \"Must be one of \"\n                         \"%s\" % (value, tuple(_UNICODE_DECODE_ERROR_HANDLERS)))\n    return value\n\n\ndef validate_tzinfo(dummy, value):\n    \"\"\"Validate the tzinfo option\n    \"\"\"\n    if value is not None and not isinstance(value, datetime.tzinfo):\n        raise TypeError(\"%s must be an instance of datetime.tzinfo\" % value)\n    return value\n\n\n# journal is an alias for j,\n# wtimeoutms is an alias for wtimeout,\nURI_VALIDATORS = {\n    'replicaset': validate_string_or_none,\n    'w': validate_int_or_basestring,\n    'wtimeout': validate_integer,\n    'wtimeoutms': validate_integer,\n    'fsync': validate_boolean_or_string,\n    'j': validate_boolean_or_string,\n    'journal': validate_boolean_or_string,\n    'maxpoolsize': validate_positive_integer_or_none,\n    'socketkeepalive': validate_boolean_or_string,\n    'waitqueuemultiple': validate_non_negative_integer_or_none,\n    'ssl': validate_boolean_or_string,\n    'ssl_keyfile': validate_readable,\n    'ssl_certfile': validate_readable,\n    'ssl_pem_passphrase': validate_string_or_none,\n    'ssl_cert_reqs': validate_cert_reqs,\n    'ssl_ca_certs': validate_readable,\n    'ssl_match_hostname': validate_boolean_or_string,\n    'ssl_crlfile': validate_readable,\n    'readconcernlevel': validate_string_or_none,\n    'readpreference': validate_read_preference_mode,\n    'readpreferencetags': validate_read_preference_tags,\n    'localthresholdms': validate_positive_float_or_zero,\n    'authmechanism': validate_auth_mechanism,\n    'authsource': validate_string,\n    'authmechanismproperties': validate_auth_mechanism_properties,\n    'tz_aware': validate_boolean_or_string,\n    'uuidrepresentation': validate_uuid_representation,\n    'connect': validate_boolean_or_string,\n    'minpoolsize': validate_non_negative_integer,\n    'appname': validate_appname_or_none,\n    'unicode_decode_error_handler': validate_unicode_decode_error_handler\n}\n\nTIMEOUT_VALIDATORS = {\n    'connecttimeoutms': validate_timeout_or_none,\n    'sockettimeoutms': validate_timeout_or_none,\n    'waitqueuetimeoutms': validate_timeout_or_none,\n    'serverselectiontimeoutms': validate_timeout_or_zero,\n    'heartbeatfrequencyms': validate_timeout_or_none,\n    'maxidletimems': validate_timeout_or_none,\n    'maxstalenessseconds': validate_max_staleness,\n}\n\nKW_VALIDATORS = {\n    'document_class': validate_document_class,\n    'read_preference': validate_read_preference,\n    'event_listeners': _validate_event_listeners,\n    'tzinfo': validate_tzinfo,\n    'username': validate_string_or_none,\n    'password': validate_string_or_none,\n}\n\nURI_VALIDATORS.update(TIMEOUT_VALIDATORS)\nVALIDATORS = URI_VALIDATORS.copy()\nVALIDATORS.update(KW_VALIDATORS)\n\n\n_AUTH_OPTIONS = frozenset(['authmechanismproperties'])\n\n\ndef validate_auth_option(option, value):\n    \"\"\"Validate optional authentication parameters.\n    \"\"\"\n    lower, value = validate(option, value)\n    if lower not in _AUTH_OPTIONS:\n        raise ConfigurationError('Unknown '\n                                 'authentication option: %s' % (option,))\n    return lower, value\n\n\ndef validate(option, value):\n    \"\"\"Generic validation function.\n    \"\"\"\n    lower = option.lower()\n    validator = VALIDATORS.get(lower, raise_config_error)\n    value = validator(option, value)\n    return lower, value\n\n\ndef get_validated_options(options, warn=True):\n    \"\"\"Validate each entry in options and raise a warning if it is not valid.\n    Returns a copy of options with invalid entries removed\n    \"\"\"\n    validated_options = {}\n    for opt, value in iteritems(options):\n        lower = opt.lower()\n        try:\n            validator = URI_VALIDATORS.get(lower, raise_config_error)\n            value = validator(opt, value)\n        except (ValueError, ConfigurationError) as exc:\n            if warn:\n                warnings.warn(str(exc))\n            else:\n                raise\n        else:\n            validated_options[lower] = value\n    return validated_options\n\n\nWRITE_CONCERN_OPTIONS = frozenset([\n    'w',\n    'wtimeout',\n    'wtimeoutms',\n    'fsync',\n    'j',\n    'journal'\n])\n\n\nclass BaseObject(object):\n    \"\"\"A base class that provides attributes and methods common\n    to multiple pymongo classes.\n\n    SHOULD NOT BE USED BY DEVELOPERS EXTERNAL TO MONGODB.\n    \"\"\"\n\n    def __init__(self, codec_options, read_preference, write_concern,\n                 read_concern):\n\n        if not isinstance(codec_options, CodecOptions):\n            raise TypeError(\"codec_options must be an instance of \"\n                            \"bson.codec_options.CodecOptions\")\n        self.__codec_options = codec_options\n\n        if not isinstance(read_preference, _ServerMode):\n            raise TypeError(\"%r is not valid for read_preference. See \"\n                            \"pymongo.read_preferences for valid \"\n                            \"options.\" % (read_preference,))\n        self.__read_preference = read_preference\n\n        if not isinstance(write_concern, WriteConcern):\n            raise TypeError(\"write_concern must be an instance of \"\n                            \"pymongo.write_concern.WriteConcern\")\n        self.__write_concern = write_concern\n\n        if not isinstance(read_concern, ReadConcern):\n            raise TypeError(\"read_concern must be an instance of \"\n                            \"pymongo.read_concern.ReadConcern\")\n        self.__read_concern = read_concern\n\n    @property\n    def codec_options(self):\n        \"\"\"Read only access to the :class:`~bson.codec_options.CodecOptions`\n        of this instance.\n        \"\"\"\n        return self.__codec_options\n\n    @property\n    def write_concern(self):\n        \"\"\"Read only access to the :class:`~pymongo.write_concern.WriteConcern`\n        of this instance.\n\n        .. versionchanged:: 3.0\n          The :attr:`write_concern` attribute is now read only.\n        \"\"\"\n        return self.__write_concern\n\n    @property\n    def read_preference(self):\n        \"\"\"Read only access to the read preference of this instance.\n\n        .. versionchanged:: 3.0\n          The :attr:`read_preference` attribute is now read only.\n        \"\"\"\n        return self.__read_preference\n\n    @property\n    def read_concern(self):\n        \"\"\"Read only access to the read concern of this instance.\n\n        .. versionadded:: 3.2\n        \"\"\"\n        return self.__read_concern\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncilium/datadog_checks/cilium/config_models/__init__.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\n# This file is autogenerated.\n# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:\n#     ddev -x validate config -s <INTEGRATION_NAME>\n#     ddev -x validate models -s <INTEGRATION_NAME>\n\nfrom .instance import InstanceConfig\nfrom .shared import SharedConfig\n\n\nclass ConfigMixin:\n    _config_model_instance: InstanceConfig\n    _config_model_shared: SharedConfig\n\n    @property\n    def config(self) -> InstanceConfig:\n        return self._config_model_instance\n\n    @property\n    def shared_config(self) -> SharedConfig:\n        return self._config_model_shared\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ntokumx/datadog_checks/tokumx/vendor/pymongo/common.py\n## context:\n# Copyright 2011-2015 MongoDB, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n# may not use this file except in compliance with the License.  You\n# may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n# implied.  See the License for the specific language governing\n# permissions and limitations under the License.\n\n\n\"\"\"Functions and classes common to multiple pymongo modules.\"\"\"\n\nimport collections\nimport datetime\nimport warnings\n\nfrom datadog_checks.tokumx.vendor.bson.binary import (STANDARD, PYTHON_LEGACY,\n                         JAVA_LEGACY, CSHARP_LEGACY)\nfrom datadog_checks.tokumx.vendor.bson.codec_options import CodecOptions\nfrom datadog_checks.tokumx.vendor.bson.py3compat import string_type, integer_types, iteritems\nfrom datadog_checks.tokumx.vendor.bson.raw_bson import RawBSONDocument\nfrom datadog_checks.tokumx.vendor.pymongo.auth import MECHANISMS\nfrom datadog_checks.tokumx.vendor.pymongo.errors import ConfigurationError\nfrom datadog_checks.tokumx.vendor.pymongo.monitoring import _validate_event_listeners\nfrom datadog_checks.tokumx.vendor.pymongo.read_concern import ReadConcern\nfrom datadog_checks.tokumx.vendor.pymongo.read_preferences import _MONGOS_MODES, _ServerMode\nfrom datadog_checks.tokumx.vendor.pymongo.ssl_support import validate_cert_reqs\nfrom datadog_checks.tokumx.vendor.pymongo.write_concern import WriteConcern\n\n# Defaults until we connect to a server and get updated limits.\nMAX_BSON_SIZE = 16 * (1024 ** 2)\nMAX_MESSAGE_SIZE = 2 * MAX_BSON_SIZE\nMIN_WIRE_VERSION = 0\nMAX_WIRE_VERSION = 0\nMAX_WRITE_BATCH_SIZE = 1000\n\n# What this version of PyMongo supports.\nMIN_SUPPORTED_WIRE_VERSION = 0\nMAX_SUPPORTED_WIRE_VERSION = 5\n\n# Frequency to call ismaster on servers, in seconds.\nHEARTBEAT_FREQUENCY = 10\n\n# Frequency to process kill-cursors, in seconds. See MongoClient.close_cursor.\nKILL_CURSOR_FREQUENCY = 1\n\n# Frequency to process events queue, in seconds.\nEVENTS_QUEUE_FREQUENCY = 1\n\n# How long to wait, in seconds, for a suitable server to be found before\n# aborting an operation. For example, if the client attempts an insert\n# during a replica set election, SERVER_SELECTION_TIMEOUT governs the\n# longest it is willing to wait for a new primary to be found.\nSERVER_SELECTION_TIMEOUT = 30\n\n# Spec requires at least 500ms between ismaster calls.\nMIN_HEARTBEAT_INTERVAL = 0.5\n\n# Default connectTimeout in seconds.\nCONNECT_TIMEOUT = 20.0\n\n# Default value for maxPoolSize.\nMAX_POOL_SIZE = 100\n\n# Default value for minPoolSize.\nMIN_POOL_SIZE = 0\n\n# Default value for maxIdleTimeMS.\nMAX_IDLE_TIME_MS = None\n\n# Default value for localThresholdMS.\nLOCAL_THRESHOLD_MS = 15\n\n# mongod/s 2.6 and above return code 59 when a\n# command doesn't exist. mongod versions previous\n# to 2.6 and mongos 2.4.x return no error code\n# when a command does exist. mongos versions previous\n# to 2.4.0 return code 13390 when a command does not\n# exist.\nCOMMAND_NOT_FOUND_CODES = (59, 13390, None)\n\n# Error codes to ignore if GridFS calls createIndex on a secondary\nUNAUTHORIZED_CODES = (13, 16547, 16548)\n\n\ndef partition_node(node):\n    \"\"\"Split a host:port string into (host, int(port)) pair.\"\"\"\n    host = node\n    port = 27017\n    idx = node.rfind(':')\n    if idx != -1:\n        host, port = node[:idx], int(node[idx + 1:])\n    if host.startswith('['):\n        host = host[1:-1]\n    return host, port\n\n\ndef clean_node(node):\n    \"\"\"Split and normalize a node name from an ismaster response.\"\"\"\n    host, port = partition_node(node)\n\n    # Normalize hostname to lowercase, since DNS is case-insensitive:\n    # http://tools.ietf.org/html/rfc4343\n    # This prevents useless rediscovery if \"foo.com\" is in the seed list but\n    # \"FOO.com\" is in the ismaster response.\n    return host.lower(), port\n\n\ndef raise_config_error(key, dummy):\n    \"\"\"Raise ConfigurationError with the given key name.\"\"\"\n    raise ConfigurationError(\"Unknown option %s\" % (key,))\n\n\n# Mapping of URI uuid representation options to valid subtypes.\n_UUID_REPRESENTATIONS = {\n    'standard': STANDARD,\n    'pythonLegacy': PYTHON_LEGACY,\n    'javaLegacy': JAVA_LEGACY,\n    'csharpLegacy': CSHARP_LEGACY\n}\n\n\ndef validate_boolean(option, value):\n    \"\"\"Validates that 'value' is True or False.\"\"\"\n    if isinstance(value, bool):\n        return value\n    raise TypeError(\"%s must be True or False\" % (option,))\n\n\ndef validate_boolean_or_string(option, value):\n    \"\"\"Validates that value is True, False, 'true', or 'false'.\"\"\"\n    if isinstance(value, string_type):\n        if value not in ('true', 'false'):\n            raise ValueError(\"The value of %s must be \"\n                             \"'true' or 'false'\" % (option,))\n        return value == 'true'\n    return validate_boolean(option, value)\n\n\ndef validate_integer(option, value):\n    \"\"\"Validates that 'value' is an integer (or basestring representation).\n    \"\"\"\n    if isinstance(value, integer_types):\n        return value\n    elif isinstance(value, string_type):\n        if not value.isdigit():\n            raise ValueError(\"The value of %s must be \"\n                             \"an integer\" % (option,))\n        return int(value)\n    raise TypeError(\"Wrong type for %s, value must be an integer\" % (option,))\n\n\ndef validate_positive_integer(option, value):\n    \"\"\"Validate that 'value' is a positive integer, which does not include 0.\n    \"\"\"\n    val = validate_integer(option, value)\n    if val <= 0:\n        raise ValueError(\"The value of %s must be \"\n                         \"a positive integer\" % (option,))\n    return val\n\n\ndef validate_non_negative_integer(option, value):\n    \"\"\"Validate that 'value' is a positive integer or 0.\n    \"\"\"\n    val = validate_integer(option, value)\n    if val < 0:\n        raise ValueError(\"The value of %s must be \"\n                         \"a non negative integer\" % (option,))\n    return val\n\n\ndef validate_readable(option, value):\n    \"\"\"Validates that 'value' is file-like and readable.\n    \"\"\"\n    if value is None:\n        return value\n    # First make sure its a string py3.3 open(True, 'r') succeeds\n    # Used in ssl cert checking due to poor ssl module error reporting\n    value = validate_string(option, value)\n    open(value, 'r').close()\n    return value\n\n\ndef validate_positive_integer_or_none(option, value):\n    \"\"\"Validate that 'value' is a positive integer or None.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_positive_integer(option, value)\n\n\ndef validate_non_negative_integer_or_none(option, value):\n    \"\"\"Validate that 'value' is a positive integer or 0 or None.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_non_negative_integer(option, value)\n\n\ndef validate_string(option, value):\n    \"\"\"Validates that 'value' is an instance of `basestring` for Python 2\n    or `str` for Python 3.\n    \"\"\"\n    if isinstance(value, string_type):\n        return value\n    raise TypeError(\"Wrong type for %s, value must be \"\n                    \"an instance of %s\" % (option, string_type.__name__))\n\n\ndef validate_string_or_none(option, value):\n    \"\"\"Validates that 'value' is an instance of `basestring` or `None`.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_string(option, value)\n\n\ndef validate_int_or_basestring(option, value):\n    \"\"\"Validates that 'value' is an integer or string.\n    \"\"\"\n    if isinstance(value, integer_types):\n        return value\n    elif isinstance(value, string_type):\n        if value.isdigit():\n            return int(value)\n        return value\n    raise TypeError(\"Wrong type for %s, value must be an \"\n                    \"integer or a string\" % (option,))\n\n\ndef validate_positive_float(option, value):\n    \"\"\"Validates that 'value' is a float, or can be converted to one, and is\n       positive.\n    \"\"\"\n    errmsg = \"%s must be an integer or float\" % (option,)\n    try:\n        value = float(value)\n    except ValueError:\n        raise ValueError(errmsg)\n    except TypeError:\n        raise TypeError(errmsg)\n\n    # float('inf') doesn't work in 2.4 or 2.5 on Windows, so just cap floats at\n    # one billion - this is a reasonable approximation for infinity\n    if not 0 < value < 1e9:\n        raise ValueError(\"%s must be greater than 0 and \"\n                         \"less than one billion\" % (option,))\n    return value\n\n\ndef validate_positive_float_or_zero(option, value):\n    \"\"\"Validates that 'value' is 0 or a positive float, or can be converted to\n    0 or a positive float.\n    \"\"\"\n    if value == 0 or value == \"0\":\n        return 0\n    return validate_positive_float(option, value)\n\n\ndef validate_timeout_or_none(option, value):\n    \"\"\"Validates a timeout specified in milliseconds returning\n    a value in floating point seconds.\n    \"\"\"\n    if value is None:\n        return value\n    return validate_positive_float(option, value) / 1000.0\n\n\ndef validate_timeout_or_zero(option, value):\n    \"\"\"Validates a timeout specified in milliseconds returning\n    a value in floating point seconds for the case where None is an error\n    and 0 is valid. Setting the timeout to nothing in the URI string is a\n    config error.\n    \"\"\"\n    if value is None:\n        raise ConfigurationError(\"%s cannot be None\" % (option, ))\n    if value == 0 or value == \"0\":\n        return 0\n    return validate_positive_float(option, value) / 1000.0\n\n\ndef validate_max_staleness(option, value):\n    \"\"\"Validates maxStalenessSeconds according to the Max Staleness Spec.\"\"\"\n    if value == -1 or value == \"-1\":\n        # Default: No maximum staleness.\n        return -1\n    return validate_positive_integer(option, value)\n\n\ndef validate_read_preference(dummy, value):\n    \"\"\"Validate a read preference.\n    \"\"\"\n    if not isinstance(value, _ServerMode):\n        raise TypeError(\"%r is not a read preference.\" % (value,))\n    return value\n\n\ndef validate_read_preference_mode(dummy, value):\n    \"\"\"Validate read preference mode for a MongoReplicaSetClient.\n\n    .. versionchanged:: 3.5\n       Returns the original ``value`` instead of the validated read preference\n       mode.\n    \"\"\"\n    if value not in _MONGOS_MODES:\n        raise ValueError(\"%s is not a valid read preference\" % (value,))\n    return value\n\n\ndef validate_auth_mechanism(option, value):\n    \"\"\"Validate the authMechanism URI option.\n    \"\"\"\n    # CRAM-MD5 is for server testing only. Undocumented,\n    # unsupported, may be removed at any time. You have\n    # been warned.\n    if value not in MECHANISMS and value != 'CRAM-MD5':\n        raise ValueError(\"%s must be in %s\" % (option, tuple(MECHANISMS)))\n    return value\n\n\ndef validate_uuid_representation(dummy, value):\n    \"\"\"Validate the uuid representation option selected in the URI.\n    \"\"\"\n    try:\n        return _UUID_REPRESENTATIONS[value]\n    except KeyError:\n        raise ValueError(\"%s is an invalid UUID representation. \"\n                         \"Must be one of \"\n                         \"%s\" % (value, tuple(_UUID_REPRESENTATIONS)))\n\n\ndef validate_read_preference_tags(name, value):\n    \"\"\"Parse readPreferenceTags if passed as a client kwarg.\n    \"\"\"\n    if not isinstance(value, list):\n        value = [value]\n\n    tag_sets = []\n    for tag_set in value:\n        if tag_set == '':\n            tag_sets.append({})\n            continue\n        try:\n            tag_sets.append(dict([tag.split(\":\")\n                                  for tag in tag_set.split(\",\")]))\n        except Exception:\n            raise ValueError(\"%r not a valid \"\n                             \"value for %s\" % (tag_set, name))\n    return tag_sets\n\n\n_MECHANISM_PROPS = frozenset(['SERVICE_NAME',\n                              'CANONICALIZE_HOST_NAME',\n                              'SERVICE_REALM'])\n\n\ndef validate_auth_mechanism_properties(option, value):\n    \"\"\"Validate authMechanismProperties.\"\"\"\n    value = validate_string(option, value)\n    props = {}\n    for opt in value.split(','):\n        try:\n            key, val = opt.split(':')\n        except ValueError:\n            raise ValueError(\"auth mechanism properties must be \"\n                             \"key:value pairs like SERVICE_NAME:\"\n                             \"mongodb, not %s.\" % (opt,))\n        if key not in _MECHANISM_PROPS:\n            raise ValueError(\"%s is not a supported auth \"\n                             \"mechanism property. Must be one of \"\n                             \"%s.\" % (key, tuple(_MECHANISM_PROPS)))\n        if key == 'CANONICALIZE_HOST_NAME':\n            props[key] = validate_boolean_or_string(key, val)\n        else:\n            props[key] = val\n\n    return props\n\n\ndef validate_document_class(option, value):\n    \"\"\"Validate the document_class option.\"\"\"\n    if not issubclass(value, (collections.MutableMapping, RawBSONDocument)):\n        raise TypeError(\"%s must be dict, bson.son.SON, \"\n                        \"bson.raw_bson.RawBSONDocument, or a \"\n                        \"sublass of collections.MutableMapping\" % (option,))\n    return value\n\n\ndef validate_is_mapping(option, value):\n    \"\"\"Validate the type of method arguments that expect a document.\"\"\"\n    if not isinstance(value, collections.Mapping):\n        raise TypeError(\"%s must be an instance of dict, bson.son.SON, or \"\n                        \"other type that inherits from \"\n                        \"collections.Mapping\" % (option,))\n\n\ndef validate_is_document_type(option, value):\n    \"\"\"Validate the type of method arguments that expect a MongoDB document.\"\"\"\n    if not isinstance(value, (collections.MutableMapping, RawBSONDocument)):\n        raise TypeError(\"%s must be an instance of dict, bson.son.SON, \"\n                        \"bson.raw_bson.RawBSONDocument, or \"\n                        \"a type that inherits from \"\n                        \"collections.MutableMapping\" % (option,))\n\n\ndef validate_appname_or_none(option, value):\n    \"\"\"Validate the appname option.\"\"\"\n    if value is None:\n        return value\n    validate_string(option, value)\n    # We need length in bytes, so encode utf8 first.\n    if len(value.encode('utf-8')) > 128:\n        raise ValueError(\"%s must be <= 128 bytes\" % (option,))\n    return value\n\n\ndef validate_ok_for_replace(replacement):\n    \"\"\"Validate a replacement document.\"\"\"\n    validate_is_mapping(\"replacement\", replacement)\n    # Replacement can be {}\n    if replacement and not isinstance(replacement, RawBSONDocument):\n        first = next(iter(replacement))\n        if first.startswith('$'):\n            raise ValueError('replacement can not include $ operators')\n\n\ndef validate_ok_for_update(update):\n    \"\"\"Validate an update document.\"\"\"\n    validate_is_mapping(\"update\", update)\n    # Update can not be {}\n    if not update:\n        raise ValueError('update only works with $ operators')\n    first = next(iter(update))\n    if not first.startswith('$'):\n        raise ValueError('update only works with $ operators')\n\n\n_UNICODE_DECODE_ERROR_HANDLERS = frozenset(['strict', 'replace', 'ignore'])\n\n\ndef validate_unicode_decode_error_handler(dummy, value):\n    \"\"\"Validate the Unicode decode error handler option of CodecOptions.\n    \"\"\"\n    if value not in _UNICODE_DECODE_ERROR_HANDLERS:\n        raise ValueError(\"%s is an invalid Unicode decode error handler. \"\n                         \"Must be one of \"\n                         \"%s\" % (value, tuple(_UNICODE_DECODE_ERROR_HANDLERS)))\n    return value\n\n\ndef validate_tzinfo(dummy, value):\n    \"\"\"Validate the tzinfo option\n    \"\"\"\n    if value is not None and not isinstance(value, datetime.tzinfo):\n        raise TypeError(\"%s must be an instance of datetime.tzinfo\" % value)\n    return value\n\n\n# journal is an alias for j,\n# wtimeoutms is an alias for wtimeout,\nURI_VALIDATORS = {\n    'replicaset': validate_string_or_none,\n    'w': validate_int_or_basestring,\n    'wtimeout': validate_integer,\n    'wtimeoutms': validate_integer,\n    'fsync': validate_boolean_or_string,\n    'j': validate_boolean_or_string,\n    'journal': validate_boolean_or_string,\n    'maxpoolsize': validate_positive_integer_or_none,\n    'socketkeepalive': validate_boolean_or_string,\n    'waitqueuemultiple': validate_non_negative_integer_or_none,\n    'ssl': validate_boolean_or_string,\n    'ssl_keyfile': validate_readable,\n    'ssl_certfile': validate_readable,\n    'ssl_pem_passphrase': validate_string_or_none,\n    'ssl_cert_reqs': validate_cert_reqs,\n    'ssl_ca_certs': validate_readable,\n    'ssl_match_hostname': validate_boolean_or_string,\n    'ssl_crlfile': validate_readable,\n    'readconcernlevel': validate_string_or_none,\n    'readpreference': validate_read_preference_mode,\n    'readpreferencetags': validate_read_preference_tags,\n    'localthresholdms': validate_positive_float_or_zero,\n    'authmechanism': validate_auth_mechanism,\n    'authsource': validate_string,\n    'authmechanismproperties': validate_auth_mechanism_properties,\n    'tz_aware': validate_boolean_or_string,\n    'uuidrepresentation': validate_uuid_representation,\n    'connect': validate_boolean_or_string,\n    'minpoolsize': validate_non_negative_integer,\n    'appname': validate_appname_or_none,\n    'unicode_decode_error_handler': validate_unicode_decode_error_handler\n}\n\nTIMEOUT_VALIDATORS = {\n    'connecttimeoutms': validate_timeout_or_none,\n    'sockettimeoutms': validate_timeout_or_none,\n    'waitqueuetimeoutms': validate_timeout_or_none,\n    'serverselectiontimeoutms': validate_timeout_or_zero,\n    'heartbeatfrequencyms': validate_timeout_or_none,\n    'maxidletimems': validate_timeout_or_none,\n    'maxstalenessseconds': validate_max_staleness,\n}\n\nKW_VALIDATORS = {\n    'document_class': validate_document_class,\n    'read_preference': validate_read_preference,\n    'event_listeners': _validate_event_listeners,\n    'tzinfo': validate_tzinfo,\n    'username': validate_string_or_none,\n    'password': validate_string_or_none,\n}\n\nURI_VALIDATORS.update(TIMEOUT_VALIDATORS)\nVALIDATORS = URI_VALIDATORS.copy()\nVALIDATORS.update(KW_VALIDATORS)\n\n\n_AUTH_OPTIONS = frozenset(['authmechanismproperties'])\n\n\ndef validate_auth_option(option, value):\n    \"\"\"Validate optional authentication parameters.\n    \"\"\"\n    lower, value = validate(option, value)\n    if lower not in _AUTH_OPTIONS:\n        raise ConfigurationError('Unknown '\n                                 'authentication option: %s' % (option,))\n    return lower, value\n\n\ndef validate(option, value):\n    \"\"\"Generic validation function.\n    \"\"\"\n    lower = option.lower()\n    validator = VALIDATORS.get(lower, raise_config_error)\n    value = validator(option, value)\n    return lower, value\n\n\ndef get_validated_options(options, warn=True):\n    \"\"\"Validate each entry in options and raise a warning if it is not valid.\n    Returns a copy of options with invalid entries removed\n    \"\"\"\n    validated_options = {}\n    for opt, value in iteritems(options):\n        lower = opt.lower()\n        try:\n            validator = URI_VALIDATORS.get(lower, raise_config_error)\n            value = validator(opt, value)\n        except (ValueError, ConfigurationError) as exc:\n            if warn:\n                warnings.warn(str(exc))\n            else:\n                raise\n        else:\n            validated_options[lower] = value\n    return validated_options\n\n\nWRITE_CONCERN_OPTIONS = frozenset([\n    'w',\n    'wtimeout',\n    'wtimeoutms',\n    'fsync',\n    'j',\n    'journal'\n])\n\n\nclass BaseObject(object):\n    \"\"\"A base class that provides attributes and methods common\n    to multiple pymongo classes.\n\n    SHOULD NOT BE USED BY DEVELOPERS EXTERNAL TO MONGODB.\n    \"\"\"\n\n    def __init__(self, codec_options, read_preference, write_concern,\n                 read_concern):\n\n        if not isinstance(codec_options, CodecOptions):\n            raise TypeError(\"codec_options must be an instance of \"\n                            \"bson.codec_options.CodecOptions\")\n        self.__codec_options = codec_options\n\n        if not isinstance(read_preference, _ServerMode):\n            raise TypeError(\"%r is not valid for read_preference. See \"\n                            \"pymongo.read_preferences for valid \"\n                            \"options.\" % (read_preference,))\n        self.__read_preference = read_preference\n\n        if not isinstance(write_concern, WriteConcern):\n            raise TypeError(\"write_concern must be an instance of \"\n                            \"pymongo.write_concern.WriteConcern\")\n        self.__write_concern = write_concern\n\n        if not isinstance(read_concern, ReadConcern):\n            raise TypeError(\"read_concern must be an instance of \"\n                            \"pymongo.read_concern.ReadConcern\")\n        self.__read_concern = read_concern\n\n    @property\n    def codec_options(self):\n        \"\"\"Read only access to the :class:`~bson.codec_options.CodecOptions`\n        of this instance.\n        \"\"\"\n        return self.__codec_options\n\n    @property\n    def write_concern(self):\n        \"\"\"Read only access to the :class:`~pymongo.write_concern.WriteConcern`\n        of this instance.\n\n        .. versionchanged:: 3.0\n          The :attr:`write_concern` attribute is now read only.\n        \"\"\"\n        return self.__write_concern\n\n    @property\n    def read_preference(self):\n        \"\"\"Read only access to the read preference of this instance.\n\n        .. versionchanged:: 3.0\n          The :attr:`read_preference` attribute is now read only.\n        \"\"\"\n        return self.__read_preference\n\n    @property\n    def read_concern(self):\n        \"\"\"Read only access to the read concern of this instance.\n\n        .. versionadded:: 3.2\n        \"\"\"\n        return self.__read_concern\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nazure_iot_edge/tests/conftest.py\n## context:\n# (C) Datadog, Inc. 2020-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nimport os\n\nimport pytest\n\nfrom datadog_checks.azure_iot_edge.types import Instance\nfrom datadog_checks.dev import docker_run\nfrom datadog_checks.dev.conditions import CheckDockerLogs, WaitFor\n\nfrom . import common, e2e_utils\n\n\n@pytest.fixture(scope='session')\ndef dd_environment(e2e_instance):\n    if not common.E2E_IOT_EDGE_CONNSTR:\n        raise RuntimeError(\"IOT_EDGE_CONNSTR must be set to start or stop the E2E environment.\")\n\n    if common.E2E_IOT_EDGE_TLS_ENABLED:\n        compose_filename = 'docker-compose-tls.yaml'\n    else:\n        compose_filename = 'docker-compose.yaml'\n\n    compose_file = os.path.join(common.HERE, 'compose', compose_filename)\n\n    conditions = [\n        CheckDockerLogs(compose_file, r'[mgmt] .* 200 OK', wait=5),  # Verify Security Manager boots.\n        CheckDockerLogs(compose_file, 'Successfully started module edgeAgent', wait=5),\n        CheckDockerLogs(compose_file, 'Successfully started module edgeHub', wait=5),\n        CheckDockerLogs(compose_file, 'Successfully started module SimulatedTemperatureSensor', wait=5),\n        WaitFor(e2e_utils.edge_hub_endpoint_ready),\n        WaitFor(e2e_utils.edge_agent_endpoint_ready),\n    ]\n\n    env_vars = {\n        \"E2E_LIBIOTHSM_STD_URL\": common.E2E_LIBIOTHSM_STD_URL,\n        \"E2E_IOTEDGE_URL\": common.E2E_IOTEDGE_URL,\n        \"E2E_IMAGE\": common.E2E_IMAGE,\n        \"E2E_IOT_EDGE_CONNSTR\": common.E2E_IOT_EDGE_CONNSTR,\n    }\n\n    if common.E2E_IOT_EDGE_TLS_ENABLED:\n        for path in (\n            common.E2E_IOT_EDGE_DEVICE_CA_CERT,\n            common.E2E_IOT_EDGE_DEVICE_CA_CERT,\n            common.E2E_IOT_EDGE_DEVICE_CA_PK,\n        ):\n            if not os.path.exists(path):\n                message = (\n                    \"Path {!r} does not exist. \"\n                    \"Please follow instructions in azure_iot_edge/tests/tls/README.md to \"\n                    \"configure test TLS certificates.\"\n                ).format(path)\n                raise RuntimeError(message)\n\n        env_vars.update(\n            {\n                \"E2E_IOT_EDGE_ROOT_CA_CERT\": common.E2E_IOT_EDGE_ROOT_CA_CERT,\n                \"E2E_IOT_EDGE_DEVICE_CA_CERT\": common.E2E_IOT_EDGE_DEVICE_CA_CERT,\n                \"E2E_IOT_EDGE_DEVICE_CA_PK\": common.E2E_IOT_EDGE_DEVICE_CA_PK,\n            }\n        )\n\n    up = e2e_utils.IoTEdgeUp(compose_file, network_name=common.E2E_NETWORK)\n    down = e2e_utils.IoTEdgeDown(compose_file, stop_extra_containers=common.E2E_EXTRA_SPAWNED_CONTAINERS)\n\n    with docker_run(conditions=conditions, env_vars=env_vars, up=up, down=down):\n        yield e2e_instance, common.E2E_METADATA\n\n\n@pytest.fixture(scope='session')\ndef e2e_instance():\n    # type: () -> Instance\n    return {\n        'edge_hub_prometheus_url': common.E2E_EDGE_HUB_PROMETHEUS_URL,\n        'edge_agent_prometheus_url': common.E2E_EDGE_AGENT_PROMETHEUS_URL,\n        'tags': common.CUSTOM_TAGS,\n    }\n\n\n@pytest.fixture(scope='session')\ndef mock_server():\n    compose_file = os.path.join(common.HERE, 'compose', 'mock_server', 'docker-compose.yaml')\n    env_vars = {\"MOCK_SERVER_PORT\": str(common.MOCK_SERVER_PORT)}\n\n    with docker_run(compose_file, env_vars=env_vars):\n        yield\n\n\n@pytest.fixture(scope='session')\ndef mock_instance():\n    # type: () -> Instance\n    return {\n        'edge_hub_prometheus_url': common.MOCK_EDGE_HUB_PROMETHEUS_URL,\n        'edge_agent_prometheus_url': common.MOCK_EDGE_AGENT_PROMETHEUS_URL,\n        'tags': common.CUSTOM_TAGS,\n    }\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_base/tests/models/config_models/shared.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\n# This file is autogenerated.\n# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:\n#     ddev -x validate config -s <INTEGRATION_NAME>\n#     ddev -x validate models -s <INTEGRATION_NAME>\n\nfrom __future__ import annotations\n\nfrom typing import Optional\n\nfrom pydantic import BaseModel, root_validator, validator\n\nfrom datadog_checks.base.utils.functions import identity\nfrom datadog_checks.base.utils.models import validation\n\nfrom . import defaults, deprecations, validators\n\n\nclass SharedConfig(BaseModel):\n    class Config:\n        allow_mutation = False\n\n    deprecated: Optional[str]\n    timeout: Optional[float]\n\n    @root_validator(pre=True)\n    def _handle_deprecations(cls, values):\n        validation.utils.handle_deprecations('init_config', deprecations.shared(), values)\n        return values\n\n    @root_validator(pre=True)\n    def _initial_validation(cls, values):\n        return validation.core.initialize_config(getattr(validators, 'initialize_shared', identity)(values))\n\n    @validator('*', pre=True, always=True)\n    def _ensure_defaults(cls, v, field):\n        if v is not None or field.required:\n            return v\n\n        return getattr(defaults, f'shared_{field.name}')(field, v)\n\n    @validator('*')\n    def _run_validations(cls, v, field):\n        if not v:\n            return v\n\n        return getattr(validators, f'shared_{field.name}', identity)(v, field=field)\n\n    @root_validator(pre=False)\n    def _final_validation(cls, values):\n        return validation.core.finalize_config(getattr(validators, 'finalize_shared', identity)(values))\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncilium/datadog_checks/cilium/config_models/__init__.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\n# This file is autogenerated.\n# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:\n#     ddev -x validate config -s <INTEGRATION_NAME>\n#     ddev -x validate models -s <INTEGRATION_NAME>\n\nfrom .instance import InstanceConfig\nfrom .shared import SharedConfig\n\n\nclass ConfigMixin:\n    _config_model_instance: InstanceConfig\n    _config_model_shared: SharedConfig\n\n    @property\n    def config(self) -> InstanceConfig:\n        return self._config_model_instance\n\n    @property\n    def shared_config(self) -> SharedConfig:\n        return self._config_model_shared\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_base/tests/models/config_models/shared.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\n# This file is autogenerated.\n# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:\n#     ddev -x validate config -s <INTEGRATION_NAME>\n#     ddev -x validate models -s <INTEGRATION_NAME>\n\nfrom __future__ import annotations\n\nfrom typing import Optional\n\nfrom pydantic import BaseModel, root_validator, validator\n\nfrom datadog_checks.base.utils.functions import identity\nfrom datadog_checks.base.utils.models import validation\n\nfrom . import defaults, deprecations, validators\n\n\nclass SharedConfig(BaseModel):\n    class Config:\n        allow_mutation = False\n\n    deprecated: Optional[str]\n    timeout: Optional[float]\n\n    @root_validator(pre=True)\n    def _handle_deprecations(cls, values):\n        validation.utils.handle_deprecations('init_config', deprecations.shared(), values)\n        return values\n\n    @root_validator(pre=True)\n    def _initial_validation(cls, values):\n        return validation.core.initialize_config(getattr(validators, 'initialize_shared', identity)(values))\n\n    @validator('*', pre=True, always=True)\n    def _ensure_defaults(cls, v, field):\n        if v is not None or field.required:\n            return v\n\n        return getattr(defaults, f'shared_{field.name}')(field, v)\n\n    @validator('*')\n    def _run_validations(cls, v, field):\n        if not v:\n            return v\n\n        return getattr(validators, f'shared_{field.name}', identity)(v, field=field)\n\n    @root_validator(pre=False)\n    def _final_validation(cls, values):\n        return validation.core.finalize_config(getattr(validators, 'finalize_shared', identity)(values))\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\nConsul NodeName (NodeId) in Service Checks\n**Note:** If you have a feature request, you should [contact support](https://docs.datadoghq.com/help/) so the request can be properly tracked.\r\n\r\n**Output of the [info page](https://docs.datadoghq.com/agent/guide/agent-commands/#agent-status-and-information)**\r\n\r\n```text\r\nGetting the status from the agent.\r\n\r\n===============\r\nAgent (v7.37.1)\r\n===============\r\n\r\n  Status date: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n  Agent start: 2022-07-22 18:34:00.519 UTC (1658514840519)\r\n  Pid: 18465\r\n  Go Version: go1.17.11\r\n  Python Version: 3.8.11\r\n  Build arch: amd64\r\n  Agent flavor: agent\r\n  Check Runners: 4\r\n  Log Level: info\r\n\r\n  Paths\r\n  =====\r\n    Config File: /etc/datadog-agent/datadog.yaml\r\n    conf.d: /etc/datadog-agent/conf.d\r\n    checks.d: /etc/datadog-agent/checks.d\r\n\r\n  Clocks\r\n  ======\r\n    NTP offset: 385\u00b5s\r\n    System time: 2022-07-27 15:16:34.997 UTC (1658934994997)\r\n\r\n  Host Info\r\n  =========\r\n    bootTime: 2021-09-23 20:11:50 UTC (1632427910000)\r\n    hostId: <redacted>\r\n    kernelArch: x86_64\r\n    kernelVersion: 4.9.0-16-amd64\r\n    os: linux\r\n    platform: debian\r\n    platformFamily: debian\r\n    platformVersion: 9.13\r\n    procs: 121\r\n    uptime: 7246h22m12s\r\n\r\n  Hostnames\r\n  =========\r\n  <redacted>\r\n\r\n  Metadata\r\n  ========\r\n    agent_version: 7.37.1\r\n    cloud_provider: AWS\r\n    config_apm_dd_url: \r\n    config_dd_url: https://app.datadoghq.com\r\n    config_logs_dd_url: \r\n    config_logs_socks5_proxy_address: \r\n    config_no_proxy: []\r\n    config_process_dd_url: \r\n    config_proxy_http: \r\n    config_proxy_https: \r\n    config_site: \r\n    feature_apm_enabled: true\r\n    feature_cspm_enabled: false\r\n    feature_cws_enabled: false\r\n    feature_logs_enabled: false\r\n    feature_networks_enabled: false\r\n    feature_networks_http_enabled: false\r\n    feature_networks_https_enabled: false\r\n    feature_otlp_enabled: false\r\n    feature_process_enabled: false\r\n    feature_processes_container_enabled: true\r\n    flavor: agent\r\n    hostname_source: os\r\n    install_method_installer_version: deb_package\r\n    install_method_tool: dpkg\r\n    install_method_tool_version: dpkg-1.18.26\r\n\r\n=========\r\nCollector\r\n=========\r\n\r\n  Running Checks\r\n  ==============\r\n    \r\n    consul (2.1.0)\r\n    --------------\r\n      Instance ID: consul:default:b77b05cc5a5351d9 [OK]\r\n      Configuration Source: file:/etc/datadog-agent/conf.d/consul.d/conf.yaml\r\n      Total Runs: 28,011\r\n      Metric Samples: Last Run: 1, Total: 28,011\r\n      Events: Last Run: 0, Total: 0\r\n      Service Checks: Last Run: 2, Total: 57,359\r\n      Average Execution Time : 4ms\r\n      Last Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      Last Successful Execution Date : 2022-07-27 15:16:32 UTC (1658934992000)\r\n      metadata:\r\n        version.major: 1\r\n        version.minor: 8\r\n        version.patch: 4\r\n        version.raw: 1.8.4\r\n        version.scheme: semver\r\n      \r\n  <redacted>\r\n      \r\n=========\r\nForwarder\r\n=========\r\n\r\n  Transactions\r\n  ============\r\n    Cluster: 0\r\n    ClusterRole: 0\r\n    ClusterRoleBinding: 0\r\n    CronJob: 0\r\n    DaemonSet: 0\r\n    Deployment: 0\r\n    Dropped: 0\r\n    HighPriorityQueueFull: 0\r\n    Ingress: 0\r\n    Job: 0\r\n    Node: 0\r\n    PersistentVolume: 0\r\n    PersistentVolumeClaim: 0\r\n    Pod: 0\r\n    ReplicaSet: 0\r\n    Requeued: 0\r\n    Retried: 0\r\n    RetryQueueSize: 0\r\n    Role: 0\r\n    RoleBinding: 0\r\n    Service: 0\r\n    ServiceAccount: 0\r\n    StatefulSet: 0\r\n\r\n  Transaction Successes\r\n  =====================\r\n    Total number: 59055\r\n    Successes By Endpoint:\r\n      check_run_v1: 28,010\r\n      intake: 2,335\r\n      metadata_v1: 700\r\n      series_v1: 28,010\r\n\r\n  On-disk storage\r\n  ===============\r\n    On-disk storage is disabled. Configure `forwarder_storage_max_size_in_bytes` to enable it.\r\n\r\n  API Keys status\r\n  ===============\r\n    API key ending with 91d2c: API Key valid\r\n\r\n==========\r\nEndpoints\r\n==========\r\n  https://app.datadoghq.com - API Key ending with:\r\n      - 91d2c\r\n\r\n==========\r\nLogs Agent\r\n==========\r\n\r\n\r\n  Logs Agent is not running\r\n\r\n=============\r\nProcess Agent\r\n=============\r\n\r\n  Version: 7.37.1\r\n  Status date: 2022-07-27 15:16:44.135 UTC (1658935004135)\r\n  Process Agent Start: 2022-07-22 18:34:00.573 UTC (1658514840573)\r\n  Pid: 18466\r\n  Go Version: go1.17.11\r\n  Build arch: amd64\r\n  Log Level: info\r\n  Enabled Checks: [process_discovery]\r\n  Allocated Memory: 13,024,816 bytes\r\n  Hostname: <redacted> # consul-server-host (leader)\r\n\r\n  =================\r\n  Process Endpoints\r\n  =================\r\n    https://process.datadoghq.com - API Key ending with:\r\n        - 91d2c\r\n\r\n  =========\r\n  Collector\r\n  =========\r\n    Last collection time: 2022-07-27 14:34:01\r\n    Docker socket: \r\n    Number of processes: 0\r\n    Number of containers: 0\r\n    Process Queue length: 0\r\n    RTProcess Queue length: 0\r\n    Pod Queue length: 0\r\n    Process Bytes enqueued: 0\r\n    RTProcess Bytes enqueued: 0\r\n    Pod Bytes enqueued: 0\r\n    Drop Check Payloads: []\r\n=========\r\nAPM Agent\r\n=========\r\n  <redacted>\r\n\r\n=========\r\nAggregator\r\n=========\r\n  Checks Metric Sample: 6,678,903\r\n  Dogstatsd Metric Sample: 4,565,629\r\n  Event: 1\r\n  Events Flushed: 1\r\n  Number Of Flushes: 28,010\r\n  Series Flushed: 8,834,639\r\n  Service Check: 310,384\r\n  Service Checks Flushed: 338,390\r\n=========\r\nDogStatsD\r\n=========\r\n  Event Packets: 0\r\n  Event Parse Errors: 0\r\n  Metric Packets: 4,565,628\r\n  Metric Parse Errors: 0\r\n  Service Check Packets: 0\r\n  Service Check Parse Errors: 0\r\n  Udp Bytes: 406,735,605\r\n  Udp Packet Reading Errors: 0\r\n  Udp Packets: 2,650,131\r\n  Uds Bytes: 0\r\n  Uds Origin Detection Errors: 0\r\n  Uds Packet Reading Errors: 0\r\n  Uds Packets: 0\r\n  Unterminated Metric Errors: 0\r\n\r\n====\r\nOTLP\r\n====\r\n  \r\n  Status: Not enabled\r\n  Collector status: Not running\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\n\r\n**Steps to reproduce the issue:**\r\n1. Install the `consul.d` check/integration\r\n2. ????\r\n3. Non-profit\r\n\r\n**Describe the results you received:**\r\n\r\nThe output of the Consul Service Checks for Consul Service Healthchecks does _not_ include a `node`, `node_name`, nor `node_id` tag or information on the Datadog Service Checks.\r\n\r\n**Describe the results you expected:**\r\n\r\nA tag or information should exist for `node`, `node_name`, or `node_id` on the Datadog Service Check (since the information is available and retrieved from the Consul API).\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\r\n\r\nThe problem is as follows: Consul Service Checks have information such as Ok, Warning, Critical for the Service, Check (id), and Node (which host the check is failing for). However, the Datadog Consul integration does not seem to gather that Node Name/Id bit of information. So, when a Datadog Consul Service Check is in the Critical state (like `consul.check`) the information provided only gives details about the Consul Service and Check Name/Id... which is not particularly useful because what happens when you have a Consul Service with 50 Nodes? Which Node has the check failing?\r\n\r\nThe tag should be added here: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L367-L375\r\n\r\nSpecifically on/after line 373:\r\n```python\r\nif check[\"Node\"]:\r\n    tags.append(\"consul_node:{}\".format(check[\"Node\"]))\r\nsc[sc_id] = {'status': status, 'tags': tags}\r\n```\r\n\r\nThe data is available and returned in the Consul API endpoint `/v1/health/state/any` on line 356: https://github.com/DataDog/integrations-core/blob/f8c50c779dc836e9419326a5d2d64524f3216821/consul/datadog_checks/consul/consul.py#L356\r\n\r\nSee: https://www.consul.io/api-docs/health#sample-response-3\r\n\r\nExample Response:\r\n```json\r\n\r\n[\r\n  {\r\n    \"Node\": \"foobar\",\r\n    \"CheckID\": \"serfHealth\",\r\n    \"Name\": \"Serf Health Status\",\r\n    \"Status\": \"passing\",\r\n    \"Notes\": \"\",\r\n    \"Output\": \"\",\r\n    \"ServiceID\": \"\",\r\n    \"ServiceName\": \"\",\r\n    \"ServiceTags\": [],\r\n    \"Namespace\": \"default\"\r\n  },\r\n  [...]\r\n]\r\n```\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_dev/datadog_checks/dev/tooling/templates/integration/tile/{check_name}/metadata.csv\n## context:\nmetric_name,metric_type,interval,unit_name,per_unit_name,description,orientation,integration,short_name,curated_metric\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndatadog_checks_base/tests/models/config_models/shared.py\n## context:\n# (C) Datadog, Inc. 2021-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\n# This file is autogenerated.\n# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:\n#     ddev -x validate config -s <INTEGRATION_NAME>\n#     ddev -x validate models -s <INTEGRATION_NAME>\n\nfrom __future__ import annotations\n\nfrom typing import Optional\n\nfrom pydantic import BaseModel, root_validator, validator\n\nfrom datadog_checks.base.utils.functions import identity\nfrom datadog_checks.base.utils.models import validation\n\nfrom . import defaults, deprecations, validators\n\n\nclass SharedConfig(BaseModel):\n    class Config:\n        allow_mutation = False\n\n    deprecated: Optional[str]\n    timeout: Optional[float]\n\n    @root_validator(pre=True)\n    def _handle_deprecations(cls, values):\n        validation.utils.handle_deprecations('init_config', deprecations.shared(), values)\n        return values\n\n    @root_validator(pre=True)\n    def _initial_validation(cls, values):\n        return validation.core.initialize_config(getattr(validators, 'initialize_shared', identity)(values))\n\n    @validator('*', pre=True, always=True)\n    def _ensure_defaults(cls, v, field):\n        if v is not None or field.required:\n            return v\n\n        return getattr(defaults, f'shared_{field.name}')(field, v)\n\n    @validator('*')\n    def _run_validations(cls, v, field):\n        if not v:\n            return v\n\n        return getattr(validators, f'shared_{field.name}', identity)(v, field=field)\n\n    @root_validator(pre=False)\n    def _final_validation(cls, values):\n        return validation.core.finalize_config(getattr(validators, 'finalize_shared', identity)(values))\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[Active Directory] Entry point is using datadog_checks.ntp console script\nIn the Active Directory integration's `setup.py` the entrypoint (for running without an agent) uses the datadog_checks.ntp console script.\r\n\r\n```\r\n    # The entrypoint to run the check manually without an agent\r\n    entry_points={\r\n        'console_scripts': [\r\n            'ntp=datadog_checks.ntp:main',\r\n        ],\r\n    },\r\n```\r\nSee: https://github.com/DataDog/integrations-core/blob/master/active_directory/setup.py#L124\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\npostgres/tests/common.py\n## context:\n# (C) Datadog, Inc. 2010-2018\n# All rights reserved\n# Licensed under Simplified BSD License (see LICENSE)\nimport os\n\nHOST = os.getenv('DOCKER_HOSTNAME', 'localhost')\nPORT = '5432'\nUSER = 'datadog'\nPASSWORD = 'datadog'\nDB_NAME = 'datadog_test'\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\npdh_check/manifest.json\n## context:\n{\n  \"maintainer\": \"help@datadoghq.com\",\n  \"manifest_version\": \"0.1.1\",\n  \"max_agent_version\": \"6.0.0\",\n  \"min_agent_version\": \"5.21.0\",\n  \"name\": \"pdh_check\",\n  \"short_description\": \"Collect and graph any Windows PDH metrics.\",\n  \"support\": \"core\",\n  \"supported_os\": [\n    \"windows\"\n  ],\n  \"version\": \"1.1.0\",\n  \"guid\": \"D09B3410-00A0-4789-ABD7-7740C3FE211F\",\n  \"public_title\": \"Datadog-Pdh Check Integration\",\n  \"categories\":[\"os & system\"],\n  \"type\":\"check\",\n  \"doc_link\": \"https://docs.datadoghq.com/integrations/pdh_check/\",\n  \"is_public\": true,\n  \"has_logo\": true\n}\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[Active Directory] Entry point is using datadog_checks.ntp console script\nIn the Active Directory integration's `setup.py` the entrypoint (for running without an agent) uses the datadog_checks.ntp console script.\r\n\r\n```\r\n    # The entrypoint to run the check manually without an agent\r\n    entry_points={\r\n        'console_scripts': [\r\n            'ntp=datadog_checks.ntp:main',\r\n        ],\r\n    },\r\n```\r\nSee: https://github.com/DataDog/integrations-core/blob/master/active_directory/setup.py#L124\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nprocess/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"process\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-process',\n    version=version,\n    description='The Process check',\n    long_description=long_description,\n    keywords='datadog agent process check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.process'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.process': ['conf.yaml.example']},\n    include_package_data=True,\n)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmongo/CHANGELOG.md\n## context:\n# CHANGELOG - mongo\n\n1.5.2 / 2018-02-13\n==================\n### Changes\n\n* [DOC] Adding configuration for log collection in `conf.yaml`\n* [BUGFIX] Pass replica set metric collection if `replSetGetStatus` command not available. See [#1092][]\n\n1.5.1 / 2018-01-10\n==================\n### Changes\n\n* [BUGFIX] Pass replica set metric collection if not running standalone instance instead of raising exception. See [#915][]\n\n1.5.0 / 2017-11-21\n==================\n### Changes\n\n* [FEATURE] Collect metrics about indexes usage. See [#823][]\n* [IMPROVEMENT] Upgrading pymongo to version 3.5. See [#747][]\n* [IMPROVEMENT] Filter out oplog entries without a timestamp. See [#406][], thanks [@hindmanj][]\n\n\n1.4.0 / 2017-10-10\n==================\n### Changes\n\n* [IMPROVEMENT] Started monitoring the wiredTiger cache page read/write statistics. See [#769][] (Thanks [@dnavre][])\n\n1.3.0 / 2017-08-28\n==================\n### Changes\n\n* [FEATURE] Add support for `authSource` parameter in mongo URL. See [#691][]\n* [IMPROVEMENT] Simplify \"system.namespaces\" usage. See [#625][], thanks [@dtbartle][]\n* [BUGFIX] Don't overwrite the higher-level `cli`/`db` for replset stats. See [#627][], thanks [@dtbartle][]\n\n1.2.0 / 2017-07-18\n==================\n### Changes\n\n* [IMPROVEMENT] Add support for `mongo.oplog.*` metrics for Mongo versions  3.x. See [#491][]\n\n1.1.0 / 2017-06-05\n==================\n### Changes\n\n* [IMPROVEMENT] Set connectTimeout & serverSelectionTimeout to timeout in config. See [#352][]\n\n1.0.1 / 2017-04-24\n==================\n### Changes\n\n* [BUGFIX] Redact username/password in logs, etc. See [#326][] and [#347][]\n\n1.0.0 / 2017-03-22\n==================\n\n### Changes\n\n* [FEATURE] adds mongo integration.\n\n<!--- The following link definition list is generated by PimpMyChangelog --->\n[#326]: https://github.com/DataDog/integrations-core/issues/326\n[#347]: https://github.com/DataDog/integrations-core/issues/347\n[#352]: https://github.com/DataDog/integrations-core/issues/352\n[#406]: https://github.com/DataDog/integrations-core/issues/406\n[#491]: https://github.com/DataDog/integrations-core/issues/491\n[#625]: https://github.com/DataDog/integrations-core/issues/625\n[#627]: https://github.com/DataDog/integrations-core/issues/627\n[#691]: https://github.com/DataDog/integrations-core/issues/691\n[#747]: https://github.com/DataDog/integrations-core/issues/747\n[#769]: https://github.com/DataDog/integrations-core/issues/769\n[#823]: https://github.com/DataDog/integrations-core/issues/823\n[#915]: https://github.com/DataDog/integrations-core/issues/915\n[#1092]: https://github.com/DataDog/integrations-core/issues/1092\n[@dnavre]: https://github.com/dnavre\n[@dtbartle]: https://github.com/dtbartle\n[@hindmanj]: https://github.com/hindmanj\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[Active Directory] Entry point is using datadog_checks.ntp console script\nIn the Active Directory integration's `setup.py` the entrypoint (for running without an agent) uses the datadog_checks.ntp console script.\r\n\r\n```\r\n    # The entrypoint to run the check manually without an agent\r\n    entry_points={\r\n        'console_scripts': [\r\n            'ntp=datadog_checks.ntp:main',\r\n        ],\r\n    },\r\n```\r\nSee: https://github.com/DataDog/integrations-core/blob/master/active_directory/setup.py#L124\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nprocess/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"process\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-process',\n    version=version,\n    description='The Process check',\n    long_description=long_description,\n    keywords='datadog agent process check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.process'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.process': ['conf.yaml.example']},\n    include_package_data=True,\n)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmesos_master/metadata.csv\n## context:\nmetric_name,metric_type,interval,unit_name,per_unit_name,description,orientation,integration,short_name\nmesos.framework.cpu,gauge,,,,Framework cpu,0,mesos,framework cpu\nmesos.framework.mem,gauge,,mebibyte,,Framework mem,0,mesos,framework mem\nmesos.framework.disk,gauge,,mebibyte,,Framework disk,0,mesos,framework disk\nmesos.role.cpu,gauge,,,,Role cpu,0,mesos,role cpu\nmesos.role.mem,gauge,,mebibyte,,Role mem,0,mesos,role mem\nmesos.role.disk,gauge,,mebibyte,,Role disk,0,mesos,role disk\nmesos.cluster.tasks_error,gauge,,task,,Number of tasks that were invalid,-1,mesos,task errors\nmesos.cluster.tasks_failed,count,,task,,Number of failed tasks,-1,mesos,failed tasks\nmesos.cluster.tasks_finished,count,,task,,Number of finished tasks,0,mesos,finished tasks\nmesos.cluster.tasks_killed,count,,task,,Number of killed tasks,-1,mesos,tasks killed\nmesos.cluster.tasks_lost,count,,task,,Number of lost tasks,-1,mesos,tasks lost\nmesos.cluster.tasks_running,gauge,,task,,Number of running tasks,0,mesos,running tasks\nmesos.cluster.tasks_staging,gauge,,task,,Number of staging tasks,0,mesos,staging tasks\nmesos.cluster.tasks_starting,gauge,,task,,Number of starting tasks,0,mesos,starting tasks\nmesos.cluster.slave_registrations,gauge,,,,Number of slaves that were able to cleanly re-join the cluster and connect back to the master after the master is disconnected.,0,mesos,slave registrations\nmesos.cluster.slave_removals,gauge,,,,\"Number of slaves removed for various reasons, including maintenance\",0,mesos,slave removals\nmesos.cluster.slave_reregistrations,gauge,,,,Number of slave re-registrations,0,mesos,slave reregistrations\nmesos.cluster.slave_shutdowns_canceled,gauge,,,,Number of cancelled slave shutdowns,-1,mesos,slave shutdowns canceled\nmesos.cluster.slave_shutdowns_scheduled,gauge,,,,Number of slaves which have failed their health check and are scheduled to be removed,0,mesos,slave shutdowns scheduled\nmesos.cluster.slaves_active,gauge,,,,Number of active slaves,0,mesos,active slaves\nmesos.cluster.slaves_connected,gauge,,,,Number of connected slaves,0,mesos,connected slaves\nmesos.cluster.slaves_disconnected,gauge,,,,Number of disconnected slaves,0,mesos,disconnected slaves\nmesos.cluster.slaves_inactive,gauge,,,,Number of inactive slaves,0,mesos,inactive slaves\nmesos.cluster.cpus_percent,gauge,,percent,,Percentage of allocated CPUs,0,mesos,cpus percent\nmesos.cluster.cpus_used,gauge,,,,Number of allocated CPUs,0,mesos,cpus used\nmesos.cluster.cpus_total,gauge,,,,Number of CPUs,1,mesos,cpus total\nmesos.cluster.gpus_percent,gauge,,percent,,Percentage of allocated GPUs,0,mesos,gpus percent\nmesos.cluster.gpus_used,gauge,,,,Number of allocated GPUs,0,mesos,gpus used\nmesos.cluster.gpus_total,gauge,,,,Number of GPUs,1,mesos,gpus total\nmesos.cluster.disk_percent,gauge,,percent,,Percentage of allocated disk space,-1,mesos,disk percent\nmesos.cluster.disk_used,gauge,,mebibyte,,Allocated disk space,-1,mesos,disk used\nmesos.cluster.disk_total,gauge,,mebibyte,,Disk space,1,mesos,disk total\nmesos.cluster.mem_percent,gauge,,percent,,Percentage of allocated memory,-1,mesos,mem percent\nmesos.cluster.mem_used,gauge,,mebibyte,,Allocated memory,-1,mesos,mem used\nmesos.cluster.mem_total,gauge,,mebibyte,,Total memory,1,mesos,mem total\nmesos.registrar.queued_operations,gauge,,,,Number of queued operations,0,mesos,queued operations\nmesos.registrar.registry_size_bytes,gauge,,byte,,Registry size,0,mesos,registry size\nmesos.registrar.state_fetch_ms,gauge,,millisecond,,Registry read latency,-1,mesos,read latency\nmesos.registrar.state_store_ms,gauge,,millisecond,,Registry write latency,-1,mesos,write latency\nmesos.registrar.state_store_ms.count,gauge,,,,Registry write count,0,mesos,write count\nmesos.registrar.state_store_ms.max,gauge,,millisecond,,Maximum registry write latency,-1,mesos,latency max\nmesos.registrar.state_store_ms.min,gauge,,millisecond,,Minimum registry write latency,-1,mesos,latency min\nmesos.registrar.state_store_ms.p50,gauge,,millisecond,,Median registry write latency,-1,mesos,latency p50\nmesos.registrar.state_store_ms.p90,gauge,,millisecond,,90th percentile registry write latency,-1,mesos,latency p90\nmesos.registrar.state_store_ms.p95,gauge,,millisecond,,95th percentile registry write latency,-1,mesos,latency p95\nmesos.registrar.state_store_ms.p99,gauge,,millisecond,,99th percentile registry write latency,-1,mesos,latency p99\nmesos.registrar.state_store_ms.p999,gauge,,millisecond,,99.9th percentile registry write latency,-1,mesos,latency p999\nmesos.registrar.state_store_ms.p9999,gauge,,millisecond,,99.99th percentile registry write latency,-1,mesos,latency p9999\nmesos.registrar.log.recovered,gauge,,,,Registrar log recovered,1,mesos,registrar log recovered\nmesos.cluster.frameworks_active,gauge,,,,Number of active frameworks,0,mesos,active frameworks\nmesos.cluster.frameworks_connected,gauge,,,,Number of connected frameworks,0,mesos,connected frameworks\nmesos.cluster.frameworks_disconnected,gauge,,,,Number of disconnected frameworks,0,mesos,disconnected frameworks\nmesos.cluster.frameworks_inactive,gauge,,,,Number of inactive frameworks,0,mesos,inactive frameworks\nmesos.stats.system.cpus_total,gauge,,,,Number of CPUs available,1,mesos,cpus total\nmesos.stats.system.load_15min,gauge,,,,Load average for the past 15 minutes,-1,mesos,load 15\nmesos.stats.system.load_1min,gauge,,,,Load average for the past minutes,-1,mesos,load 1\nmesos.stats.system.load_5min,gauge,,,,Load average for the past 5 minutes,-1,mesos,load 5\nmesos.stats.system.mem_free_bytes,gauge,,byte,,Free memory,1,mesos,mem free\nmesos.stats.system.mem_total_bytes,gauge,,byte,,Total memory,1,mesos,mem total\nmesos.stats.elected,gauge,,,,Whether this is the elected master,0,mesos,elected master\nmesos.stats.uptime_secs,gauge,,second,,Uptime,1,mesos,uptime\nmesos.cluster.dropped_messages,gauge,,message,,Number of dropped messages,-1,mesos,dropped msgs\nmesos.cluster.outstanding_offers,gauge,,,,Number of outstanding resource offers,0,mesos,outstanding msgs\nmesos.cluster.event_queue_dispatches,gauge,,,,Number of dispatches in the event queue,0,mesos,event queue dispatches\nmesos.cluster.event_queue_http_requests,gauge,,request,,Number of HTTP requests in the event queue,0,mesos,event queue http requests\nmesos.cluster.event_queue_messages,gauge,,message,,Number of messages in the event queue,0,mesos,event queue msgs\nmesos.cluster.invalid_framework_to_executor_messages,gauge,,message,,Number of invalid framework messages,-1,mesos,invalid framework msgs\nmesos.cluster.invalid_status_update_acknowledgements,gauge,,,,Number of invalid status update acknowledgements,-1,mesos,invalid status update acknowledgements\nmesos.cluster.invalid_status_updates,gauge,,,,Number of invalid status updates,-1,mesos,status updates\nmesos.cluster.valid_framework_to_executor_messages,gauge,,message,,Number of valid framework messages,0,mesos,valid framework msgs\nmesos.cluster.valid_status_update_acknowledgements,gauge,,,,Number of valid status update acknowledgements,0,mesos,valid status update acknowledgements\nmesos.cluster.valid_status_updates,gauge,,,,Number of valid status updates,0,mesos,valid status updates\nmesos.stats.registered,gauge,,,,Whether this slave is registered with a master,0,mesos,slave registered\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[Active Directory] Entry point is using datadog_checks.ntp console script\nIn the Active Directory integration's `setup.py` the entrypoint (for running without an agent) uses the datadog_checks.ntp console script.\r\n\r\n```\r\n    # The entrypoint to run the check manually without an agent\r\n    entry_points={\r\n        'console_scripts': [\r\n            'ntp=datadog_checks.ntp:main',\r\n        ],\r\n    },\r\n```\r\nSee: https://github.com/DataDog/integrations-core/blob/master/active_directory/setup.py#L124\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\naspdotnet/requirements.txt\n## context:\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile --generate-hashes --output-file requirements.txt requirements.in\n#\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmcache/service_checks.json\n## context:\n[\n    {\n        \"agent_version\": \"5.1.0\",\n        \"integration\":\"memcached\",\n        \"check\": \"memcache.can_connect\",\n        \"statuses\": [\"ok\", \"critical\"],\n        \"groups\": [\"host\", \"port\"],\n        \"name\": \"Can Connect\",\n        \"description\": \"Returns `CRITICAL` if the Agent is unable to connect to the monitored Memcached instance. Returns `OK` otherwise.\"\n    }\n]\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[Active Directory] Entry point is using datadog_checks.ntp console script\nIn the Active Directory integration's `setup.py` the entrypoint (for running without an agent) uses the datadog_checks.ntp console script.\r\n\r\n```\r\n    # The entrypoint to run the check manually without an agent\r\n    entry_points={\r\n        'console_scripts': [\r\n            'ntp=datadog_checks.ntp:main',\r\n        ],\r\n    },\r\n```\r\nSee: https://github.com/DataDog/integrations-core/blob/master/active_directory/setup.py#L124\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\napache/MANIFEST.in\n## context:\ninclude README.md\ninclude requirements.in\ninclude requirements.txt\ninclude requirements-dev.txt\ninclude manifest.json\ngraft datadog_checks\ngraft tests\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\naspdotnet/requirements.txt\n## context:\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile --generate-hashes --output-file requirements.txt requirements.in\n#\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[Active Directory] Entry point is using datadog_checks.ntp console script\nIn the Active Directory integration's `setup.py` the entrypoint (for running without an agent) uses the datadog_checks.ntp console script.\r\n\r\n```\r\n    # The entrypoint to run the check manually without an agent\r\n    entry_points={\r\n        'console_scripts': [\r\n            'ntp=datadog_checks.ntp:main',\r\n        ],\r\n    },\r\n```\r\nSee: https://github.com/DataDog/integrations-core/blob/master/active_directory/setup.py#L124\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nprocess/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"process\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-process',\n    version=version,\n    description='The Process check',\n    long_description=long_description,\n    keywords='datadog agent process check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.process'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.process': ['conf.yaml.example']},\n    include_package_data=True,\n)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\npostgres/tests/common.py\n## context:\n# (C) Datadog, Inc. 2010-2018\n# All rights reserved\n# Licensed under Simplified BSD License (see LICENSE)\nimport os\n\nHOST = os.getenv('DOCKER_HOSTNAME', 'localhost')\nPORT = '5432'\nUSER = 'datadog'\nPASSWORD = 'datadog'\nDB_NAME = 'datadog_test'\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[Active Directory] Entry point is using datadog_checks.ntp console script\nIn the Active Directory integration's `setup.py` the entrypoint (for running without an agent) uses the datadog_checks.ntp console script.\r\n\r\n```\r\n    # The entrypoint to run the check manually without an agent\r\n    entry_points={\r\n        'console_scripts': [\r\n            'ntp=datadog_checks.ntp:main',\r\n        ],\r\n    },\r\n```\r\nSee: https://github.com/DataDog/integrations-core/blob/master/active_directory/setup.py#L124\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nprocess/setup.py\n## context:\n# Always prefer setuptools over distutils\nfrom setuptools import setup\n# To use a consistent encoding\nfrom codecs import open\nfrom os import path\n\nimport json\nimport re\n\nhere = path.abspath(path.dirname(__file__))\n\ndef parse_req_line(line):\n    line = line.strip()\n    if not line or line.startswith('--hash') or line[0] == '#':\n        return None\n    req = line.rpartition('#')\n    if len(req[1]) == 0:\n        line = req[2].strip()\n    else:\n        line = req[1].strip()\n\n    if '--hash=' in line:\n        line = line[:line.find('--hash=')].strip()\n    if ';' in line:\n        line = line[:line.find(';')].strip()\n    if '\\\\' in line:\n        line = line[:line.find('\\\\')].strip()\n\n    return line\n\n# Get the long description from the README file\nwith open(path.join(here, 'README.md'), encoding='utf-8') as f:\n    long_description = f.read()\n\n# Parse requirements\nruntime_reqs = ['datadog-checks-base']\nwith open(path.join(here, 'requirements.txt'), encoding='utf-8') as f:\n    for line in f.readlines():\n        req = parse_req_line(line)\n        if req:\n            runtime_reqs.append(req)\n\ndef read(*parts):\n    with open(path.join(here, *parts), 'r') as fp:\n        return fp.read()\n\ndef find_version(*file_paths):\n    version_file = read(*file_paths)\n    version_match = re.search(r\"^__version__ = ['\\\"]([^'\\\"]*)['\\\"]\",\n                              version_file, re.M)\n    if version_match:\n        return version_match.group(1)\n    raise RuntimeError(\"Unable to find version string.\")\n\n# https://packaging.python.org/guides/single-sourcing-package-version/\nversion = find_version(\"datadog_checks\", \"process\", \"__init__.py\")\n\nmanifest_version = None\nwith open(path.join(here, 'manifest.json'), encoding='utf-8') as f:\n    manifest = json.load(f)\n    manifest_version = manifest.get('version')\n\nif version != manifest_version:\n    raise Exception(\"Inconsistent versioning in module and manifest - aborting wheel build\")\n\nsetup(\n    name='datadog-process',\n    version=version,\n    description='The Process check',\n    long_description=long_description,\n    keywords='datadog agent process check',\n\n    # The project's main homepage.\n    url='https://github.com/DataDog/integrations-core',\n\n    # Author details\n    author='Datadog',\n    author_email='packages@datadoghq.com',\n\n    # License\n    license='MIT',\n\n    # See https://pypi.python.org/pypi?%3Aaction=list_classifiers\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Intended Audience :: Developers',\n        'Intended Audience :: System Administrators',\n        'Topic :: System :: Monitoring',\n        'License :: OSI Approved :: MIT License',\n        'Programming Language :: Python :: 2',\n        'Programming Language :: Python :: 2.7',\n    ],\n\n    # The package we're going to ship\n    packages=['datadog_checks.process'],\n\n    # Run-time dependencies\n    install_requires=list(set(runtime_reqs)),\n\n    # Development dependencies, run with:\n    # $ pip install -e .[dev]\n    extras_require={\n        'dev': [\n            'check-manifest',\n            'datadog_agent_tk>=5.15',\n        ],\n    },\n\n    # Testing setup and dependencies\n    tests_require=[\n        'nose',\n        'coverage',\n        'datadog_agent_tk>=5.15',\n    ],\n    test_suite='nose.collector',\n\n    # Extra files to ship with the wheel package\n    package_data={b'datadog_checks.process': ['conf.yaml.example']},\n    include_package_data=True,\n)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\naspdotnet/requirements.txt\n## context:\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile --generate-hashes --output-file requirements.txt requirements.in\n#\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nlinux_proc_extras/test/ci/fixtures/entropy_avail\n## context:\n895\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsquid/requirements.in\n## context:\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndns_check/datadog_checks/dns_check/__init__.py\n## context:\nfrom . import dns_check\n\nDNSCheck = dns_check.DNSCheck\n\n__version__ = \"1.1.0\"\n\n__all__ = ['dns_check']\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nhdfs_datanode/requirements.txt\n## context:\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile --generate-hashes --output-file requirements.txt requirements.in\n#\ncertifi==2018.1.18 \\\n    --hash=sha256:14131608ad2fd56836d33a71ee60fa1c82bc9d2c8d98b7bdbc631fe1b3cd1296 \\\n    --hash=sha256:edbc3f203427eef571f79a7692bb160a2b0f7ccaa31953e99bd17e307cf63f7d \\\n    # via requests\nchardet==3.0.4 \\\n    --hash=sha256:84ab92ed1c4d4f16916e05906b6b75a6c0fb5db821cc65e70cbd64a3e2a5eaae \\\n    --hash=sha256:fc323ffcaeaed0e0a02bf4d117757b98aed530d9ed4531e3e15460124c106691 \\\n    # via requests\nidna==2.6 \\\n    --hash=sha256:2c6a5de3089009e3da7c5dde64a141dbc8551d5b7f6cf4ed7c2568d0cc520a8f \\\n    --hash=sha256:8c7309c718f94b3a625cb648ace320157ad16ff131ae0af362c9f21b80ef6ec4 \\\n    # via requests\nrequests==2.18.4 \\\n    --hash=sha256:6a1b267aa90cac58ac3a765d067950e7dbbf75b1da07e895d1f594193a40a38b \\\n    --hash=sha256:9c443e7324ba5b85070c4a818ade28bfabedf16ea10206da1132edaa6dda237e\nsimplejson==3.6.5 \\\n    --hash=sha256:2a3189f79d1c7b8a2149a0e783c0b4217fad9b30a6e7d60450f2553dc2c0e57e\nurllib3==1.22 \\\n    --hash=sha256:06330f386d6e4b195fbfc736b297f58c5a892e4440e54d294d7004e3a9bbea1b \\\n    --hash=sha256:cc44da8e1145637334317feebd728bd869a35285b93cbb4cca2577da7e62db4f \\\n    # via requests\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nceph/requirements.txt\n## context:\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile --generate-hashes --output-file requirements.txt requirements.in\n#\nsimplejson==3.6.5 \\\n    --hash=sha256:2a3189f79d1c7b8a2149a0e783c0b4217fad9b30a6e7d60450f2553dc2c0e57e\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nwmi_check/test/ci/fixtures/win32_perfformatteddata_w3svc_webservice\n## context:\nServiceUptime 251\nTotalBytesSent 0\nTotalBytesReceived 0\nTotalBytesTransferred 0\nCurrentConnections 0\nTotalFilesSent 0\nTotalFilesReceived 0\nTotalConnectionAttemptsallinstances 0\nTotalGetRequests 0\nTotalPostRequests 0\nTotalHeadRequests 0\nTotalPutRequests 0\nTotalDeleteRequests 0\nTotalOptionsRequests 0\nTotalTraceRequests 0\nTotalNotFoundErrors 0\nTotalLockedErrors 0\nTotalAnonymousUsers 0\nTotalNonAnonymousUsers 0\nTotalCGIRequests 0\nTotalISAPIExtensionRequests 0\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nlinux_proc_extras/test/ci/fixtures/entropy_avail\n## context:\n895\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nceph/requirements.txt\n## context:\n#\n# This file is autogenerated by pip-compile\n# To update, run:\n#\n#    pip-compile --generate-hashes --output-file requirements.txt requirements.in\n#\nsimplejson==3.6.5 \\\n    --hash=sha256:2a3189f79d1c7b8a2149a0e783c0b4217fad9b30a6e7d60450f2553dc2c0e57e\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\naspdotnet/requirements-dev.txt\n## context:\nmock==2.0.0\npytest\npywin32"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nlinux_proc_extras/README.md\n## context:\n# Linux_proc_extras Integration\n\n## Overview\nGet metrics from linux_proc_extras service in real time to:\n\n* Visualize and monitor linux_proc_extras states\n* Be notified about linux_proc_extras failovers and events.\n\n## Setup\n### Installation\n\nThe Linux_proc_extras check is packaged with the Agent, so simply [install the Agent](https://app.datadoghq.com/account/settings#agent) on your servers.\n\n### Configuration\n\nEdit the `linux_proc_extras.yaml` file to point to your server and port, set the masters to monitor. See the [sample linux_proc_extras.yaml](https://github.com/DataDog/integrations-core/blob/master/linux_proc_extras/conf.yaml.example) for all available configuration options.\n\n### Validation\n\n[Run the Agent's `status` subcommand](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information) and look for `linux_proc_extras` under the Checks section:\n\n    Checks\n    ======\n\n        linux_proc_extras\n        -----------\n          - instance #0 [OK]\n          - Collected 39 metrics, 0 events & 7 service checks\n\n## Compatibility\n\nThe linux_proc_extras check is compatible with all major platforms\n\n## Data Collected\n### Metrics\nThe Linux proc extras check does not include any metric at this time.\n\n### Events\nThe Linux proc extras check does not include any event at this time.\n\n### Service Checks\nThe Linux proc extras check does not include any service check at this time.\n\n## Troubleshooting\n\nNeed help? Contact [Datadog Support](http://docs.datadoghq.com/help/).\n\n## Further Reading\nLearn more about infrastructure monitoring and all our integrations on [our blog](https://www.datadoghq.com/blog/)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndns_check/datadog_checks/dns_check/__init__.py\n## context:\nfrom . import dns_check\n\nDNSCheck = dns_check.DNSCheck\n\n__version__ = \"1.1.0\"\n\n__all__ = ['dns_check']\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\naspdotnet/requirements-dev.txt\n## context:\nmock==2.0.0\npytest\npywin32"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nlinux_proc_extras/test/ci/fixtures/entropy_avail\n## context:\n895\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\naspdotnet/requirements-dev.txt\n## context:\nmock==2.0.0\npytest\npywin32"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nenvoy/tests/test_metrics.py\n## context:\nfrom datadog_checks.envoy.metrics import METRIC_PREFIX, METRIC_TREE, METRICS\nfrom datadog_checks.envoy.utils import make_metric_tree\n\n\ndef test_metric_prefix():\n    assert METRIC_PREFIX == 'envoy.'\n\n\ndef test_metric_tree():\n    assert METRIC_TREE == make_metric_tree(METRICS)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ntwemproxy/test/ci/start-docker.sh\n## context:\n#!/bin/bash\n\n# A script to create the MySQL containers.\n\nfunction wait_for {\n    while netstat -lnt | awk \"\\$4 ~ /:$1\\$/ {exit 1}\"; do sleep 1; done\n    echo \"port $1 active!\"\n}\n\nset -e\n\nNAME='dd-ci-twemproxy'\nPORT=6100\nDOCKER_ADDR=$1\nCI_PATH=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nif docker ps | grep dd-ci-twemproxy >/dev/null; then\n  echo 'the containers already exist, we have to remove them'\n  bash $CI_PATH/stop-docker.sh\nfi\n\nREDIS_A_ID=$(docker run --name=dd-ci-twemproxy-redis-A -d -p 6101:6379 redis)\nREDIS_B_ID=$(docker run --name=dd-ci-twemproxy-redis-B -d -p 6102:6379 redis)\nwait_for 6101\nwait_for 6102\n\nETCD_ID=$(docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2380:2380 -p 2379:2379 --name=dd-ci-twemproxy-etcd quay.io/coreos/etcd:v2.2.0 \\\n      -name etcd0 \\\n      -advertise-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001,http://$DOCKER_ADDR:2379,http://$DOCKER_ADDR:4001 \\\n      -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \\\n      -initial-advertise-peer-urls http://0.0.0.0:2380 \\\n      -listen-peer-urls http://0.0.0.0:2380 \\\n      -initial-cluster-token etcd-cluster-1 \\\n      -initial-cluster etcd0=http://0.0.0.0:2380 \\\n      -initial-cluster-state new)\n\nwait_for 2379\nwait_for 4001\n\n# set etcd config\ncurl -L -X PUT http://127.0.0.1:2379/v2/keys/services/redis/01 -d value=\"$DOCKER_ADDR:6101\"\ncurl -L -X PUT http://127.0.0.1:2379/v2/keys/services/redis/02 -d value=\"$DOCKER_ADDR:6102\"\ncurl -L -X PUT http://127.0.0.1:2379/v2/keys/services/twemproxy/port -d value=\"$PORT\"\ncurl -L -X PUT http://127.0.0.1:2379/v2/keys/services/twemproxy/host -d value=\"$DOCKER_ADDR\"\n\n# publish the redis host:ip information into etcd\nTWEMPROXY_ID=$(docker run --name=dd-ci-twemproxy -d -p 6100:6100 -p 6222:6222 -e ETCD_HOST=$DOCKER_ADDR:4001 jgoodall/twemproxy)\n\n# until [[ `docker logs dd-ci-twemproxy 2>&1` =~ .*\"MySQL init process done. Ready for start up\" ]];\n# do\n#   sleep 2\n# done\n\necho 'Docker setup finished'\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\n[oracle] Integration fails when Oracle DB has offline tablespace\n**Output of the [info page](https://docs.datadoghq.com/agent/faq/agent-commands/#agent-status-and-information)**\r\n\r\n```\r\n====================\r\nCollector (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:29 (16s ago)\r\n  Pid: 26119\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/collector.log, syslog:/dev/log\r\n\r\n  Clocks\r\n  ======\r\n  \r\n    NTP offset: 0.0025 s\r\n    System UTC time: 2018-04-14 17:05:46.178245\r\n  \r\n  Paths\r\n  =====\r\n  \r\n    conf.d: /etc/dd-agent/conf.d\r\n    checks.d: Not found\r\n  \r\n  Hostnames\r\n  =========\r\n  \r\n    agent-hostname: cnrac1.delphix.com\r\n    hostname: cnrac1.delphix.com\r\n    socket-fqdn: cnrac1.delphix.com\r\n  \r\n  Checks\r\n  ======\r\n  \r\n    oracle (1.0.0)\r\n    --------------\r\n      - instance #0 [ERROR]: 'float() argument must be a string or a number'\r\n      - Collected 44 metrics, 0 events & 1 service check\r\n  \r\n    disk (1.1.0)\r\n    ------------\r\n      - instance #0 [OK]\r\n      - Collected 58 metrics, 0 events & 0 service checks\r\n  \r\n    network (1.4.0)\r\n    ---------------\r\n      - instance #0 [OK]\r\n      - Collected 24 metrics, 0 events & 0 service checks\r\n  \r\n    ntp (1.0.0)\r\n    -----------\r\n      - Collected 0 metrics, 0 events & 0 service checks\r\n  \r\n  \r\n  Emitters\r\n  ========\r\n  \r\n    - http_emitter [OK]\r\n\r\n====================\r\nDogstatsd (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26109\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/dogstatsd.log, syslog:/dev/log\r\n\r\n  Flush count: 54\r\n  Packet Count: 0\r\n  Packets per second: 0.0\r\n  Metric count: 1\r\n  Event count: 0\r\n  Service check count: 0\r\n\r\n====================\r\nForwarder (v 5.22.1)\r\n====================\r\n\r\n  Status date: 2018-04-14 10:05:43 (3s ago)\r\n  Pid: 26108\r\n  Platform: Linux-2.6.32-358.el6.x86_64-x86_64-with-redhat-6.4-Santiago\r\n  Python Version: 2.7.14, 64bit\r\n  Logs: <stderr>, /var/log/datadog/forwarder.log, syslog:/dev/log\r\n\r\n  Queue Size: 463 bytes\r\n  Queue Length: 1\r\n  Flush Count: 172\r\n  Transactions received: 137\r\n  Transactions flushed: 136\r\n  Transactions rejected: 0\r\n  API Key Status: API Key is valid\r\n  \r\n\r\n======================\r\nTrace Agent (v 5.22.1)\r\n======================\r\n\r\n  Pid: 26107\r\n  Uptime: 545 seconds\r\n  Mem alloc: 2889344 bytes\r\n\r\n  Hostname: cnrac1.delphix.com\r\n  Receiver: localhost:8126\r\n  API Endpoint: https://trace.agent.datadoghq.com\r\n\r\n  --- Receiver stats (1 min) ---\r\n\r\n\r\n  --- Writer stats (1 min) ---\r\n\r\n  Traces: 0 payloads, 0 traces, 0 bytes\r\n  Stats: 0 payloads, 0 stats buckets, 0 bytes\r\n  Services: 0 payloads, 0 services, 0 bytes\r\n```\r\n\r\n**Additional environment details (Operating System, Cloud provider, etc):**\r\nRed Hat Enterprise Linux Server release 6.4 (Santiago)\r\nOracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit\r\n\r\n**Steps to reproduce the issue:**\r\n1. Configure a Datadog check for an Oracle database and confirm that it is working\r\n2. In the Oracle database, add a new tablespace+datafile and take the datafile offline, e.g. with:\r\n```\r\nSQL> create tablespace offline_tablespace datafile size 10m autoextend off;\r\n\r\nTablespace created.\r\n\r\nSQL> alter tablespace OFFLINE_TABLESPACE offline;\r\n\r\nTablespace altered.\r\n```\r\n3. Note that the query used in `_get_tablespace_metrics` now returns `NULL` for the bytes and maximum bytes of this tablespace, as it is offline and Oracle cannot access the requested information:\r\n```\r\nSQL> select tablespace_name, sum(bytes), sum(maxbytes) from dba_data_files where tablespace_name = 'OFFLINE_TABLESPACE' group by tablespace_name;\r\n\r\nTABLESPACE_NAME \t       SUM(BYTES) SUM(MAXBYTES)\r\n------------------------------ ---------- -------------\r\nOFFLINE_TABLESPACE\r\n```\r\n\r\n**Describe the results you received:**\r\nDatadog oracle check starts failing with `float() argument must be a string or a number`\r\n\r\n**Describe the results you expected:**\r\nDatadog oracle check ignores the offline datafiles.\r\n\r\n**Additional information you deem important (e.g. issue happens only occasionally):**\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nlinux_proc_extras/test/ci/fixtures/entropy_avail\n## context:\n895\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ntwemproxy/test/ci/start-docker.sh\n## context:\n#!/bin/bash\n\n# A script to create the MySQL containers.\n\nfunction wait_for {\n    while netstat -lnt | awk \"\\$4 ~ /:$1\\$/ {exit 1}\"; do sleep 1; done\n    echo \"port $1 active!\"\n}\n\nset -e\n\nNAME='dd-ci-twemproxy'\nPORT=6100\nDOCKER_ADDR=$1\nCI_PATH=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\nif docker ps | grep dd-ci-twemproxy >/dev/null; then\n  echo 'the containers already exist, we have to remove them'\n  bash $CI_PATH/stop-docker.sh\nfi\n\nREDIS_A_ID=$(docker run --name=dd-ci-twemproxy-redis-A -d -p 6101:6379 redis)\nREDIS_B_ID=$(docker run --name=dd-ci-twemproxy-redis-B -d -p 6102:6379 redis)\nwait_for 6101\nwait_for 6102\n\nETCD_ID=$(docker run -d -v /usr/share/ca-certificates/:/etc/ssl/certs -p 4001:4001 -p 2380:2380 -p 2379:2379 --name=dd-ci-twemproxy-etcd quay.io/coreos/etcd:v2.2.0 \\\n      -name etcd0 \\\n      -advertise-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001,http://$DOCKER_ADDR:2379,http://$DOCKER_ADDR:4001 \\\n      -listen-client-urls http://0.0.0.0:2379,http://0.0.0.0:4001 \\\n      -initial-advertise-peer-urls http://0.0.0.0:2380 \\\n      -listen-peer-urls http://0.0.0.0:2380 \\\n      -initial-cluster-token etcd-cluster-1 \\\n      -initial-cluster etcd0=http://0.0.0.0:2380 \\\n      -initial-cluster-state new)\n\nwait_for 2379\nwait_for 4001\n\n# set etcd config\ncurl -L -X PUT http://127.0.0.1:2379/v2/keys/services/redis/01 -d value=\"$DOCKER_ADDR:6101\"\ncurl -L -X PUT http://127.0.0.1:2379/v2/keys/services/redis/02 -d value=\"$DOCKER_ADDR:6102\"\ncurl -L -X PUT http://127.0.0.1:2379/v2/keys/services/twemproxy/port -d value=\"$PORT\"\ncurl -L -X PUT http://127.0.0.1:2379/v2/keys/services/twemproxy/host -d value=\"$DOCKER_ADDR\"\n\n# publish the redis host:ip information into etcd\nTWEMPROXY_ID=$(docker run --name=dd-ci-twemproxy -d -p 6100:6100 -p 6222:6222 -e ETCD_HOST=$DOCKER_ADDR:4001 jgoodall/twemproxy)\n\n# until [[ `docker logs dd-ci-twemproxy 2>&1` =~ .*\"MySQL init process done. Ready for start up\" ]];\n# do\n#   sleep 2\n# done\n\necho 'Docker setup finished'\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmarklogic/assets/dashboards/overview.json\n## context:\n{\n    \"author_name\": \"Datadog\",\n    \"description\": \"Datadog's integration for MarkLogic gives you the visibility you need to identify performance issues and tune your deployments more effectively.\\n\\nThis dashboard shows an overview of your cluster health, and provides more information about forests and databases.\\n\\nClone this template dashboard to make changes and add your own graph widgets.\",\n    \"layout_type\": \"free\",\n    \"template_variables\": [\n        {\n            \"default\": \"*\",\n            \"name\": \"dd_host\",\n            \"prefix\": \"host\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"forest_name\",\n            \"prefix\": \"forest_name\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"database_name\",\n            \"prefix\": \"database_name\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"ml_host_name\",\n            \"prefix\": \"marklogic_host_name\"\n        }\n    ],\n    \"title\": \"MarkLogic - Overview\",\n    \"widgets\": [\n        {\n            \"definition\": {\n                \"columns\": [\n                    \"core_host\",\n                    \"core_service\"\n                ],\n                \"indexes\": [],\n                \"message_display\": \"expanded-md\",\n                \"query\": \"source:marklogic\",\n                \"show_date_column\": true,\n                \"show_message_column\": true,\n                \"sort\": {\n                    \"column\": \"time\",\n                    \"order\": \"desc\"\n                },\n                \"type\": \"log_stream\"\n            },\n            \"id\": 2577398194561278,\n            \"layout\": {\n                \"height\": 78,\n                \"width\": 47,\n                \"x\": 162,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.can_connect\",\n                \"group\": \"$host\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Cluster status\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 8755180811202380,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 24,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.forest.health\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Forest health\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 2200143632431740,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 40,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.database.health\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Database health\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 8505096373419124,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 56,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"requests\": [\n                    {\n                        \"q\": \"top(sum:marklogic.forests.storage.disk_size{*} by {forest_name}, 10, 'last', 'desc')\"\n                    }\n                ],\n                \"title\": \"Largest forests on disk (top 10 forests)\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"toplist\"\n            },\n            \"id\": 7675935468546344,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Forests\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2288121390055484,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# MarkLogic logs\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3278783423121882,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 162,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"\\n# Overview\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 4562551763936228,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"sizing\": \"zoom\",\n                \"type\": \"image\",\n                \"url\": \"/static/images/logos/marklogic_large.svg\"\n            },\n            \"id\": 3965572263080994,\n            \"layout\": {\n                \"height\": 12,\n                \"width\": 22,\n                \"x\": -8,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Hosts\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 7526170454995310,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 44\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.hosts.query_read_rate{$ml_host_name} by {host_name}, avg:marklogic.hosts.large_read_rate{$ml_host_name} by {host_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Read query rate and large document read rate over $ml_host_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 4092568594891762,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 50\n            }\n        },\n        {\n            \"definition\": {\n                \"requests\": [\n                    {\n                        \"q\": \"top(sum:marklogic.databases.data_size{*} by {database_name}, 10, 'last', 'desc')\"\n                    }\n                ],\n                \"title\": \"Largest databases on disk (top 10 databases)\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"toplist\"\n            },\n            \"id\": 4216303646461122,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 34,\n                \"x\": 126,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"autoscale\": true,\n                \"precision\": 2,\n                \"requests\": [\n                    {\n                        \"aggregator\": \"last\",\n                        \"q\": \"sum:marklogic.databases.forests_count{$database_name}\"\n                    }\n                ],\n                \"title\": \"Forests of $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"query_value\"\n            },\n            \"id\": 7180959663064248,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 23,\n                \"x\": 113,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"bars\",\n                        \"on_right_yaxis\": false,\n                        \"q\": \"sum:marklogic.requests.total_requests{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Total number of active requests over $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 6497256550880508,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 53\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.forests.total_rate{$forest_name} by {forest_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors by $forest_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 1251925672919538,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 68\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"Configure the databases Datadog will track using [resource filters](https://github.com/DataDog/integrations-core/blob/03831e4fb3f5d4e95f9aabe8d5a5da10dbf9547e/marklogic/datadog_checks/marklogic/data/conf.yaml.example#L60-L75)\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"right\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3596562826502024,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 12,\n                \"x\": 113,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.databases.total_rate{$database_name} by {database_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors by $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 7873483361703650,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 31\n            }\n        },\n        {\n            \"definition\": {\n                \"autoscale\": true,\n                \"precision\": 2,\n                \"requests\": [\n                    {\n                        \"aggregator\": \"avg\",\n                        \"conditional_formats\": [\n                            {\n                                \"comparator\": \">\",\n                                \"palette\": \"white_on_green\",\n                                \"value\": 0\n                            },\n                            {\n                                \"comparator\": \"<=\",\n                                \"palette\": \"white_on_yellow\",\n                                \"value\": 0\n                            }\n                        ],\n                        \"q\": \"sum:marklogic.databases.backup_count{$database_name}\"\n                    }\n                ],\n                \"title\": \"Backups of $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"query_value\"\n            },\n            \"id\": 8732386596109986,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 23,\n                \"x\": 137,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"white\",\n                \"content\": \"Datadog's integration for MarkLogic gives you the visibility you need to identify performance issues and tune your deployments more effectively.\\n\\nThis dashboard shows an overview of your cluster health, and provides more information about forests and databases.\\n\\nClone this template dashboard to make changes and add your own graph widgets.\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2191273978937394,\n            \"layout\": {\n                \"height\": 27,\n                \"width\": 22,\n                \"x\": 0,\n                \"y\": 14\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.hosts.total_rate{$ml_host_name} by {host_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors over $ml_host_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 5983605072600952,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 66\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Databases\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3172903413969796,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Requests\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 6184667112701002,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 47\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"bars\",\n                        \"on_right_yaxis\": false,\n                        \"q\": \"sum:marklogic.transactions.total_transactions{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Total number of open transactions over $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 6411568736004342,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 27\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"Query read rate and large read rate [indicate](https://docs.marklogic.com/guide/opsdir/Analyse#id_21175) overall disk I/O performance during queries.\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"right\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 7562397926143496,\n            \"layout\": {\n                \"height\": 13,\n                \"width\": 18,\n                \"x\": 5,\n                \"y\": 51\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.servers.request_rate{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Average request rate across $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 7586296888730830,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 69\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"If read query throughput is increasing while the hit rate for the compressed tree cache (`marklogic.forests.compressed_tree_cache_hit_rate`) is decreasing, it's likely that the cache is not large enough to handle the new queries\\u2014consider adding memory to the cache.\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 5842035442347632,\n            \"layout\": {\n                \"height\": 13,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.forests.query_read_rate{$forest_name} by {forest_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Read query rate\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 779967061471034,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 52\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.forests.compressed_tree_cache_hit_rate{*}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Compressed tree cache hit rate\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 2378507056004724,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 36\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"These service checks only appear when `enable_health_service_checks` is enabled.\\nA resource color depends on how MarkLogic tagged it: green for `info`, red for `critical`, and yellow for other tags like `at-risk`.\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"top\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2934360651001512,\n            \"layout\": {\n                \"height\": 11,\n                \"width\": 31,\n                \"x\": 40,\n                \"y\": 15\n            }\n        }\n    ]\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncrio/assets/service_checks.json\n## context:\n[\n    {\n        \"agent_version\": \"6.0.0\",\n        \"integration\": \"CRI-O\",\n        \"check\": \"crio.prometheus.health\",\n        \"statuses\": [\n            \"ok\",\n            \"critical\"\n        ],\n        \"groups\": [\n            \"endpoint\"\n        ],\n        \"name\": \"CRI-O prometheus health\",\n        \"description\": \"Returns `CRITICAL` if the check can't access the metrics endpoint.\"\n    }\n]\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nkube_dns/datadog_checks/kube_dns/config_models/defaults.py\n## context:\n# (C) Datadog, Inc. 2022-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n\n# This file is autogenerated.\n# To change this file you should edit assets/configuration/spec.yaml and then run the following commands:\n#     ddev -x validate config -s <INTEGRATION_NAME>\n#     ddev -x validate models -s <INTEGRATION_NAME>\n\nfrom datadog_checks.base.utils.models.fields import get_default_field_value\n\n\ndef shared_proxy(field, value):\n    return get_default_field_value(field, value)\n\n\ndef shared_service(field, value):\n    return get_default_field_value(field, value)\n\n\ndef shared_skip_proxy(field, value):\n    return False\n\n\ndef shared_timeout(field, value):\n    return 10\n\n\ndef instance_allow_redirects(field, value):\n    return True\n\n\ndef instance_auth_token(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_auth_type(field, value):\n    return 'basic'\n\n\ndef instance_aws_host(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_aws_region(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_aws_service(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_bearer_token_auth(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_bearer_token_path(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_bearer_token_refresh_interval(field, value):\n    return 60\n\n\ndef instance_connect_timeout(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_disable_generic_tags(field, value):\n    return False\n\n\ndef instance_empty_default_hostname(field, value):\n    return False\n\n\ndef instance_exclude_labels(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_extra_headers(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_headers(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_health_service_check(field, value):\n    return True\n\n\ndef instance_health_url(field, value):\n    return 'http://localhost:8081/readiness'\n\n\ndef instance_ignore_metrics(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_ignore_metrics_by_labels(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_ignore_tags(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_include_labels(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_kerberos_auth(field, value):\n    return 'disabled'\n\n\ndef instance_kerberos_cache(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_kerberos_delegate(field, value):\n    return False\n\n\ndef instance_kerberos_force_initiate(field, value):\n    return False\n\n\ndef instance_kerberos_hostname(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_kerberos_keytab(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_kerberos_principal(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_label_joins(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_label_to_hostname(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_labels_mapper(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_log_requests(field, value):\n    return False\n\n\ndef instance_metric_patterns(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_metrics(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_min_collection_interval(field, value):\n    return 15\n\n\ndef instance_namespace(field, value):\n    return 'service'\n\n\ndef instance_ntlm_domain(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_password(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_persist_connections(field, value):\n    return False\n\n\ndef instance_prometheus_metrics_prefix(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_proxy(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_read_timeout(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_request_size(field, value):\n    return 10\n\n\ndef instance_send_distribution_buckets(field, value):\n    return False\n\n\ndef instance_send_distribution_counts_as_monotonic(field, value):\n    return False\n\n\ndef instance_send_distribution_sums_as_monotonic(field, value):\n    return False\n\n\ndef instance_send_histograms_buckets(field, value):\n    return True\n\n\ndef instance_send_monotonic_counter(field, value):\n    return True\n\n\ndef instance_send_monotonic_with_gauge(field, value):\n    return False\n\n\ndef instance_service(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_skip_proxy(field, value):\n    return False\n\n\ndef instance_tags(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_timeout(field, value):\n    return 10\n\n\ndef instance_tls_ca_cert(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_tls_cert(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_tls_ignore_warning(field, value):\n    return False\n\n\ndef instance_tls_private_key(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_tls_protocols_allowed(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_tls_use_host_header(field, value):\n    return False\n\n\ndef instance_tls_verify(field, value):\n    return True\n\n\ndef instance_type_overrides(field, value):\n    return get_default_field_value(field, value)\n\n\ndef instance_use_legacy_auth_encoding(field, value):\n    return True\n\n\ndef instance_use_process_start_time(field, value):\n    return False\n\n\ndef instance_username(field, value):\n    return get_default_field_value(field, value)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmarklogic/assets/dashboards/overview.json\n## context:\n{\n    \"author_name\": \"Datadog\",\n    \"description\": \"Datadog's integration for MarkLogic gives you the visibility you need to identify performance issues and tune your deployments more effectively.\\n\\nThis dashboard shows an overview of your cluster health, and provides more information about forests and databases.\\n\\nClone this template dashboard to make changes and add your own graph widgets.\",\n    \"layout_type\": \"free\",\n    \"template_variables\": [\n        {\n            \"default\": \"*\",\n            \"name\": \"dd_host\",\n            \"prefix\": \"host\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"forest_name\",\n            \"prefix\": \"forest_name\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"database_name\",\n            \"prefix\": \"database_name\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"ml_host_name\",\n            \"prefix\": \"marklogic_host_name\"\n        }\n    ],\n    \"title\": \"MarkLogic - Overview\",\n    \"widgets\": [\n        {\n            \"definition\": {\n                \"columns\": [\n                    \"core_host\",\n                    \"core_service\"\n                ],\n                \"indexes\": [],\n                \"message_display\": \"expanded-md\",\n                \"query\": \"source:marklogic\",\n                \"show_date_column\": true,\n                \"show_message_column\": true,\n                \"sort\": {\n                    \"column\": \"time\",\n                    \"order\": \"desc\"\n                },\n                \"type\": \"log_stream\"\n            },\n            \"id\": 2577398194561278,\n            \"layout\": {\n                \"height\": 78,\n                \"width\": 47,\n                \"x\": 162,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.can_connect\",\n                \"group\": \"$host\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Cluster status\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 8755180811202380,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 24,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.forest.health\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Forest health\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 2200143632431740,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 40,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.database.health\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Database health\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 8505096373419124,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 56,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"requests\": [\n                    {\n                        \"q\": \"top(sum:marklogic.forests.storage.disk_size{*} by {forest_name}, 10, 'last', 'desc')\"\n                    }\n                ],\n                \"title\": \"Largest forests on disk (top 10 forests)\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"toplist\"\n            },\n            \"id\": 7675935468546344,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Forests\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2288121390055484,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# MarkLogic logs\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3278783423121882,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 162,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"\\n# Overview\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 4562551763936228,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"sizing\": \"zoom\",\n                \"type\": \"image\",\n                \"url\": \"/static/images/logos/marklogic_large.svg\"\n            },\n            \"id\": 3965572263080994,\n            \"layout\": {\n                \"height\": 12,\n                \"width\": 22,\n                \"x\": -8,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Hosts\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 7526170454995310,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 44\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.hosts.query_read_rate{$ml_host_name} by {host_name}, avg:marklogic.hosts.large_read_rate{$ml_host_name} by {host_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Read query rate and large document read rate over $ml_host_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 4092568594891762,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 50\n            }\n        },\n        {\n            \"definition\": {\n                \"requests\": [\n                    {\n                        \"q\": \"top(sum:marklogic.databases.data_size{*} by {database_name}, 10, 'last', 'desc')\"\n                    }\n                ],\n                \"title\": \"Largest databases on disk (top 10 databases)\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"toplist\"\n            },\n            \"id\": 4216303646461122,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 34,\n                \"x\": 126,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"autoscale\": true,\n                \"precision\": 2,\n                \"requests\": [\n                    {\n                        \"aggregator\": \"last\",\n                        \"q\": \"sum:marklogic.databases.forests_count{$database_name}\"\n                    }\n                ],\n                \"title\": \"Forests of $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"query_value\"\n            },\n            \"id\": 7180959663064248,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 23,\n                \"x\": 113,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"bars\",\n                        \"on_right_yaxis\": false,\n                        \"q\": \"sum:marklogic.requests.total_requests{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Total number of active requests over $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 6497256550880508,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 53\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.forests.total_rate{$forest_name} by {forest_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors by $forest_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 1251925672919538,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 68\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"Configure the databases Datadog will track using [resource filters](https://github.com/DataDog/integrations-core/blob/03831e4fb3f5d4e95f9aabe8d5a5da10dbf9547e/marklogic/datadog_checks/marklogic/data/conf.yaml.example#L60-L75)\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"right\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3596562826502024,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 12,\n                \"x\": 113,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.databases.total_rate{$database_name} by {database_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors by $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 7873483361703650,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 31\n            }\n        },\n        {\n            \"definition\": {\n                \"autoscale\": true,\n                \"precision\": 2,\n                \"requests\": [\n                    {\n                        \"aggregator\": \"avg\",\n                        \"conditional_formats\": [\n                            {\n                                \"comparator\": \">\",\n                                \"palette\": \"white_on_green\",\n                                \"value\": 0\n                            },\n                            {\n                                \"comparator\": \"<=\",\n                                \"palette\": \"white_on_yellow\",\n                                \"value\": 0\n                            }\n                        ],\n                        \"q\": \"sum:marklogic.databases.backup_count{$database_name}\"\n                    }\n                ],\n                \"title\": \"Backups of $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"query_value\"\n            },\n            \"id\": 8732386596109986,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 23,\n                \"x\": 137,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"white\",\n                \"content\": \"Datadog's integration for MarkLogic gives you the visibility you need to identify performance issues and tune your deployments more effectively.\\n\\nThis dashboard shows an overview of your cluster health, and provides more information about forests and databases.\\n\\nClone this template dashboard to make changes and add your own graph widgets.\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2191273978937394,\n            \"layout\": {\n                \"height\": 27,\n                \"width\": 22,\n                \"x\": 0,\n                \"y\": 14\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.hosts.total_rate{$ml_host_name} by {host_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors over $ml_host_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 5983605072600952,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 66\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Databases\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3172903413969796,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Requests\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 6184667112701002,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 47\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"bars\",\n                        \"on_right_yaxis\": false,\n                        \"q\": \"sum:marklogic.transactions.total_transactions{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Total number of open transactions over $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 6411568736004342,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 27\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"Query read rate and large read rate [indicate](https://docs.marklogic.com/guide/opsdir/Analyse#id_21175) overall disk I/O performance during queries.\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"right\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 7562397926143496,\n            \"layout\": {\n                \"height\": 13,\n                \"width\": 18,\n                \"x\": 5,\n                \"y\": 51\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.servers.request_rate{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Average request rate across $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 7586296888730830,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 69\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"If read query throughput is increasing while the hit rate for the compressed tree cache (`marklogic.forests.compressed_tree_cache_hit_rate`) is decreasing, it's likely that the cache is not large enough to handle the new queries\\u2014consider adding memory to the cache.\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 5842035442347632,\n            \"layout\": {\n                \"height\": 13,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.forests.query_read_rate{$forest_name} by {forest_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Read query rate\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 779967061471034,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 52\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.forests.compressed_tree_cache_hit_rate{*}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Compressed tree cache hit rate\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 2378507056004724,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 36\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"These service checks only appear when `enable_health_service_checks` is enabled.\\nA resource color depends on how MarkLogic tagged it: green for `info`, red for `critical`, and yellow for other tags like `at-risk`.\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"top\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2934360651001512,\n            \"layout\": {\n                \"height\": 11,\n                \"width\": 31,\n                \"x\": 40,\n                \"y\": 15\n            }\n        }\n    ]\n}\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nvarnish/assets/saved_views/bot_errors.json\n## context:\n{ \n  \"name\": \"Varnish pages with error faced by bots\",\n  \"type\": \"logs\",\n  \"page\": \"analytics\",\n  \"query\": \"source:varnish @http.useragent_details.browser.family:*bot* @http.status_code:[400 TO 599]\",\n  \"timerange\": {\n    \"interval_ms\": 3600000\n  },\n  \"visible_facets\": [\"source\", \"service\", \"host\", \"status\", \"@http.status_code\", \"@http.method\", \"@http.url_details.path\", \"@http.useragent_details.browser.family\", \"@http.useragent_details.device.family\", \"@http.useragent_details.os.family\", \"@network.client.ip\"],\n  \"options\": {\n    \"group_bys\": [\n      { \"facet\": \"@http.useragent_details.browser.family\" },\n      { \"facet\": \"@http.status_code\" },\n      { \"facet\": \"@http.url_details.path\" }\n    ],\n    \"aggregations\": [\n      { \"metric\": \"count\", \"type\": \"count\" }\n    ],\n    \"limit\": \"5\",\n    \"order\": \"top\",\n    \"widget\": \"query_table\"\n  }\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncloudera/tests/__init__.py\n## context:\n# (C) Datadog, Inc. 2022-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndocs/developer/ddev/configuration.md\n## context:\n# Configuration\n\n-----\n\nAll configuration can be managed entirely by the `ddev config` command group. To locate the\n[TOML][toml-github] config file, run:\n\n```\nddev config find\n```\n\n## Repository\n\nAll CLI commands are aware of the current repository context, defined by the option `repo`. This option should be a\nreference to a key in `repos` which is set to the path of a supported repository. For example, this configuration:\n\n```toml\nrepo = \"core\"\n\n[repos]\ncore = \"/path/to/integrations-core\"\nextras = \"/path/to/integrations-extras\"\nagent = \"/path/to/datadog-agent\"\n```\n\nwould make it so running e.g. `ddev test nginx` will look for an integration named `nginx` in `/path/to/integrations-core`\nno matter what directory you are in. If the selected path does not exist, then the current directory will be used.\n\nBy default, `repo` is set to `core`.\n\n## Agent\n\nFor running environments with a [live Agent](../e2e.md), you can select a specific build version to use with the\noption `agent`. This option should be a reference to a key in `agents` which is a mapping of environment types to\nAgent versions. For example, this configuration:\n\n```toml\nagent = \"master\"\n\n[agents.master]\ndocker = \"datadog/agent-dev:master\"\nlocal = \"latest\"\n\n[agents.\"7.18.1\"]\ndocker = \"datadog/agent:7.18.1\"\nlocal = \"7.18.1\"\n```\n\nwould make it so environments that [define](plugins.md#metadata) the type as `docker` will use the Docker image\nthat was built with the latest commit to the [datadog-agent][] repo.\n\n## Organization\n\nYou can switch to using a particular organization with the option `org`. This option should be a reference to a\nkey in `orgs` which is a mapping containing data specific to the organization. For example, this configuration:\n\n```toml\norg = \"staging\"\n\n[orgs.staging]\napi_key = \"<API_KEY>\"\napp_key = \"<APP_KEY>\"\nsite = \"datadoghq.eu\"\n```\n\nwould use the access keys for the organization named `staging` and would submit data to the EU region.\n\nThe supported fields are:\n\n- [api_key][datadog-config-api-key]\n- [app_key][datadog-config-app-key]\n- [site][datadog-config-site]\n- [dd_url][datadog-config-dd-url]\n- [log_url][datadog-config-log-url]\n\n## GitHub\n\nTo avoid GitHub's public API rate limits, you need to set `github.user`/`github.token` in your config file or\nuse the `DD_GITHUB_USER`/`DD_GITHUB_TOKEN` environment variables.\n\nRun `ddev config show` to see if your GitHub user and token is set.\n\nIf not:\n\n1. Run `ddev config set github.user <YOUR_GITHUB_USERNAME>`\n1. Create a [personal access token][github-personal-access-token] with `public_repo` and `read:org` permissions\n1. Run `ddev config set github.token` then paste the token\n1. [Enable single sign-on][github-saml-single-sign-on] for the token\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsqlserver/datadog_checks/sqlserver/sqlserver.py\n## context:\n# (C) Datadog, Inc. 2018-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\nfrom __future__ import division\n\nimport re\nimport time\nfrom collections import defaultdict\n\nimport six\nfrom cachetools import TTLCache\n\nfrom datadog_checks.base import AgentCheck, ConfigurationError\nfrom datadog_checks.base.config import is_affirmative\nfrom datadog_checks.base.utils.common import to_native_string\nfrom datadog_checks.base.utils.db import QueryExecutor, QueryManager\nfrom datadog_checks.base.utils.db.utils import resolve_db_host\nfrom datadog_checks.base.utils.serialization import json\nfrom datadog_checks.sqlserver.activity import SqlserverActivity\nfrom datadog_checks.sqlserver.statements import SqlserverStatementMetrics\nfrom datadog_checks.sqlserver.utils import Database, parse_sqlserver_major_version\n\ntry:\n    import datadog_agent\nexcept ImportError:\n    from ..stubs import datadog_agent\n\nfrom datadog_checks.sqlserver import metrics\nfrom datadog_checks.sqlserver.connection import Connection, SQLConnectionError, split_sqlserver_host_port\nfrom datadog_checks.sqlserver.const import (\n    AO_METRICS,\n    AO_METRICS_PRIMARY,\n    AO_METRICS_SECONDARY,\n    AUTODISCOVERY_QUERY,\n    AWS_RDS_HOSTNAME_SUFFIX,\n    AZURE_DEPLOYMENT_TYPE_TO_RESOURCE_TYPES,\n    BASE_NAME_QUERY,\n    COUNTER_TYPE_QUERY,\n    DATABASE_FRAGMENTATION_METRICS,\n    DATABASE_MASTER_FILES,\n    DATABASE_METRICS,\n    DATABASE_SERVICE_CHECK_NAME,\n    DBM_MIGRATED_METRICS,\n    DEFAULT_AUTODISCOVERY_INTERVAL,\n    ENGINE_EDITION_SQL_DATABASE,\n    INSTANCE_METRICS,\n    INSTANCE_METRICS_DATABASE,\n    PERF_AVERAGE_BULK,\n    PERF_COUNTER_BULK_COUNT,\n    PERF_COUNTER_LARGE_RAWCOUNT,\n    PERF_LARGE_RAW_BASE,\n    PERF_RAW_LARGE_FRACTION,\n    SERVICE_CHECK_NAME,\n    STATIC_INFO_ENGINE_EDITION,\n    STATIC_INFO_MAJOR_VERSION,\n    STATIC_INFO_VERSION,\n    TASK_SCHEDULER_METRICS,\n    VALID_METRIC_TYPES,\n    expected_sys_databases_columns,\n)\nfrom datadog_checks.sqlserver.metrics import DEFAULT_PERFORMANCE_TABLE, VALID_TABLES\nfrom datadog_checks.sqlserver.queries import (\n    QUERY_AO_FAILOVER_CLUSTER,\n    QUERY_AO_FAILOVER_CLUSTER_MEMBER,\n    QUERY_FAILOVER_CLUSTER_INSTANCE,\n    QUERY_SERVER_STATIC_INFO,\n    get_query_ao_availability_groups,\n    get_query_file_stats,\n)\nfrom datadog_checks.sqlserver.utils import set_default_driver_conf\n\ntry:\n    import adodbapi\nexcept ImportError:\n    adodbapi = None\n\ntry:\n    import pyodbc\nexcept ImportError:\n    pyodbc = None\n\nif adodbapi is None and pyodbc is None:\n    raise ImportError('adodbapi or pyodbc must be installed to use this check.')\n\nset_default_driver_conf()\n\n\nclass SQLServer(AgentCheck):\n    __NAMESPACE__ = 'sqlserver'\n\n    def __init__(self, name, init_config, instances):\n        super(SQLServer, self).__init__(name, init_config, instances)\n\n        self._resolved_hostname = None\n        self._agent_hostname = None\n        self.connection = None\n        self.failed_connections = {}\n        self.instance_metrics = []\n        self.instance_per_type_metrics = defaultdict(set)\n        self.do_check = True\n\n        self.tags = self.instance.get(\"tags\", [])\n        self.reported_hostname = self.instance.get('reported_hostname')\n        self.autodiscovery = is_affirmative(self.instance.get('database_autodiscovery'))\n        self.autodiscovery_include = self.instance.get('autodiscovery_include', ['.*'])\n        self.autodiscovery_exclude = self.instance.get('autodiscovery_exclude', ['model'])\n        self.autodiscovery_db_service_check = is_affirmative(self.instance.get('autodiscovery_db_service_check', True))\n        self.min_collection_interval = self.instance.get('min_collection_interval', 15)\n        self._compile_patterns()\n        self.autodiscovery_interval = self.instance.get('autodiscovery_interval', DEFAULT_AUTODISCOVERY_INTERVAL)\n        self.databases = set()\n        self.autodiscovery_query = None\n        self.ad_last_check = 0\n\n        self.proc = self.instance.get('stored_procedure')\n        self.proc_type_mapping = {'gauge': self.gauge, 'rate': self.rate, 'histogram': self.histogram}\n        self.custom_metrics = init_config.get('custom_metrics', [])\n\n        # DBM\n        self.dbm_enabled = self.instance.get('dbm', False)\n        self.statement_metrics_config = self.instance.get('query_metrics', {}) or {}\n        self.statement_metrics = SqlserverStatementMetrics(self)\n        self.activity_config = self.instance.get('query_activity', {}) or {}\n        self.activity = SqlserverActivity(self)\n        self.cloud_metadata = {}\n        aws = self.instance.get('aws', {})\n        gcp = self.instance.get('gcp', {})\n        azure = self.instance.get('azure', {})\n        # Remap fully_qualified_domain_name to name\n        azure = {k if k != 'fully_qualified_domain_name' else 'name': v for k, v in azure.items()}\n        if aws:\n            self.cloud_metadata.update({'aws': aws})\n        if gcp:\n            self.cloud_metadata.update({'gcp': gcp})\n        if azure:\n            self.cloud_metadata.update({'azure': azure})\n\n        obfuscator_options_config = self.instance.get('obfuscator_options', {}) or {}\n        self.obfuscator_options = to_native_string(\n            json.dumps(\n                {\n                    # Valid values for this can be found at\n                    # https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/semantic_conventions/database.md#connection-level-attributes\n                    'dbms': 'mssql',\n                    'replace_digits': is_affirmative(\n                        obfuscator_options_config.get(\n                            'replace_digits',\n                            obfuscator_options_config.get('quantize_sql_tables', False),\n                        )\n                    ),\n                    'keep_sql_alias': is_affirmative(obfuscator_options_config.get('keep_sql_alias', True)),\n                    'return_json_metadata': is_affirmative(obfuscator_options_config.get('collect_metadata', True)),\n                    'table_names': is_affirmative(obfuscator_options_config.get('collect_tables', True)),\n                    'collect_commands': is_affirmative(obfuscator_options_config.get('collect_commands', True)),\n                    'collect_comments': is_affirmative(obfuscator_options_config.get('collect_comments', True)),\n                }\n            )\n        )\n        self.log_unobfuscated_queries = is_affirmative(self.instance.get('log_unobfuscated_queries', False))\n        self.log_unobfuscated_plans = is_affirmative(self.instance.get('log_unobfuscated_plans', False))\n\n        self.static_info_cache = TTLCache(\n            maxsize=100,\n            # cache these for a full day\n            ttl=60 * 60 * 24,\n        )\n        self.check_initializations.append(self.initialize_connection)\n        self.check_initializations.append(self.set_resolved_hostname)\n        self.check_initializations.append(self.set_resolved_hostname_metadata)\n        self.check_initializations.append(self.config_checks)\n        self.check_initializations.append(self.make_metric_list_to_collect)\n\n        # Query declarations\n        self._query_manager = None\n        self._dynamic_queries = None\n        self.server_state_queries = None\n\n    def cancel(self):\n        self.statement_metrics.cancel()\n        self.activity.cancel()\n\n    def config_checks(self):\n        if self.autodiscovery and self.instance.get('database'):\n            self.log.warning(\n                'sqlserver `database_autodiscovery` and `database` options defined in same instance - '\n                'autodiscovery will take precedence.'\n            )\n        if not self.autodiscovery and (self.autodiscovery_include or self.autodiscovery_exclude):\n            self.log.warning(\n                \"Autodiscovery is disabled, autodiscovery_include and autodiscovery_exclude will be ignored\"\n            )\n\n    def _new_query_executor(self, queries):\n        return QueryExecutor(\n            self.execute_query_raw,\n            self,\n            queries=queries,\n            tags=self.tags,\n            hostname=self.resolved_hostname,\n        )\n\n    def set_resolved_hostname_metadata(self):\n        self.set_metadata('resolved_hostname', self.resolved_hostname)\n\n    def set_resource_tags(self):\n        if self.cloud_metadata.get(\"gcp\") is not None:\n            self.tags.append(\n                \"dd.internal.resource:gcp_sql_database_instance:{}:{}\".format(\n                    self.cloud_metadata.get(\"gcp\")[\"project_id\"], self.cloud_metadata.get(\"gcp\")[\"instance_id\"]\n                )\n            )\n        if self.cloud_metadata.get(\"aws\") is not None:\n            self.tags.append(\n                \"dd.internal.resource:aws_rds_instance:{}\".format(\n                    self.cloud_metadata.get(\"aws\")[\"instance_endpoint\"],\n                )\n            )\n        elif AWS_RDS_HOSTNAME_SUFFIX in self._resolved_hostname:\n            # allow for detecting if the host is an RDS host, and emit\n            # the resource properly even if the `aws` config is unset\n            self.tags.append(\"dd.internal.resource:aws_rds_instance:{}\".format(self._resolved_hostname))\n        if self.cloud_metadata.get(\"azure\") is not None:\n            deployment_type = self.cloud_metadata.get(\"azure\")[\"deployment_type\"]\n            name = self.cloud_metadata.get(\"azure\")[\"name\"]\n            db_instance = None\n            if \"sql_database\" in deployment_type and self.dbm_enabled:\n                # azure sql databases have a special format, which is set for DBM\n                # customers in the resolved_hostname.\n                # If user is not DBM customer, the resource_name should just be set to the `name`\n                db_instance = self._resolved_hostname\n            # some `deployment_type`s map to multiple `resource_type`s\n            resource_types = AZURE_DEPLOYMENT_TYPE_TO_RESOURCE_TYPES.get(deployment_type).split(\",\")\n            for r_type in resource_types:\n                if 'azure_sql_server_database' in r_type and db_instance:\n                    self.tags.append(\"dd.internal.resource:{}:{}\".format(r_type, db_instance))\n                else:\n                    self.tags.append(\"dd.internal.resource:{}:{}\".format(r_type, name))\n        # finally, emit a `database_instance` resource for this instance\n        self.tags.append(\n            \"dd.internal.resource:database_instance:{}\".format(\n                self._resolved_hostname,\n            )\n        )\n\n    def set_resolved_hostname(self):\n        # load static information cache\n        self.load_static_information()\n        if self._resolved_hostname is None:\n            if self.reported_hostname:\n                self._resolved_hostname = self.reported_hostname\n            elif self.dbm_enabled:\n                host, _ = split_sqlserver_host_port(self.instance.get('host'))\n                self._resolved_hostname = resolve_db_host(host)\n                engine_edition = self.static_info_cache.get(STATIC_INFO_ENGINE_EDITION)\n                if engine_edition == ENGINE_EDITION_SQL_DATABASE:\n                    configured_database = self.instance.get('database', None)\n                    if not configured_database:\n                        configured_database = 'master'\n                        self.warning(\n                            \"Missing 'database' in instance configuration.\"\n                            \"For Azure SQL Database a non-master application database must be specified.\"\n                        )\n                    elif configured_database == 'master':\n                        self.warning(\n                            \"Wrong 'database' configured.\"\n                            \"For Azure SQL Database a non-master application database must be specified.\"\n                        )\n                    azure_server_suffix = \".database.windows.net\"\n                    if host.endswith(azure_server_suffix):\n                        host = host[: -len(azure_server_suffix)]\n                    # for Azure SQL Database, each database on a given \"server\" has isolated compute resources,\n                    # meaning that the agent is only able to see query activity for the specific database it's\n                    # connected to. For this reason, each Azure SQL database is modeled as an independent host.\n                    self._resolved_hostname = \"{}/{}\".format(host, configured_database)\n            else:\n                self._resolved_hostname = self.agent_hostname\n        # set resource tags to properly tag with updated hostname\n        self.set_resource_tags()\n\n    @property\n    def resolved_hostname(self):\n        return self._resolved_hostname\n\n    def load_static_information(self):\n        expected_keys = {STATIC_INFO_VERSION, STATIC_INFO_MAJOR_VERSION, STATIC_INFO_ENGINE_EDITION}\n        missing_keys = expected_keys - set(self.static_info_cache.keys())\n        if missing_keys:\n            with self.connection.open_managed_default_connection():\n                with self.connection.get_managed_cursor() as cursor:\n                    if STATIC_INFO_VERSION not in self.static_info_cache:\n                        cursor.execute(\"select @@version\")\n                        results = cursor.fetchall()\n                        if results and len(results) > 0 and len(results[0]) > 0 and results[0][0]:\n                            version = results[0][0]\n                            self.static_info_cache[STATIC_INFO_VERSION] = version\n                            self.static_info_cache[STATIC_INFO_MAJOR_VERSION] = parse_sqlserver_major_version(version)\n                            if not self.static_info_cache[STATIC_INFO_MAJOR_VERSION]:\n                                self.log.warning(\"failed to parse SQL Server major version from version: %s\", version)\n                        else:\n                            self.log.warning(\"failed to load version static information due to empty results\")\n                    if STATIC_INFO_ENGINE_EDITION not in self.static_info_cache:\n                        cursor.execute(\"SELECT CAST(ServerProperty('EngineEdition') AS INT) AS Edition\")\n                        result = cursor.fetchone()\n                        if result:\n                            self.static_info_cache[STATIC_INFO_ENGINE_EDITION] = result[0]\n                        else:\n                            self.log.warning(\"failed to load version static information due to empty results\")\n\n            # re-initialize resolved_hostname to ensure we take into consideration the static information\n            # after it's loaded\n            self._resolved_hostname = None\n\n    def debug_tags(self):\n        return self.tags + ['agent_hostname:{}'.format(self.agent_hostname)]\n\n    def debug_stats_kwargs(self, tags=None):\n        tags = tags if tags else []\n        return {\n            \"tags\": self.debug_tags() + tags,\n            \"hostname\": self.resolved_hostname,\n            \"raw\": True,\n        }\n\n    @property\n    def agent_hostname(self):\n        # type: () -> str\n        if self._agent_hostname is None:\n            self._agent_hostname = datadog_agent.get_hostname()\n        return self._agent_hostname\n\n    def initialize_connection(self):\n        self.connection = Connection(self, self.init_config, self.instance, self.handle_service_check)\n\n    def make_metric_list_to_collect(self):\n        # Pre-process the list of metrics to collect\n        try:\n            # check to see if the database exists before we try any connections to it\n            db_exists, context = self.connection.check_database()\n            if db_exists:\n                if self.instance.get('stored_procedure') is None:\n                    with self.connection.open_managed_default_connection():\n                        with self.connection.get_managed_cursor() as cursor:\n                            self.autodiscover_databases(cursor)\n                        self._make_metric_list_to_collect(self.custom_metrics)\n            else:\n                # How much do we care that the DB doesn't exist?\n                ignore = is_affirmative(self.instance.get(\"ignore_missing_database\", False))\n                if ignore is not None and ignore:\n                    # not much : we expect it. leave checks disabled\n                    self.do_check = False\n                    self.log.warning(\"Database %s does not exist. Disabling checks for this instance.\", context)\n                else:\n                    # yes we do. Keep trying\n                    msg = \"Database {} does not exist. Please resolve invalid database and restart agent\".format(\n                        context\n                    )\n                    raise ConfigurationError(msg)\n\n        except SQLConnectionError as e:\n            self.log.exception(\"Error connecting to database: %s\", e)\n        except ConfigurationError:\n            raise\n        except Exception as e:\n            self.log.exception(\"Initialization exception %s\", e)\n\n    def handle_service_check(self, status, host, database, message=None, is_default=True):\n        custom_tags = self.instance.get(\"tags\", [])\n        disable_generic_tags = self.instance.get('disable_generic_tags', False)\n        if custom_tags is None:\n            custom_tags = []\n        if disable_generic_tags:\n            service_check_tags = ['sqlserver_host:{}'.format(host), 'db:{}'.format(database)]\n        else:\n            service_check_tags = ['host:{}'.format(host), 'sqlserver_host:{}'.format(host), 'db:{}'.format(database)]\n        service_check_tags.extend(custom_tags)\n        service_check_tags = list(set(service_check_tags))\n\n        if status is AgentCheck.OK:\n            message = None\n\n        if is_default:\n            self.service_check(SERVICE_CHECK_NAME, status, tags=service_check_tags, message=message, raw=True)\n        if self.autodiscovery and self.autodiscovery_db_service_check:\n            self.service_check(DATABASE_SERVICE_CHECK_NAME, status, tags=service_check_tags, message=message, raw=True)\n\n    def _compile_patterns(self):\n        self._include_patterns = self._compile_valid_patterns(self.autodiscovery_include)\n        self._exclude_patterns = self._compile_valid_patterns(self.autodiscovery_exclude)\n\n    def _compile_valid_patterns(self, patterns):\n        valid_patterns = []\n\n        for pattern in patterns:\n            # Ignore empty patterns as they match everything\n            if not pattern:\n                continue\n\n            try:\n                re.compile(pattern, re.IGNORECASE)\n            except Exception:\n                self.log.warning('%s is not a valid regular expression and will be ignored', pattern)\n            else:\n                valid_patterns.append(pattern)\n\n        if valid_patterns:\n            return re.compile('|'.join(valid_patterns), re.IGNORECASE)\n        else:\n            # create unmatchable regex - https://stackoverflow.com/a/1845097/2157429\n            return re.compile(r'(?!x)x')\n\n    def autodiscover_databases(self, cursor):\n        if not self.autodiscovery:\n            return False\n\n        now = time.time()\n        if now - self.ad_last_check > self.autodiscovery_interval:\n            self.log.info('Performing database autodiscovery')\n            query = self._get_autodiscovery_query_cached(cursor)\n            cursor.execute(query)\n            rows = list(cursor.fetchall())\n            if len(rows[0]) == 2:\n                all_dbs = {Database(row.name, row.physical_database_name) for row in rows}\n            else:\n                all_dbs = {Database(row.name) for row in rows}\n            excluded_dbs = {d for d in all_dbs if self._exclude_patterns.match(d.name)}\n            included_dbs = {d for d in all_dbs if self._include_patterns.match(d.name)}\n\n            self.log.debug(\n                'Autodiscovered databases: %s, excluding: %s, including: %s', all_dbs, excluded_dbs, included_dbs\n            )\n\n            # keep included dbs but remove any that were explicitly excluded\n            filtered_dbs = all_dbs.intersection(included_dbs) - excluded_dbs\n\n            self.log.debug('Resulting filtered databases: %s', filtered_dbs)\n            self.ad_last_check = now\n            if filtered_dbs != self.databases:\n                self.log.debug('Databases updated from previous autodiscovery check.')\n                self.databases = filtered_dbs\n                return True\n        return False\n\n    def _get_autodiscovery_query_cached(self, cursor):\n        if self.autodiscovery_query:\n            return self.autodiscovery_query\n        available_columns = self._get_available_sys_database_columns(cursor, expected_sys_databases_columns)\n        self.autodiscovery_query = AUTODISCOVERY_QUERY.format(columns=', '.join(available_columns))\n        return self.autodiscovery_query\n\n    def _get_available_sys_database_columns(self, cursor, all_expected_columns):\n        # confirm that sys.databases has the expected columns as not all versions of sql server\n        # support 'physical_database_name' column. The 'name' column will always be present &\n        # will be returned as the first column in the autodiscovery query\n        cursor.execute(\"select top 0 * from sys.databases\")\n        all_columns = {i[0] for i in cursor.description}\n        available_columns = [c for c in all_expected_columns if c in all_columns]\n        self.log.debug(\"found available sys.databases columns: %s\", available_columns)\n        return available_columns\n\n    def _make_metric_list_to_collect(self, custom_metrics):\n        \"\"\"\n        Store the list of metrics to collect by instance_key.\n        Will also create and cache cursors to query the db.\n        \"\"\"\n\n        metrics_to_collect = []\n        tags = self.instance.get('tags', [])\n\n        # Load instance-level (previously Performance metrics)\n        # If several check instances are querying the same server host, it can be wise to turn these off\n        # to avoid sending duplicate metrics\n        if is_affirmative(self.instance.get('include_instance_metrics', True)):\n            common_metrics = list(INSTANCE_METRICS)\n            if not self.dbm_enabled:\n                common_metrics.extend(DBM_MIGRATED_METRICS)\n            if not self.databases:\n                # if autodiscovery is enabled, we report metrics from the\n                # INSTANCE_METRICS_DATABASE struct below, so do not double report here\n                common_metrics.extend(INSTANCE_METRICS_DATABASE)\n            self._add_performance_counters(common_metrics, metrics_to_collect, tags, db=None)\n\n            # populated through autodiscovery\n            if self.databases:\n                for db in self.databases:\n                    self._add_performance_counters(\n                        INSTANCE_METRICS_DATABASE,\n                        metrics_to_collect,\n                        tags,\n                        db=db.name,\n                        physical_database_name=db.physical_db_name,\n                    )\n\n        # Load database statistics\n        for name, table, column in DATABASE_METRICS:\n            # include database as a filter option\n            db_names = [d.name for d in self.databases] or [\n                self.instance.get('database', self.connection.DEFAULT_DATABASE)\n            ]\n            for db_name in db_names:\n                cfg = {'name': name, 'table': table, 'column': column, 'instance_name': db_name, 'tags': tags}\n                metrics_to_collect.append(self.typed_metric(cfg_inst=cfg, table=table, column=column))\n\n        # Load AlwaysOn metrics\n        if is_affirmative(self.instance.get('include_ao_metrics', False)):\n            for name, table, column in AO_METRICS + AO_METRICS_PRIMARY + AO_METRICS_SECONDARY:\n                db_name = 'master'\n                cfg = {\n                    'name': name,\n                    'table': table,\n                    'column': column,\n                    'instance_name': db_name,\n                    'tags': tags,\n                    'ao_database': self.instance.get('ao_database', None),\n                    'availability_group': self.instance.get('availability_group', None),\n                    'only_emit_local': is_affirmative(self.instance.get('only_emit_local', False)),\n                }\n                metrics_to_collect.append(self.typed_metric(cfg_inst=cfg, table=table, column=column))\n\n        # Load metrics from scheduler and task tables, if enabled\n        if is_affirmative(self.instance.get('include_task_scheduler_metrics', False)):\n            for name, table, column in TASK_SCHEDULER_METRICS:\n                cfg = {'name': name, 'table': table, 'column': column, 'tags': tags}\n                metrics_to_collect.append(self.typed_metric(cfg_inst=cfg, table=table, column=column))\n\n        # Load sys.master_files metrics\n        if is_affirmative(self.instance.get('include_master_files_metrics', False)):\n            for name, table, column in DATABASE_MASTER_FILES:\n                cfg = {'name': name, 'table': table, 'column': column, 'tags': tags}\n                metrics_to_collect.append(self.typed_metric(cfg_inst=cfg, table=table, column=column))\n\n        # Load DB Fragmentation metrics\n        if is_affirmative(self.instance.get('include_db_fragmentation_metrics', False)):\n            db_fragmentation_object_names = self.instance.get('db_fragmentation_object_names', [])\n            db_names = [d.name for d in self.databases] or [\n                self.instance.get('database', self.connection.DEFAULT_DATABASE)\n            ]\n\n            if not db_fragmentation_object_names:\n                self.log.debug(\n                    \"No fragmentation object names specified, will return fragmentation metrics for all \"\n                    \"object_ids of current database(s): %s\",\n                    db_names,\n                )\n\n            for db_name in db_names:\n                for name, table, column in DATABASE_FRAGMENTATION_METRICS:\n                    cfg = {\n                        'name': name,\n                        'table': table,\n                        'column': column,\n                        'instance_name': db_name,\n                        'tags': tags,\n                        'db_fragmentation_object_names': db_fragmentation_object_names,\n                    }\n                    metrics_to_collect.append(self.typed_metric(cfg_inst=cfg, table=table, column=column))\n\n        # Load any custom metrics from conf.d/sqlserver.yaml\n        for cfg in custom_metrics:\n            sql_type = None\n            base_name = None\n\n            custom_tags = tags + cfg.get('tags', [])\n            cfg['tags'] = custom_tags\n\n            db_table = cfg.get('table', DEFAULT_PERFORMANCE_TABLE)\n            if db_table not in VALID_TABLES:\n                self.log.error('%s has an invalid table name: %s', cfg['name'], db_table)\n                continue\n\n            if cfg.get('database', None) and cfg.get('database') != self.instance.get('database'):\n                self.log.debug(\n                    'Skipping custom metric %s for database %s, check instance configured for database %s',\n                    cfg['name'],\n                    cfg.get('database'),\n                    self.instance.get('database'),\n                )\n                continue\n\n            if db_table == DEFAULT_PERFORMANCE_TABLE:\n                user_type = cfg.get('type')\n                if user_type is not None and user_type not in VALID_METRIC_TYPES:\n                    self.log.error('%s has an invalid metric type: %s', cfg['name'], user_type)\n                sql_type = None\n                try:\n                    if user_type is None:\n                        sql_type, base_name = self.get_sql_type(cfg['counter_name'])\n                except Exception:\n                    self.log.warning(\"Can't load the metric %s, ignoring\", cfg['name'], exc_info=True)\n                    continue\n\n                metrics_to_collect.append(\n                    self.typed_metric(\n                        cfg_inst=cfg, table=db_table, base_name=base_name, user_type=user_type, sql_type=sql_type\n                    )\n                )\n\n            else:\n                for column in cfg['columns']:\n                    metrics_to_collect.append(\n                        self.typed_metric(\n                            cfg_inst=cfg, table=db_table, base_name=base_name, sql_type=sql_type, column=column\n                        )\n                    )\n\n        self.instance_metrics = metrics_to_collect\n        self.log.debug(\"metrics to collect %s\", metrics_to_collect)\n\n        # create an organized grouping of metric names to their metric classes\n        for m in metrics_to_collect:\n            cls = m.__class__.__name__\n            name = m.sql_name or m.column\n            self.log.debug(\"Adding metric class %s named %s\", cls, name)\n\n            self.instance_per_type_metrics[cls].add(name)\n            if m.base_name:\n                self.instance_per_type_metrics[cls].add(m.base_name)\n\n    def _add_performance_counters(self, metrics, metrics_to_collect, tags, db=None, physical_database_name=None):\n        if db is not None:\n            tags = tags + ['database:{}'.format(db)]\n        for name, counter_name, instance_name in metrics:\n            try:\n                sql_type, base_name = self.get_sql_type(counter_name)\n                cfg = {\n                    'name': name,\n                    'counter_name': counter_name,\n                    'instance_name': db or instance_name,\n                    'physical_db_name': physical_database_name,\n                    'tags': tags,\n                }\n\n                metrics_to_collect.append(\n                    self.typed_metric(\n                        cfg_inst=cfg, table=DEFAULT_PERFORMANCE_TABLE, base_name=base_name, sql_type=sql_type\n                    )\n                )\n            except SQLConnectionError:\n                raise\n            except Exception:\n                self.log.warning(\"Can't load the metric %s, ignoring\", name, exc_info=True)\n                continue\n\n    def get_sql_type(self, counter_name):\n        \"\"\"\n        Return the type of the performance counter so that we can report it to\n        Datadog correctly\n        If the sql_type is one that needs a base (PERF_RAW_LARGE_FRACTION and\n        PERF_AVERAGE_BULK), the name of the base counter will also be returned\n        \"\"\"\n        with self.connection.get_managed_cursor() as cursor:\n            cursor.execute(COUNTER_TYPE_QUERY, (counter_name,))\n            (sql_type,) = cursor.fetchone()\n            if sql_type == PERF_LARGE_RAW_BASE:\n                self.log.warning(\"Metric %s is of type Base and shouldn't be reported this way\", counter_name)\n            base_name = None\n            if sql_type in [PERF_AVERAGE_BULK, PERF_RAW_LARGE_FRACTION]:\n                # This is an ugly hack. For certains type of metric (PERF_RAW_LARGE_FRACTION\n                # and PERF_AVERAGE_BULK), we need two metrics: the metrics specified and\n                # a base metrics to get the ratio. There is no unique schema so we generate\n                # the possible candidates and we look at which ones exist in the db.\n                candidates = (\n                    counter_name + \" base\",\n                    counter_name.replace(\"(ms)\", \"base\"),\n                    counter_name.replace(\"Avg \", \"\") + \" base\",\n                )\n                try:\n                    cursor.execute(BASE_NAME_QUERY, candidates)\n                    base_name = cursor.fetchone().counter_name.strip()\n                    self.log.debug(\"Got base metric: %s for metric: %s\", base_name, counter_name)\n                except Exception as e:\n                    self.log.warning(\"Could not get counter_name of base for metric: %s\", e)\n\n        return sql_type, base_name\n\n    def typed_metric(self, cfg_inst, table, base_name=None, user_type=None, sql_type=None, column=None):\n        \"\"\"\n        Create the appropriate BaseSqlServerMetric object, each implementing its method to\n        fetch the metrics properly.\n        If a `type` was specified in the config, it is used to report the value\n        directly fetched from SQLServer. Otherwise, it is decided based on the\n        sql_type, according to microsoft's documentation.\n        \"\"\"\n        if table == DEFAULT_PERFORMANCE_TABLE:\n            metric_type_mapping = {\n                PERF_COUNTER_BULK_COUNT: (self.rate, metrics.SqlSimpleMetric),\n                PERF_COUNTER_LARGE_RAWCOUNT: (self.gauge, metrics.SqlSimpleMetric),\n                PERF_LARGE_RAW_BASE: (self.gauge, metrics.SqlSimpleMetric),\n                PERF_RAW_LARGE_FRACTION: (self.gauge, metrics.SqlFractionMetric),\n                PERF_AVERAGE_BULK: (self.gauge, metrics.SqlIncrFractionMetric),\n            }\n            if user_type is not None:\n                # user type overrides any other value\n                metric_type = getattr(self, user_type)\n                cls = metrics.SqlSimpleMetric\n\n            else:\n                metric_type, cls = metric_type_mapping[sql_type]\n        else:\n            # Lookup metrics classes by their associated table\n            metric_type_str, cls = metrics.TABLE_MAPPING[table]\n            metric_type = getattr(self, metric_type_str)\n\n        cfg_inst['hostname'] = self.resolved_hostname\n\n        return cls(cfg_inst, base_name, metric_type, column, self.log)\n\n    def check(self, _):\n        if self.do_check:\n            # configure custom queries for the check\n            if self._query_manager is None:\n                # use QueryManager to process custom queries\n                self._query_manager = QueryManager(\n                    self, self.execute_query_raw, tags=self.tags, hostname=self.resolved_hostname\n                )\n                self._query_manager.compile_queries()\n            if self.server_state_queries is None:\n                self.server_state_queries = self._new_query_executor([QUERY_SERVER_STATIC_INFO])\n                self.server_state_queries.compile_queries()\n            if self.proc:\n                self.do_stored_procedure_check()\n            else:\n                self.collect_metrics()\n            if self.autodiscovery and self.autodiscovery_db_service_check:\n                for db in self.databases:\n                    if db.name != self.connection.DEFAULT_DATABASE:\n                        try:\n                            self.connection.check_database_conns(db.name)\n                        except Exception as e:\n                            # service_check errors on auto discovered databases should not abort the check\n                            self.log.warning(\"failed service check for auto discovered database: %s\", e)\n\n            if self.dbm_enabled:\n                self.statement_metrics.run_job_loop(self.tags)\n                self.activity.run_job_loop(self.tags)\n        else:\n            self.log.debug(\"Skipping check\")\n\n    @property\n    def dynamic_queries(self):\n        \"\"\"\n        Initializes dynamic queries which depend on static information loaded from the database\n        \"\"\"\n        if self._dynamic_queries:\n            return self._dynamic_queries\n\n        major_version = self.static_info_cache.get(STATIC_INFO_MAJOR_VERSION)\n        if not major_version:\n            self.log.warning(\"missing major_version, cannot initialize dynamic queries\")\n            return None\n\n        queries = [get_query_file_stats(major_version)]\n\n        if is_affirmative(self.instance.get('include_ao_metrics', False)):\n            if major_version > 2012:\n                queries.extend(\n                    [\n                        get_query_ao_availability_groups(major_version),\n                        QUERY_AO_FAILOVER_CLUSTER,\n                        QUERY_AO_FAILOVER_CLUSTER_MEMBER,\n                    ]\n                )\n            else:\n                self.log.warning('AlwaysOn metrics are not supported on version 2012')\n        if is_affirmative(self.instance.get('include_fci_metrics', False)):\n            if major_version > 2012:\n                queries.extend([QUERY_FAILOVER_CLUSTER_INSTANCE])\n            else:\n                self.log.warning('Failover Cluster Instance metrics are not supported on version 2012')\n\n        self._dynamic_queries = self._new_query_executor(queries)\n        self._dynamic_queries.compile_queries()\n        self.log.debug(\"initialized dynamic queries\")\n        return self._dynamic_queries\n\n    def collect_metrics(self):\n        \"\"\"Fetch the metrics from all the associated database tables.\"\"\"\n\n        with self.connection.open_managed_default_connection():\n            with self.connection.get_managed_cursor() as cursor:\n                # initiate autodiscovery or if the server was down at check __init__ key could be missing.\n                if self.autodiscover_databases(cursor) or not self.instance_metrics:\n                    self._make_metric_list_to_collect(self.custom_metrics)\n\n                instance_results = {}\n\n                # Execute the `fetch_all` operations first to minimize the database calls\n                for cls, metric_names in six.iteritems(self.instance_per_type_metrics):\n                    if not metric_names:\n                        instance_results[cls] = None, None\n                    else:\n                        try:\n                            db_names = [d.name for d in self.databases] or [\n                                self.instance.get('database', self.connection.DEFAULT_DATABASE)\n                            ]\n                            rows, cols = getattr(metrics, cls).fetch_all_values(\n                                cursor, list(metric_names), self.log, databases=db_names\n                            )\n                        except Exception as e:\n                            self.log.error(\"Error running `fetch_all` for metrics %s - skipping.  Error: %s\", cls, e)\n                            rows, cols = None, None\n\n                        instance_results[cls] = rows, cols\n\n                # Using the cached data, extract and report individual metrics\n                for metric in self.instance_metrics:\n                    if type(metric) is metrics.SqlIncrFractionMetric:\n                        # special case, since it uses the same results as SqlFractionMetric\n                        key = 'SqlFractionMetric'\n                    else:\n                        key = metric.__class__.__name__\n\n                    if key not in instance_results:\n                        self.log.warning(\"No %s metrics found, skipping\", str(key))\n                    else:\n                        rows, cols = instance_results[key]\n                        if rows is not None:\n                            metric.fetch_metric(rows, cols)\n\n            # Neither pyodbc nor adodbapi are able to read results of a query if the number of rows affected\n            # statement are returned as part of the result set, so we disable for the entire connection\n            # this is important mostly for custom_queries or the stored_procedure feature\n            # https://docs.microsoft.com/en-us/sql/t-sql/statements/set-nocount-transact-sql\n            with self.connection.get_managed_cursor() as cursor:\n                cursor.execute(\"SET NOCOUNT ON\")\n            try:\n                # Server state queries require VIEW SERVER STATE permissions, which some managed database\n                # versions do not support.\n                if self.static_info_cache.get(STATIC_INFO_ENGINE_EDITION) not in [\n                    ENGINE_EDITION_SQL_DATABASE,\n                ]:\n                    self.server_state_queries.execute()\n\n                if self.dynamic_queries:\n                    self.dynamic_queries.execute()\n                # reuse connection for any custom queries\n                self._query_manager.execute()\n            finally:\n                with self.connection.get_managed_cursor() as cursor:\n                    cursor.execute(\"SET NOCOUNT OFF\")\n\n    def execute_query_raw(self, query):\n        with self.connection.get_managed_cursor() as cursor:\n            cursor.execute(query)\n            return cursor.fetchall()\n\n    def do_stored_procedure_check(self):\n        \"\"\"\n        Fetch the metrics from the stored proc\n        \"\"\"\n\n        proc = self.proc\n        guardSql = self.instance.get('proc_only_if')\n        custom_tags = self.instance.get(\"tags\", [])\n\n        if (guardSql and self.proc_check_guard(guardSql)) or not guardSql:\n            self.connection.open_db_connections(self.connection.DEFAULT_DB_KEY)\n            cursor = self.connection.get_cursor(self.connection.DEFAULT_DB_KEY)\n\n            try:\n                self.log.debug(\"Calling Stored Procedure : %s\", proc)\n                if self.connection.get_connector() == 'adodbapi':\n                    cursor.callproc(proc)\n                else:\n                    # pyodbc does not support callproc; use execute instead.\n                    # Reference: https://github.com/mkleehammer/pyodbc/wiki/Calling-Stored-Procedures\n                    call_proc = '{{CALL {}}}'.format(proc)\n                    cursor.execute(call_proc)\n\n                rows = cursor.fetchall()\n                self.log.debug(\"Row count (%s) : %s\", proc, cursor.rowcount)\n\n                for row in rows:\n                    tags = [] if row.tags is None or row.tags == '' else row.tags.split(',')\n                    tags.extend(custom_tags)\n\n                    if row.type.lower() in self.proc_type_mapping:\n                        self.proc_type_mapping[row.type](row.metric, row.value, tags, raw=True)\n                    else:\n                        self.log.warning(\n                            '%s is not a recognised type from procedure %s, metric %s', row.type, proc, row.metric\n                        )\n\n            except Exception as e:\n                self.log.warning(\"Could not call procedure %s: %s\", proc, e)\n                raise e\n\n            self.connection.close_cursor(cursor)\n            self.connection.close_db_connections(self.connection.DEFAULT_DB_KEY)\n        else:\n            self.log.info(\"Skipping call to %s due to only_if\", proc)\n\n    def proc_check_guard(self, sql):\n        \"\"\"\n        check to see if the guard SQL returns a single column containing 0 or 1\n        We return true if 1, else False\n        \"\"\"\n        self.connection.open_db_connections(self.connection.PROC_GUARD_DB_KEY)\n        cursor = self.connection.get_cursor(self.connection.PROC_GUARD_DB_KEY)\n\n        should_run = False\n        try:\n            cursor.execute(sql, ())\n            result = cursor.fetchone()\n            should_run = result[0] == 1\n        except Exception as e:\n            self.log.error(\"Failed to run proc_only_if sql %s : %s\", sql, e)\n\n        self.connection.close_cursor(cursor)\n        self.connection.close_db_connections(self.connection.PROC_GUARD_DB_KEY)\n        return should_run\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nsinglestore/tests/fixtures/leaves.csv\n## context:\n4,\"node-memsql-cluster-leaf-ag1-0.svc-memsql-cluster\",3306,1,\"node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster\",3306,11,0.584\n5,\"node-memsql-cluster-leaf-ag2-0.svc-memsql-cluster\",3306,2,\"node-memsql-cluster-leaf-ag1-0.svc-memsql-cluster\",3306,12,0.463"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndocs/developer/ddev/configuration.md\n## context:\n# Configuration\n\n-----\n\nAll configuration can be managed entirely by the `ddev config` command group. To locate the\n[TOML][toml-github] config file, run:\n\n```\nddev config find\n```\n\n## Repository\n\nAll CLI commands are aware of the current repository context, defined by the option `repo`. This option should be a\nreference to a key in `repos` which is set to the path of a supported repository. For example, this configuration:\n\n```toml\nrepo = \"core\"\n\n[repos]\ncore = \"/path/to/integrations-core\"\nextras = \"/path/to/integrations-extras\"\nagent = \"/path/to/datadog-agent\"\n```\n\nwould make it so running e.g. `ddev test nginx` will look for an integration named `nginx` in `/path/to/integrations-core`\nno matter what directory you are in. If the selected path does not exist, then the current directory will be used.\n\nBy default, `repo` is set to `core`.\n\n## Agent\n\nFor running environments with a [live Agent](../e2e.md), you can select a specific build version to use with the\noption `agent`. This option should be a reference to a key in `agents` which is a mapping of environment types to\nAgent versions. For example, this configuration:\n\n```toml\nagent = \"master\"\n\n[agents.master]\ndocker = \"datadog/agent-dev:master\"\nlocal = \"latest\"\n\n[agents.\"7.18.1\"]\ndocker = \"datadog/agent:7.18.1\"\nlocal = \"7.18.1\"\n```\n\nwould make it so environments that [define](plugins.md#metadata) the type as `docker` will use the Docker image\nthat was built with the latest commit to the [datadog-agent][] repo.\n\n## Organization\n\nYou can switch to using a particular organization with the option `org`. This option should be a reference to a\nkey in `orgs` which is a mapping containing data specific to the organization. For example, this configuration:\n\n```toml\norg = \"staging\"\n\n[orgs.staging]\napi_key = \"<API_KEY>\"\napp_key = \"<APP_KEY>\"\nsite = \"datadoghq.eu\"\n```\n\nwould use the access keys for the organization named `staging` and would submit data to the EU region.\n\nThe supported fields are:\n\n- [api_key][datadog-config-api-key]\n- [app_key][datadog-config-app-key]\n- [site][datadog-config-site]\n- [dd_url][datadog-config-dd-url]\n- [log_url][datadog-config-log-url]\n\n## GitHub\n\nTo avoid GitHub's public API rate limits, you need to set `github.user`/`github.token` in your config file or\nuse the `DD_GITHUB_USER`/`DD_GITHUB_TOKEN` environment variables.\n\nRun `ddev config show` to see if your GitHub user and token is set.\n\nIf not:\n\n1. Run `ddev config set github.user <YOUR_GITHUB_USERNAME>`\n1. Create a [personal access token][github-personal-access-token] with `public_repo` and `read:org` permissions\n1. Run `ddev config set github.token` then paste the token\n1. [Enable single sign-on][github-saml-single-sign-on] for the token\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncert_manager/tests/kubernetes/selfsigned.yaml\n## context:\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: cert-manager-test\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: test-selfsigned\n  namespace: cert-manager-test\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: selfsigned-cert\n  namespace: cert-manager-test\nspec:\n  dnsNames:\n    - example.com\n  secretName: selfsigned-cert-tls\n  issuerRef:\n    name: test-selfsigned"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ndocs/developer/ddev/configuration.md\n## context:\n# Configuration\n\n-----\n\nAll configuration can be managed entirely by the `ddev config` command group. To locate the\n[TOML][toml-github] config file, run:\n\n```\nddev config find\n```\n\n## Repository\n\nAll CLI commands are aware of the current repository context, defined by the option `repo`. This option should be a\nreference to a key in `repos` which is set to the path of a supported repository. For example, this configuration:\n\n```toml\nrepo = \"core\"\n\n[repos]\ncore = \"/path/to/integrations-core\"\nextras = \"/path/to/integrations-extras\"\nagent = \"/path/to/datadog-agent\"\n```\n\nwould make it so running e.g. `ddev test nginx` will look for an integration named `nginx` in `/path/to/integrations-core`\nno matter what directory you are in. If the selected path does not exist, then the current directory will be used.\n\nBy default, `repo` is set to `core`.\n\n## Agent\n\nFor running environments with a [live Agent](../e2e.md), you can select a specific build version to use with the\noption `agent`. This option should be a reference to a key in `agents` which is a mapping of environment types to\nAgent versions. For example, this configuration:\n\n```toml\nagent = \"master\"\n\n[agents.master]\ndocker = \"datadog/agent-dev:master\"\nlocal = \"latest\"\n\n[agents.\"7.18.1\"]\ndocker = \"datadog/agent:7.18.1\"\nlocal = \"7.18.1\"\n```\n\nwould make it so environments that [define](plugins.md#metadata) the type as `docker` will use the Docker image\nthat was built with the latest commit to the [datadog-agent][] repo.\n\n## Organization\n\nYou can switch to using a particular organization with the option `org`. This option should be a reference to a\nkey in `orgs` which is a mapping containing data specific to the organization. For example, this configuration:\n\n```toml\norg = \"staging\"\n\n[orgs.staging]\napi_key = \"<API_KEY>\"\napp_key = \"<APP_KEY>\"\nsite = \"datadoghq.eu\"\n```\n\nwould use the access keys for the organization named `staging` and would submit data to the EU region.\n\nThe supported fields are:\n\n- [api_key][datadog-config-api-key]\n- [app_key][datadog-config-app-key]\n- [site][datadog-config-site]\n- [dd_url][datadog-config-dd-url]\n- [log_url][datadog-config-log-url]\n\n## GitHub\n\nTo avoid GitHub's public API rate limits, you need to set `github.user`/`github.token` in your config file or\nuse the `DD_GITHUB_USER`/`DD_GITHUB_TOKEN` environment variables.\n\nRun `ddev config show` to see if your GitHub user and token is set.\n\nIf not:\n\n1. Run `ddev config set github.user <YOUR_GITHUB_USERNAME>`\n1. Create a [personal access token][github-personal-access-token] with `public_repo` and `read:org` permissions\n1. Run `ddev config set github.token` then paste the token\n1. [Enable single sign-on][github-saml-single-sign-on] for the token\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncloudera/tests/__init__.py\n## context:\n# (C) Datadog, Inc. 2022-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncert_manager/tests/kubernetes/selfsigned.yaml\n## context:\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: cert-manager-test\n---\napiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: test-selfsigned\n  namespace: cert-manager-test\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: selfsigned-cert\n  namespace: cert-manager-test\nspec:\n  dnsNames:\n    - example.com\n  secretName: selfsigned-cert-tls\n  issuerRef:\n    name: test-selfsigned"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmarklogic/assets/dashboards/overview.json\n## context:\n{\n    \"author_name\": \"Datadog\",\n    \"description\": \"Datadog's integration for MarkLogic gives you the visibility you need to identify performance issues and tune your deployments more effectively.\\n\\nThis dashboard shows an overview of your cluster health, and provides more information about forests and databases.\\n\\nClone this template dashboard to make changes and add your own graph widgets.\",\n    \"layout_type\": \"free\",\n    \"template_variables\": [\n        {\n            \"default\": \"*\",\n            \"name\": \"dd_host\",\n            \"prefix\": \"host\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"forest_name\",\n            \"prefix\": \"forest_name\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"database_name\",\n            \"prefix\": \"database_name\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"ml_host_name\",\n            \"prefix\": \"marklogic_host_name\"\n        }\n    ],\n    \"title\": \"MarkLogic - Overview\",\n    \"widgets\": [\n        {\n            \"definition\": {\n                \"columns\": [\n                    \"core_host\",\n                    \"core_service\"\n                ],\n                \"indexes\": [],\n                \"message_display\": \"expanded-md\",\n                \"query\": \"source:marklogic\",\n                \"show_date_column\": true,\n                \"show_message_column\": true,\n                \"sort\": {\n                    \"column\": \"time\",\n                    \"order\": \"desc\"\n                },\n                \"type\": \"log_stream\"\n            },\n            \"id\": 2577398194561278,\n            \"layout\": {\n                \"height\": 78,\n                \"width\": 47,\n                \"x\": 162,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.can_connect\",\n                \"group\": \"$host\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Cluster status\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 8755180811202380,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 24,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.forest.health\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Forest health\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 2200143632431740,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 40,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.database.health\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Database health\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 8505096373419124,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 56,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"requests\": [\n                    {\n                        \"q\": \"top(sum:marklogic.forests.storage.disk_size{*} by {forest_name}, 10, 'last', 'desc')\"\n                    }\n                ],\n                \"title\": \"Largest forests on disk (top 10 forests)\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"toplist\"\n            },\n            \"id\": 7675935468546344,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Forests\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2288121390055484,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# MarkLogic logs\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3278783423121882,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 162,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"\\n# Overview\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 4562551763936228,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"sizing\": \"zoom\",\n                \"type\": \"image\",\n                \"url\": \"/static/images/logos/marklogic_large.svg\"\n            },\n            \"id\": 3965572263080994,\n            \"layout\": {\n                \"height\": 12,\n                \"width\": 22,\n                \"x\": -8,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Hosts\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 7526170454995310,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 44\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.hosts.query_read_rate{$ml_host_name} by {host_name}, avg:marklogic.hosts.large_read_rate{$ml_host_name} by {host_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Read query rate and large document read rate over $ml_host_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 4092568594891762,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 50\n            }\n        },\n        {\n            \"definition\": {\n                \"requests\": [\n                    {\n                        \"q\": \"top(sum:marklogic.databases.data_size{*} by {database_name}, 10, 'last', 'desc')\"\n                    }\n                ],\n                \"title\": \"Largest databases on disk (top 10 databases)\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"toplist\"\n            },\n            \"id\": 4216303646461122,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 34,\n                \"x\": 126,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"autoscale\": true,\n                \"precision\": 2,\n                \"requests\": [\n                    {\n                        \"aggregator\": \"last\",\n                        \"q\": \"sum:marklogic.databases.forests_count{$database_name}\"\n                    }\n                ],\n                \"title\": \"Forests of $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"query_value\"\n            },\n            \"id\": 7180959663064248,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 23,\n                \"x\": 113,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"bars\",\n                        \"on_right_yaxis\": false,\n                        \"q\": \"sum:marklogic.requests.total_requests{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Total number of active requests over $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 6497256550880508,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 53\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.forests.total_rate{$forest_name} by {forest_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors by $forest_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 1251925672919538,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 68\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"Configure the databases Datadog will track using [resource filters](https://github.com/DataDog/integrations-core/blob/03831e4fb3f5d4e95f9aabe8d5a5da10dbf9547e/marklogic/datadog_checks/marklogic/data/conf.yaml.example#L60-L75)\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"right\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3596562826502024,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 12,\n                \"x\": 113,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.databases.total_rate{$database_name} by {database_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors by $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 7873483361703650,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 31\n            }\n        },\n        {\n            \"definition\": {\n                \"autoscale\": true,\n                \"precision\": 2,\n                \"requests\": [\n                    {\n                        \"aggregator\": \"avg\",\n                        \"conditional_formats\": [\n                            {\n                                \"comparator\": \">\",\n                                \"palette\": \"white_on_green\",\n                                \"value\": 0\n                            },\n                            {\n                                \"comparator\": \"<=\",\n                                \"palette\": \"white_on_yellow\",\n                                \"value\": 0\n                            }\n                        ],\n                        \"q\": \"sum:marklogic.databases.backup_count{$database_name}\"\n                    }\n                ],\n                \"title\": \"Backups of $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"query_value\"\n            },\n            \"id\": 8732386596109986,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 23,\n                \"x\": 137,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"white\",\n                \"content\": \"Datadog's integration for MarkLogic gives you the visibility you need to identify performance issues and tune your deployments more effectively.\\n\\nThis dashboard shows an overview of your cluster health, and provides more information about forests and databases.\\n\\nClone this template dashboard to make changes and add your own graph widgets.\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2191273978937394,\n            \"layout\": {\n                \"height\": 27,\n                \"width\": 22,\n                \"x\": 0,\n                \"y\": 14\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.hosts.total_rate{$ml_host_name} by {host_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors over $ml_host_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 5983605072600952,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 66\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Databases\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3172903413969796,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Requests\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 6184667112701002,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 47\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"bars\",\n                        \"on_right_yaxis\": false,\n                        \"q\": \"sum:marklogic.transactions.total_transactions{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Total number of open transactions over $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 6411568736004342,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 27\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"Query read rate and large read rate [indicate](https://docs.marklogic.com/guide/opsdir/Analyse#id_21175) overall disk I/O performance during queries.\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"right\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 7562397926143496,\n            \"layout\": {\n                \"height\": 13,\n                \"width\": 18,\n                \"x\": 5,\n                \"y\": 51\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.servers.request_rate{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Average request rate across $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 7586296888730830,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 69\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"If read query throughput is increasing while the hit rate for the compressed tree cache (`marklogic.forests.compressed_tree_cache_hit_rate`) is decreasing, it's likely that the cache is not large enough to handle the new queries\\u2014consider adding memory to the cache.\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 5842035442347632,\n            \"layout\": {\n                \"height\": 13,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.forests.query_read_rate{$forest_name} by {forest_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Read query rate\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 779967061471034,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 52\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.forests.compressed_tree_cache_hit_rate{*}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Compressed tree cache hit rate\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 2378507056004724,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 36\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"These service checks only appear when `enable_health_service_checks` is enabled.\\nA resource color depends on how MarkLogic tagged it: green for `info`, red for `critical`, and yellow for other tags like `at-risk`.\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"top\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2934360651001512,\n            \"layout\": {\n                \"height\": 11,\n                \"width\": 31,\n                \"x\": 40,\n                \"y\": 15\n            }\n        }\n    ]\n}\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\ncloudera/tests/__init__.py\n## context:\n# (C) Datadog, Inc. 2022-present\n# All rights reserved\n# Licensed under a 3-clause BSD style license (see LICENSE)\n"
        }
    },
    {
        "conversations": [
            {
                "from": "human",
                "value": "# Repo Name\nDataDog/integrations-core\n\n# Problem Statement\netcd leader check uses unsupported endpoint\nThe etcd integration currently uses the `/v3alpha/maintenance/status` endpoint when determining whether the instance it's checking is the leader:\r\nhttps://github.com/DataDog/integrations-core/blame/7ab36d84f116ccbdef71ed12b84e81462ca38113/etcd/datadog_checks/etcd/etcd.py#L127\r\n\r\nHowever, this endpoint has been graduated to `/v3/...`, so trying to access the `/v3alpha/...` endpoint returns a 404 on etcd 3.4. This results in the leader tag not getting added.\r\n\r\nI think this check should be updated to use the `/v3/...` endpoint, since that is available on 3.4.0 (https://github.com/hexfusion/etcd/blob/v3.4.0/Documentation/dev-guide/apispec/swagger/rpc.swagger.json#L1045) and above.\r\n\r\nPer etcd's docs on suported versions (https://etcd.io/docs/v3.5/op-guide/versioning/), because 3.5 is the current version, 3.4 is still maintained, but anything below is no longer maintained. Also, the oldest maintained version of kubernetes (1.25) is using etcd 3.5 (https://github.com/kubernetes/kubernetes/pull/110033).\r\n\r\nI'd be happy to make a PR for this change!\r\n\n"
            }
        ],
        "chosen": {
            "from": "gpt",
            "value": "# Related File\n## path:\nharbor/assets/configuration/spec.yaml\n## context:\nname: Harbor\nfiles:\n- name: harbor.yaml\n  options:\n  - template: init_config\n    options:\n    - template: init_config/http\n    - template: init_config/default\n  - template: instances\n    options:\n    - name: url\n      description: The Harbor HTTP url.\n      required: true\n      value:\n        type: string\n    - template: instances/http\n      overrides:\n        username.description: |\n          The username to use for authentication against the Harbor API.\n          Note: Some metrics and service checks requires an admin account to be collected.\n          This includes chartmuseum.status, replication registries data, volume information.\n        username.required: true\n        password.description: The password used together with the username for authentication against the Harbor API.\n        password.required: true\n    - template: instances/default\n  - template: logs\n    example:\n      type: file\n      path: /var/log/harbor/*.log\n      source: harbor\n- name: auto_conf.yaml\n  options:\n  - template: ad_identifiers\n    overrides:\n      value.example:\n        - nginx-photon\n  - template: init_config\n    options: []\n  - template: instances\n    options:\n      - name: url\n        required: true\n        description: The Harbor HTTP url.\n        value:\n          example: 'http://%%host%%/'\n          type: string\n      - name: username\n        required: true\n        description: |\n          The username to use for authentication against the Harbor API.\n          Note: Some metrics and service checks requires an admin account to be collected.\n          This includes chartmuseum.status, replication registries data, volume information.\n        value:\n          type: string\n      - name: password\n        required: true\n        description: The password used together with the username for authentication against the Harbor API.\n        value:\n          type: string\n"
        },
        "rejected": {
            "from": "gpt",
            "value": "# Related File\n## path:\nmarklogic/assets/dashboards/overview.json\n## context:\n{\n    \"author_name\": \"Datadog\",\n    \"description\": \"Datadog's integration for MarkLogic gives you the visibility you need to identify performance issues and tune your deployments more effectively.\\n\\nThis dashboard shows an overview of your cluster health, and provides more information about forests and databases.\\n\\nClone this template dashboard to make changes and add your own graph widgets.\",\n    \"layout_type\": \"free\",\n    \"template_variables\": [\n        {\n            \"default\": \"*\",\n            \"name\": \"dd_host\",\n            \"prefix\": \"host\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"forest_name\",\n            \"prefix\": \"forest_name\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"database_name\",\n            \"prefix\": \"database_name\"\n        },\n        {\n            \"default\": \"*\",\n            \"name\": \"ml_host_name\",\n            \"prefix\": \"marklogic_host_name\"\n        }\n    ],\n    \"title\": \"MarkLogic - Overview\",\n    \"widgets\": [\n        {\n            \"definition\": {\n                \"columns\": [\n                    \"core_host\",\n                    \"core_service\"\n                ],\n                \"indexes\": [],\n                \"message_display\": \"expanded-md\",\n                \"query\": \"source:marklogic\",\n                \"show_date_column\": true,\n                \"show_message_column\": true,\n                \"sort\": {\n                    \"column\": \"time\",\n                    \"order\": \"desc\"\n                },\n                \"type\": \"log_stream\"\n            },\n            \"id\": 2577398194561278,\n            \"layout\": {\n                \"height\": 78,\n                \"width\": 47,\n                \"x\": 162,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.can_connect\",\n                \"group\": \"$host\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Cluster status\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 8755180811202380,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 24,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.forest.health\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Forest health\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 2200143632431740,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 40,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"check\": \"marklogic.database.health\",\n                \"group_by\": [],\n                \"grouping\": \"cluster\",\n                \"tags\": [\n                    \"*\"\n                ],\n                \"title\": \"Database health\",\n                \"title_align\": \"center\",\n                \"title_size\": \"16\",\n                \"type\": \"check_status\"\n            },\n            \"id\": 8505096373419124,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 15,\n                \"x\": 56,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"requests\": [\n                    {\n                        \"q\": \"top(sum:marklogic.forests.storage.disk_size{*} by {forest_name}, 10, 'last', 'desc')\"\n                    }\n                ],\n                \"title\": \"Largest forests on disk (top 10 forests)\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"toplist\"\n            },\n            \"id\": 7675935468546344,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Forests\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2288121390055484,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# MarkLogic logs\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3278783423121882,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 162,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"\\n# Overview\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 4562551763936228,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"sizing\": \"zoom\",\n                \"type\": \"image\",\n                \"url\": \"/static/images/logos/marklogic_large.svg\"\n            },\n            \"id\": 3965572263080994,\n            \"layout\": {\n                \"height\": 12,\n                \"width\": 22,\n                \"x\": -8,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Hosts\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 7526170454995310,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 44\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.hosts.query_read_rate{$ml_host_name} by {host_name}, avg:marklogic.hosts.large_read_rate{$ml_host_name} by {host_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Read query rate and large document read rate over $ml_host_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 4092568594891762,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 50\n            }\n        },\n        {\n            \"definition\": {\n                \"requests\": [\n                    {\n                        \"q\": \"top(sum:marklogic.databases.data_size{*} by {database_name}, 10, 'last', 'desc')\"\n                    }\n                ],\n                \"title\": \"Largest databases on disk (top 10 databases)\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"toplist\"\n            },\n            \"id\": 4216303646461122,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 34,\n                \"x\": 126,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"autoscale\": true,\n                \"precision\": 2,\n                \"requests\": [\n                    {\n                        \"aggregator\": \"last\",\n                        \"q\": \"sum:marklogic.databases.forests_count{$database_name}\"\n                    }\n                ],\n                \"title\": \"Forests of $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"query_value\"\n            },\n            \"id\": 7180959663064248,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 23,\n                \"x\": 113,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"bars\",\n                        \"on_right_yaxis\": false,\n                        \"q\": \"sum:marklogic.requests.total_requests{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Total number of active requests over $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 6497256550880508,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 53\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.forests.total_rate{$forest_name} by {forest_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors by $forest_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 1251925672919538,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 68\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"Configure the databases Datadog will track using [resource filters](https://github.com/DataDog/integrations-core/blob/03831e4fb3f5d4e95f9aabe8d5a5da10dbf9547e/marklogic/datadog_checks/marklogic/data/conf.yaml.example#L60-L75)\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"right\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3596562826502024,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 12,\n                \"x\": 113,\n                \"y\": 6\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.databases.total_rate{$database_name} by {database_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors by $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 7873483361703650,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 31\n            }\n        },\n        {\n            \"definition\": {\n                \"autoscale\": true,\n                \"precision\": 2,\n                \"requests\": [\n                    {\n                        \"aggregator\": \"avg\",\n                        \"conditional_formats\": [\n                            {\n                                \"comparator\": \">\",\n                                \"palette\": \"white_on_green\",\n                                \"value\": 0\n                            },\n                            {\n                                \"comparator\": \"<=\",\n                                \"palette\": \"white_on_yellow\",\n                                \"value\": 0\n                            }\n                        ],\n                        \"q\": \"sum:marklogic.databases.backup_count{$database_name}\"\n                    }\n                ],\n                \"title\": \"Backups of $database_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"query_value\"\n            },\n            \"id\": 8732386596109986,\n            \"layout\": {\n                \"height\": 8,\n                \"width\": 23,\n                \"x\": 137,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"white\",\n                \"content\": \"Datadog's integration for MarkLogic gives you the visibility you need to identify performance issues and tune your deployments more effectively.\\n\\nThis dashboard shows an overview of your cluster health, and provides more information about forests and databases.\\n\\nClone this template dashboard to make changes and add your own graph widgets.\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2191273978937394,\n            \"layout\": {\n                \"height\": 27,\n                \"width\": 22,\n                \"x\": 0,\n                \"y\": 14\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"sum:marklogic.hosts.total_rate{$ml_host_name} by {host_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Sum of the processing rate factors over $ml_host_name\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 5983605072600952,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 66\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Databases\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 3172903413969796,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 0\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"vivid_blue\",\n                \"content\": \"# Requests\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"center\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 6184667112701002,\n            \"layout\": {\n                \"height\": 5,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 47\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"bars\",\n                        \"on_right_yaxis\": false,\n                        \"q\": \"sum:marklogic.transactions.total_transactions{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Total number of open transactions over $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 6411568736004342,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 24,\n                \"y\": 27\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"Query read rate and large read rate [indicate](https://docs.marklogic.com/guide/opsdir/Analyse#id_21175) overall disk I/O performance during queries.\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"right\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 7562397926143496,\n            \"layout\": {\n                \"height\": 13,\n                \"width\": 18,\n                \"x\": 5,\n                \"y\": 51\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.servers.request_rate{$dd_host}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"time\": {},\n                \"title\": \"Average request rate across $dd_host\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 7586296888730830,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 47,\n                \"x\": 113,\n                \"y\": 69\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"If read query throughput is increasing while the hit rate for the compressed tree cache (`marklogic.forests.compressed_tree_cache_hit_rate`) is decreasing, it's likely that the cache is not large enough to handle the new queries\\u2014consider adding memory to the cache.\",\n                \"font_size\": \"14\",\n                \"show_tick\": false,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"left\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 5842035442347632,\n            \"layout\": {\n                \"height\": 13,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 22\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.forests.query_read_rate{$forest_name} by {forest_name}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Read query rate\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 779967061471034,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 52\n            }\n        },\n        {\n            \"definition\": {\n                \"legend_size\": \"0\",\n                \"requests\": [\n                    {\n                        \"display_type\": \"line\",\n                        \"q\": \"avg:marklogic.forests.compressed_tree_cache_hit_rate{*}\",\n                        \"style\": {\n                            \"line_type\": \"solid\",\n                            \"line_width\": \"normal\",\n                            \"palette\": \"dog_classic\"\n                        }\n                    }\n                ],\n                \"show_legend\": false,\n                \"title\": \"Compressed tree cache hit rate\",\n                \"title_align\": \"left\",\n                \"title_size\": \"16\",\n                \"type\": \"timeseries\",\n                \"yaxis\": {\n                    \"include_zero\": true,\n                    \"label\": \"\",\n                    \"max\": \"auto\",\n                    \"min\": \"auto\",\n                    \"scale\": \"linear\"\n                }\n            },\n            \"id\": 2378507056004724,\n            \"layout\": {\n                \"height\": 15,\n                \"width\": 38,\n                \"x\": 73,\n                \"y\": 36\n            }\n        },\n        {\n            \"definition\": {\n                \"background_color\": \"gray\",\n                \"content\": \"These service checks only appear when `enable_health_service_checks` is enabled.\\nA resource color depends on how MarkLogic tagged it: green for `info`, red for `critical`, and yellow for other tags like `at-risk`.\",\n                \"font_size\": \"14\",\n                \"show_tick\": true,\n                \"text_align\": \"left\",\n                \"tick_edge\": \"top\",\n                \"tick_pos\": \"50%\",\n                \"type\": \"note\"\n            },\n            \"id\": 2934360651001512,\n            \"layout\": {\n                \"height\": 11,\n                \"width\": 31,\n                \"x\": 40,\n                \"y\": 15\n            }\n        }\n    ]\n}\n"
        }
    }
]